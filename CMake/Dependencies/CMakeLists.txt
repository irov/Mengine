CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

PROJECT( Dependencies )

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

ADD_SUBDIRECTORY( lz4 )
ADD_SUBDIRECTORY( libogg )
ADD_SUBDIRECTORY( libvorbis )
ADD_SUBDIRECTORY( libvorbisfile )
ADD_SUBDIRECTORY( libtheora )
ADD_SUBDIRECTORY( zlib )
ADD_SUBDIRECTORY( poly2tri )
ADD_SUBDIRECTORY( libjpeg )

ADD_SUBDIRECTORY( Python )

if( MENGINE_TARGET_AEPLUGIN )
    ADD_SUBDIRECTORY( ae )
endif()

#dependencies libwebp
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libwebp)    
	set(WEBP_ENABLE_SIMD ON CACHE BOOL "Enable any SIMD optimization." FORCE)
	set(WEBP_BUILD_ANIM_UTILS OFF CACHE BOOL "WEBP_BUILD_ANIM_UTILS" FORCE)
	set(WEBP_BUILD_CWEBP OFF CACHE BOOL "Build the cwebp command line tool." FORCE)
	set(WEBP_BUILD_DWEBP OFF CACHE BOOL "Build the dwebp command line tool." FORCE)
	set(WEBP_BUILD_GIF2WEBP OFF CACHE BOOL "Build the gif2webp conversion tool." FORCE)
	set(WEBP_BUILD_IMG2WEBP OFF CACHE BOOL "Build the img2webp animation tool." FORCE)
	set(WEBP_BUILD_VWEBP OFF CACHE BOOL "Build the vwebp viewer tool." FORCE)
	set(WEBP_BUILD_WEBPINFO OFF CACHE BOOL "Build the webpinfo command line tool." FORCE)
	set(WEBP_BUILD_WEBPMUX OFF CACHE BOOL "Build the webpinfo command line tool." FORCE)
	set(WEBP_BUILD_WEBP_JS OFF CACHE BOOL "Emscripten build of webp.js." FORCE)
	set(WEBP_ENABLE_SWAP_16BIT_CSP OFF CACHE BOOL "Enable byte swap for 16 bit colorspaces." FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libwebp )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})  

#dependencies stdex
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/stdex)    
	set(STDEX_EXTERNAL_BUILD ON CACHE BOOL "STDEX_EXTERNAL_BUILD" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/stdex )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2}) 

#dependencies libfe
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libfe)    
	set(FE_EXTERNAL_BUILD ON CACHE BOOL "FE_EXTERNAL_BUILD" FORCE)
	set(FE_TEST_BUILD OFF CACHE BOOL "FE_TEST_BUILD" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libfe )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})  

#dependencies ozz
if( NOT MENGINE_PLATFORM_ANDROID )
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/ozz)    
		set(ozz_build_fbx OFF CACHE BOOL "ozz_build_fbx" FORCE)
		set(ozz_build_data OFF CACHE BOOL "ozz_build_data" FORCE)
		set(ozz_build_samples OFF CACHE BOOL "ozz_build_samples" FORCE)
		set(ozz_build_howtos OFF CACHE BOOL "ozz_build_howtos" FORCE)
		set(ozz_build_tests OFF CACHE BOOL "ozz_build_tests" FORCE)
		set(ozz_build_simd_ref OFF CACHE BOOL "ozz_build_simd_ref" FORCE)
		set(ozz_build_cpp11 OFF CACHE BOOL "ozz_build_cpp11" FORCE)
		set(ozz_build_msvc_rt_dll OFF CACHE BOOL "ozz_build_msvc_rt_dll" FORCE)
		set(ozz_run_tests_headless OFF CACHE BOOL "ozz_run_tests_headless" FORCE)

    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/ozz )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
endif()

#dependencies libmovie
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libmovie)    
	set(LIBMOVIE_EXTERNAL_BUILD ON CACHE BOOL "LIBMOVIE_EXTERNAL_BUILD" FORCE)
    set(LIBMOVIE_EXAMPLES_BUILD OFF CACHE BOOL "LIBMOVIE_EXAMPLES_BUILD" FORCE)
	set(LIBMOVIE_COVERAGE OFF CACHE BOOL "LIBMOVIE_COVERAGE" FORCE)
    set(LIBMOVIE_INSTALL OFF CACHE BOOL "LIBMOVIE_INSTALL" FORCE)
    set(LIBMOVIE_TEST OFF CACHE BOOL "LIBMOVIE_TEST" FORCE)
    set(LIBMOVIE_MEMORY_DEBUG OFF CACHE BOOL "LIBMOVIE_MEMORY_DEBUG" FORCE)    

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libmovie )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})  

#dependencies jansson
if( MENGINE_PLATFORM_WIN32 )
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/jansson)    
		set(USE_URANDOM OFF CACHE BOOL "USE_URANDOM" FORCE)
		set(USE_WINDOWS_CRYPTOAPI OFF CACHE BOOL "USE_URANDOM" FORCE)
		set(JANSSON_STATIC_CRT ON CACHE BOOL "JANSSON_STATIC_CRT" FORCE)
		set(JANSSON_EXAMPLES OFF CACHE BOOL "USE_URANDOM" FORCE)
		set(JANSSON_BUILD_DOCS OFF CACHE BOOL "JANSSON_BUILD_DOCS" FORCE)
		set(JANSSON_WITHOUT_TESTS ON CACHE BOOL "JANSSON_WITHOUT_TESTS" FORCE)    
		set(JANSSON_INSTALL OFF CACHE BOOL "JANSSON_INSTALL" FORCE)    

		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson/jansson.h ${THIRDPARTY_DIR}/jansson/include/jansson.h COPYONLY)
		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson/jansson_config.h ${THIRDPARTY_DIR}/jansson/include/jansson_config.h COPYONLY)

    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/jansson )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})  
endif()

#dependencies pugixml
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/pugixml)
    set(BUILD_SHARED_LIBS OFF CACHE STRING "BUILD_SHARED_LIBS" FORCE)
    set(BUILD_TESTS OFF CACHE BOOL "BUILD_TESTS" FORCE)
    set(USE_VERSIONED_LIBDIR OFF CACHE STRING "USE_VERSIONED_LIBDIR" FORCE)
    set(USE_POSTFIX OFF CACHE STRING "USE_POSTFIX" FORCE)
    set(BUILD_DEFINES "PUGIXML_NO_XPATH" CACHE STRING "BUILD_DEFINES" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/pugixml )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})

#dependencies metabuf
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/metabuf)
	set(METABUF_EXTERNAL_BUILD ON CACHE BOOL "METABUF_EXTERNAL_BUILD" FORCE)
	set(METABUF_METAGEN OFF CACHE BOOL "METABUF_METAGEN" FORCE)
	if(WIN32)
		set(METABUF_XML2METABUF ON CACHE BOOL "METABUF_XML2METABUF" FORCE)
	endif()

	SET(METABUF_PUGIXML_EXTERNAL ON CACHE BOOL "METABUF_PUGIXML_EXTERNAL" FORCE)
	SET(METABUF_PUGIXML_INCLUDE_DIR ${THIRDPARTY_DIR}/pugixml/src CACHE STRING "METABUF_PUGIXML_INCLUDE_DIR" FORCE)
	SET(METABUF_PUGIXML_LIBRARY_NAME ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}pugixml${MENGINE_LIB_SUFFIX} CACHE STRING "METABUF_PUGIXML_LIBRARY_NAME" FORCE)

	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/metabuf/Metaconfig.hpp ${THIRDPARTY_DIR}/metabuf/include/config/Metaconfig.hpp COPYONLY)
    
ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/metabuf )
add_dependencies(metabuf pugixml)
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})

#dependencies libmath
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libmath)
	set(LIBMATH_EXTERNAL_BUILD ON CACHE BOOL "LIBMATH_EXTERNAL_BUILD" FORCE)
	set(LIBMATH_EXAMPLES_BUILD OFF CACHE BOOL "LIBMATH_EXAMPLES_BUILD" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libmath )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})    

#dependencies tinyini
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/tinyini)    
	set(TINYINI_EXTERNAL_BUILD ON CACHE BOOL "TINYINI_EXTERNAL_BUILD" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/tinyini )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})    

#dependencies freetype
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/freetype)
    set(SKIP_INSTALL_ALL ON CACHE BOOL "SKIP_INSTALL_ALL" FORCE)

    configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/freetype/CMakeLists.txt ${THIRDPARTY_DIR}/freetype/CMakeLists.txt COPYONLY)

    if( MENGINE_PLATFORM_IOS )
        set(IOS_PLATFORM "OS" CACHE STRING "IOS_PLATFORM" FORCE)
    endif()

    set(WITH_BZip2 OFF CACHE BOOL "WITH_BZip2" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/freetype )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})    

#dependencies curl
if(NOT MENGINE_TOOLCHAIN_GRADLE)
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/curl) 	
		set(BUILD_CURL_EXE OFF CACHE BOOL "Set to ON to build curl executable." FORCE)
        if(MENGINE_TOOLCHAIN_MSVC)
            set(CURL_STATIC_CRT ON CACHE BOOL "Set to ON to build libcurl with static CRT on Windows (/MT)." FORCE)
        else()
            set(CURL_STATIC_CRT OFF CACHE BOOL "Set to ON to build libcurl with static CRT on Windows (/MT)." FORCE)
        endif()
		set(BUILD_TESTING OFF CACHE BOOL "Set to ON to build curl executable." FORCE)
		set(ENABLE_MANUAL OFF CACHE BOOL "to provide the built-in manual" FORCE)
		set(CURL_STATICLIB ON CACHE BOOL "Set to ON to build libcurl with static linking." FORCE)
		set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libraries" FORCE)
		set(HTTP_ONLY OFF CACHE BOOL "disables all protocols except HTTP (This overrides all CURL_DISABLE_* options)" FORCE)
		set(CURL_DISABLE_FTP ON CACHE BOOL "CURL_DISABLE_FTP" FORCE)
		set(CURL_DISABLE_LDAP ON CACHE BOOL "CURL_DISABLE_LDAP" FORCE)
		set(CURL_DISABLE_LDAPS ON CACHE BOOL "CURL_DISABLE_LDAPS" FORCE)
		set(CURL_DISABLE_TELNET ON CACHE BOOL "CURL_DISABLE_TELNET" FORCE)
		set(CURL_DISABLE_DICT ON CACHE BOOL "CURL_DISABLE_DICT" FORCE)
		set(CURL_DISABLE_FILE ON CACHE BOOL "CURL_DISABLE_FILE" FORCE)
		set(CURL_DISABLE_TFTP ON CACHE BOOL "CURL_DISABLE_TFTP" FORCE)
		set(CURL_DISABLE_LDAPS ON CACHE BOOL "CURL_DISABLE_LDAPS" FORCE)
		set(CURL_DISABLE_RTSP ON CACHE BOOL "CURL_DISABLE_RTSP" FORCE)
		set(CURL_DISABLE_PROXY ON CACHE BOOL "CURL_DISABLE_RTSP" FORCE)    
		set(CURL_DISABLE_POP3 ON CACHE BOOL "CURL_DISABLE_POP3" FORCE)
		set(CURL_DISABLE_IMAP ON CACHE BOOL "CURL_DISABLE_IMAP" FORCE)
		set(CURL_DISABLE_SMTP ON CACHE BOOL "CURL_DISABLE_SMTP" FORCE)
		set(CURL_DISABLE_GOPHER ON CACHE BOOL "CURL_DISABLE_GOPHER" FORCE)
        
        set(CMAKE_USE_WINSSL OFF CACHE BOOL "Use CMAKE_USE_WINSSL code. Experimental" FORCE)

		set(CURL_DISABLE_COOKIES ON CACHE BOOL "CURL_DISABLE_COOKIES" FORCE)
		set(CURL_DISABLE_CRYPTO_AUTH ON CACHE BOOL "CURL_DISABLE_CRYPTO_AUTH" FORCE)   
		set(CMAKE_USE_LIBSSH2 OFF CACHE BOOL "Use CMAKE_USE_LIBSSH2 code. Experimental" FORCE)
    
		set(CURL_CA_PATH "none" CACHE STRING "CURL_CA_PATH" FORCE)

		if(MENGINE_PLATFORM_XCODE)
			set(CMAKE_USE_OPENSSL OFF CACHE BOOL "Use CMAKE_USE_OPENSSL code. Experimental" FORCE)
		endif()

		if(MENGINE_PLATFORM_ANDROID)
			set(CMAKE_USE_OPENSSL OFF CACHE BOOL "Use CMAKE_USE_OPENSSL code. Experimental" FORCE)
		endif()
			
		if(MENGINE_TARGET_WINDOWS)
			set(CMAKE_USE_WINSSL ON CACHE BOOL "Use CMAKE_USE_WINSSL code. Experimental" FORCE)
		endif()
        
        if(MENGINE_TARGET_MINGW)
            set(CMAKE_USE_LIBSSH2 OFF CACHE BOOL "Use CMAKE_USE_LIBSSH2 code. Experimental" FORCE)
        endif()

		if(MENGINE_PLATFORM_IOS)
			set(ENABLE_THREADED_RESOLVER OFF CACHE BOOL "ENABLE_THREADED_RESOLVER" FORCE)
			set(CMAKE_USE_LIBSSH2 OFF CACHE BOOL "Use CMAKE_USE_LIBSSH2 code. Experimental" FORCE)
			set(CMAKE_USE_DARWINSSL ON CACHE BOOL "Use CMAKE_USE_DARWINSSL code. Experimental" FORCE)
		endif()
		
		if(MENGINE_PLATFORM_IOS)
			#configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/curl/curl_config.h ${THIRDPARTY_DIR}/curl/lib/curl_config.h COPYONLY)
			#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/curl/curlbuild.h ${THIRDPARTY_DIR}/curl/include/curl/curlbuild.h COPYONLY)	
		endif()		
	
    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/curl )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
endif()

#dependencies SDL2
if(MENGINE_PLATFORM_SDL)
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/SDL2)  
        set(SDL_CMAKE_DEBUG_POSTFIX "d" CACHE STRING "Name suffix for debug builds" FORCE)
        
        if(MENGINE_TOOLCHAIN_MSVC)
            set(FORCE_STATIC_VCRT ON CACHE BOOL "Force /MT for static VC runtimes" FORCE)
            set(SDL_SHARED OFF CACHE BOOL "Build a static version of the library" FORCE)
            set(SDL_STATIC ON CACHE BOOL "Build a static version of the library" FORCE)
        endif()
        
        if(MENGINE_TOOLCHAIN_GRADLE)
            set(SDL_SHARED ON CACHE BOOL "Build a static version of the library" FORCE)
            set(SDL_STATIC OFF CACHE BOOL "Build a static version of the library" FORCE)    
        endif()

        if(MENGINE_TOOLCHAIN_MSVC)
            if(0)
                set(SDL_JOYSTICK OFF CACHE BOOL "SDL_JOYSTICK" FORCE)
                set(SDL_JOYSTICK_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
                set(SDL_HAPTIC OFF CACHE BOOL "SDL_HAPTIC" FORCE)
                set(SDL_HAPTIC_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
                set(SDL_POWER OFF CACHE BOOL "SDL_POWER" FORCE)
                set(SDL_POWER_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)        
            else()
                set(SDL_JOYSTICK ON CACHE BOOL "SDL_JOYSTICK" FORCE)
                set(SDL_JOYSTICK_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
                set(SDL_HAPTIC ON CACHE BOOL "SDL_HAPTIC" FORCE)
                set(SDL_HAPTIC_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
                set(SDL_POWER ON CACHE BOOL "SDL_POWER" FORCE)
                set(SDL_POWER_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)		
            endif()			
        endif()		
        
        if(MENGINE_TOOLCHAIN_GRADLE)
            set(SDL_JOYSTICK ON CACHE BOOL "SDL_JOYSTICK" FORCE)
            set(SDL_JOYSTICK_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
            set(SDL_HAPTIC ON CACHE BOOL "SDL_HAPTIC" FORCE)
            set(SDL_HAPTIC_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
            set(SDL_POWER ON CACHE BOOL "SDL_POWER" FORCE)
            set(SDL_POWER_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)
        endif()
        
        if(MENGINE_TOOLCHAIN_GRADLE)
            configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/SDL2/SDLActivity.java ${THIRDPARTY_DIR}/SDL2/android-project/app/src/main/java/org/libsdl/app/SDLActivity.java COPYONLY)
            configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/SDL2/SDLSurface.java ${THIRDPARTY_DIR}/SDL2/android-project/app/src/main/java/org/libsdl/app/SDLSurface.java COPYONLY)
        endif()    

    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/SDL2 )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
endif()


#dependencies Box2D
if(0)
	set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
	set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/Box2D/Box2D)
		SET(BOX2D_INSTALL OFF CACHE BOOL "Install Box2D libs, includes, and CMake scripts" FORCE)
		SET(BOX2D_INSTALL_DOC OFF CACHE BOOL "Install Box2D documentation" FORCE)
		SET(BOX2D_BUILD_SHARED OFF CACHE BOOL "Build Box2D shared libraries" FORCE)
		SET(BOX2D_BUILD_STATIC ON CACHE BOOL "Build Box2D static libraries" FORCE)
		SET(BOX2D_BUILD_EXAMPLES OFF CACHE BOOL "Build Box2D examples" FORCE)
		
	ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/Box2D )
	set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
endif()

#define openal-soft
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/openal-soft)
    if(MENGINE_TOOLCHAIN_MSVC)			
        SET(LIBTYPE STATIC)
        SET(FORCE_STATIC_VCRT ON CACHE BOOL "Force /MT for static VC runtimes" FORCE)
    endif()
    
    if(MENGINE_TOOLCHAIN_MINGW)
        SET(LIBTYPE STATIC)
        SET(ALSOFT_STATIC_LIBGCC ON CACHE BOOL "Force /MT for static VC runtimes" FORCE)
    endif()
    
    if(MENGINE_TOOLCHAIN_GRADLE)
        SET(LIBTYPE SHARED)
    endif()    

    SET(ALSOFT_DLOPEN OFF CACHE BOOL "Check for the dlopen API for loading optional libs" FORCE)
    SET(ALSOFT_WERROR OFF CACHE BOOL "Treat compile warnings as errors" FORCE)
    SET(ALSOFT_UTILS OFF CACHE BOOL "Build and install utility programs" FORCE)
    SET(ALSOFT_NO_CONFIG_UTIL ON CACHE BOOL "Disable building the alsoft-config utility" FORCE)
    SET(ALSOFT_EXAMPLES OFF CACHE BOOL "Build and install example programs" FORCE)
    SET(ALSOFT_TESTS OFF CACHE BOOL "Build and install test programs" FORCE)
    SET(ALSOFT_CONFIG OFF CACHE BOOL "Install alsoft.conf sample configuration file" FORCE)
    SET(ALSOFT_HRTF_DEFS OFF CACHE BOOL "Install HRTF definition files" FORCE)
    SET(ALSOFT_AMBDEC_PRESETS OFF CACHE BOOL "Install AmbDec preset files" FORCE)
    SET(ALSOFT_INSTALL OFF CACHE BOOL "Install headers and libraries" FORCE)
    SET(ALSOFT_NO_UID_DEFS OFF CACHE BOOL "Do not define GUIDs, IIDs, CLSIDs, or PropertyKeys" FORCE)
    SET(ALSOFT_EMBED_HRTF_DATA OFF CACHE BOOL "Embed the HRTF data files (increases library footprint)" FORCE)
    SET(ALSOFT_BUILD_IMPORT_LIB OFF CACHE BOOL "Build an import .lib using dlltool (requires sed)" FORCE)
    SET(ALSOFT_BACKEND_WAVE OFF CACHE BOOL "Enable Wave Writer backend" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/openal-soft )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})


#define libpng
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libpng)
    set(PNG_SHARED OFF CACHE BOOL "PNG_SHARED" FORCE)
    set(PNG_STATIC ON CACHE BOOL "PNG_STATIC" FORCE)
    set(PNG_TESTS OFF CACHE BOOL "PNG_TESTS" FORCE)
    set(PNG_FRAMEWORK OFF CACHE BOOL "PNG_FRAMEWORK" FORCE)
    set(PNG_DEBUG OFF CACHE BOOL "PNG_DEBUG" FORCE)
    set(PNGARG OFF CACHE BOOL "PNGARG" FORCE)
    set(PNG_HARDWARE_OPTIMIZATIONS OFF CACHE BOOL "PNGARG" FORCE)
    set(ZLIB_LIBRARY ${THIRDPARTY_DIR}/zlib)
    set(ZLIB_INCLUDE_DIR ${THIRDPARTY_DIR}/zlib)

    configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/libpng/pnglibconf.h ${THIRDPARTY_DIR}/libpng/pnglibconf.h COPYONLY)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libpng )
add_dependencies(png_static zlib)
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})

#define pybind
set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/pybind)
    set(PYBIND_PROJECT_NAME "pybind" CACHE STRING "PYBIND_PROJECT_NAME" FORCE)
    set(PYBIND_EXTERNAL_BUILD ON CACHE BOOL "PYBIND_EXTERNAL_BUILD" FORCE)
    set(PYBIND_PYTHON_INCLUDE_PATH "${THIRDPARTY_DIR}/Python" CACHE STRING "PYBIND_PYTHON_INCLUDE_PATH" FORCE)
    set(PYBIND_PYTHON_CONFIG_INCLUDE_PATH "${THIRDPARTY_DIR}/Python/PC" CACHE STRING "PYBIND_PYTHON_CONFIG_INCLUDE_PATH" FORCE)
    set(PYBIND_STDEX_INCLUDE_PATH "${THIRDPARTY_DIR}/stdex/include" CACHE STRING "PYBIND_STDEX_INCLUDE_PATH" FORCE)
    set(PYBIND_STL_NOT_SUPPORT ON CACHE BOOL "PYBIND_STL_NOT_SUPPORT" FORCE)
    set(PYBIND_PYTHON_VERSION 278 CACHE INTEGER "PYBIND_PYTHON_VERSION" FORCE)
    set(PYBIND_PYTHON_ERROR_FORMAT_FLAG ON CACHE BOOL "PYBIND_PYTHON_ERROR_FORMAT_FLAG" FORCE)
    set(PYBIND_INSTALL OFF CACHE BOOL "PYBIND_INSTALL" FORCE)
    set(PYBIND_SANDBOX OFF CACHE BOOL "PYBIND_SANDBOX" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/pybind )
add_dependencies(pybind python)
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})

if(MENGINE_TOOLCHAIN_MSVC)
    ADD_SUBDIRECTORY( Python3 )
    ADD_SUBDIRECTORY( Python3_decimal )

	#define pybind3
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/pybind)
		set(PYBIND_PROJECT_NAME "pybind3" CACHE STRING "PYBIND_PROJECT_NAME" FORCE)
		set(PYBIND_EXTERNAL_BUILD ON CACHE BOOL "PYBIND_EXTERNAL_BUILD" FORCE)
		set(PYBIND_PYTHON_INCLUDE_PATH "${THIRDPARTY_DIR}/Python3" CACHE STRING "PYBIND_PYTHON_INCLUDE_PATH" FORCE)
		set(PYBIND_PYTHON_CONFIG_INCLUDE_PATH "${THIRDPARTY_DIR}/Python3/PC" CACHE STRING "PYBIND_PYTHON_CONFIG_INCLUDE_PATH" FORCE)
		set(PYBIND_STDEX_INCLUDE_PATH "${THIRDPARTY_DIR}/stdex/include" CACHE STRING "PYBIND_STDEX_INCLUDE_PATH" FORCE)
        set(PYBIND_STL_NOT_SUPPORT ON CACHE BOOL "PYBIND_STL_NOT_SUPPORT" FORCE)
		set(PYBIND_PYTHON_VERSION 350 CACHE INTEGER "PYBIND_PYTHON_VERSION" FORCE)
        set(PYBIND_PYTHON_ERROR_FORMAT_FLAG OFF CACHE BOOL "PYBIND_PYTHON_ERROR_FORMAT_FLAG" FORCE)
        set(PYBIND_INSTALL OFF CACHE BOOL "PYBIND_INSTALL" FORCE)
        set(PYBIND_SANDBOX OFF CACHE BOOL "PYBIND_SANDBOX" FORCE)
			
		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/openssl/opensslconf.h ${THIRDPARTY_DIR}/openssl/include/openssl/opensslconf.h COPYONLY)

    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/pybind3 )
	add_dependencies(pybind3 python3 python3_decimal)
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
	
	ADD_SUBDIRECTORY( glad )
	
	set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
	set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/glfw3)
		set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "GLFW_BUILD_EXAMPLES" FORCE)
		set(GLFW_BUILD_TESTS OFF CACHE BOOL "GLFW_BUILD_TESTS" FORCE)
		set(GLFW_BUILD_DOCS OFF CACHE BOOL "GLFW_BUILD_DOCS" FORCE)
		set(GLFW_INSTAL OFF CACHE BOOL "GLFW_INSTAL" FORCE)
		set(GLFW_VULKAN_STATIC OFF CACHE BOOL "GLFW_VULKAN_STATIC" FORCE)

	ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/glfw3 )
	set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})	
	
	ADD_SUBDIRECTORY( imgui )
endif()