CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )

PROJECT( Dependencies )

include(ExternalProject)

include(openal/openal_download.cmake)
include(libwebp/libwebp_download.cmake)
include(stdex/stdex_download.cmake)
include(libfe/libfe_download.cmake)
include(ozz/ozz_download.cmake)
include(libmovie/libmovie_download.cmake)
include(jansson/jansson_download.cmake)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/metabuf)
set(METABUF_EXTERNAL_BUILD ON CACHE BOOL "METABUF_EXTERNAL_BUILD" FORCE)
set(METABUF_METAGEN OFF CACHE BOOL "METABUF_METAGEN" FORCE)
if(WIN32)
    set(METABUF_XML2METABUF ON CACHE BOOL "METABUF_XML2METABUF" FORCE)
endif()

SET(METABUF_PUGIXML_EXTERNAL ON CACHE BOOL "METABUF_PUGIXML_EXTERNAL" FORCE)
SET(METABUF_PUGIXML_INCLUDE_DIR ${THIRDPARTY_DIR}/pugixml/src CACHE STRING "METABUF_PUGIXML_INCLUDE_DIR" FORCE)
SET(METABUF_PUGIXML_LIBRARY_NAME ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}pugixml${MENGINE_LIB_SUFFIX} CACHE STRING "METABUF_PUGIXML_LIBRARY_NAME" FORCE)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/metabuf/Metaconfig.hpp ${THIRDPARTY_DIR}/metabuf/metabuf/Metaconfig.hpp COPYONLY)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/metabuf )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})    

set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libmath)
set(LIBMATH_EXTERNAL_BUILD ON CACHE BOOL "LIBMATH_EXTERNAL_BUILD" FORCE)
set(LIBMATH_EXAMPLES_BUILD OFF CACHE BOOL "LIBMATH_EXAMPLES_BUILD" FORCE)
ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libmath )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})    

set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/tinyini)    
set(TINYINI_EXTERNAL_BUILD ON CACHE BOOL "TINYINI_EXTERNAL_BUILD" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/tinyini )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})    

if( MENGINE_PLUGIN_TTF )
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/freetype)
    set(SKIP_INSTALL_ALL ON CACHE BOOL "SKIP_INSTALL_ALL" FORCE)
    
    configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/freetype/CMakeLists.txt ${THIRDPARTY_DIR}/freetype/CMakeLists.txt COPYONLY)
    
if( MENGINE_PLATFORM_IOS )
    set(IOS_PLATFORM "OS" CACHE STRING "IOS_PLATFORM" FORCE)
endif()

    set(WITH_BZip2 OFF CACHE BOOL "WITH_BZip2" FORCE)

    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/freetype )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})    
endif()

if( MENGINE_PLUGIN_CURL AND NOT MENGINE_PLATFORM_ANDROID )
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libcurl) 
	
    set(BUILD_CURL_EXE OFF CACHE BOOL "Set to ON to build curl executable." FORCE)
    set(BUILD_TESTING OFF CACHE BOOL "Set to ON to build curl executable." FORCE)
    set(ENABLE_MANUAL OFF CACHE BOOL "to provide the built-in manual" FORCE)
    set(CURL_STATICLIB ON CACHE BOOL "Set to ON to build libcurl with static linking." FORCE)
    set(HTTP_ONLY OFF CACHE BOOL "disables all protocols except HTTP (This overrides all CURL_DISABLE_* options)" FORCE)
    set(CURL_DISABLE_FTP ON CACHE BOOL "CURL_DISABLE_FTP" FORCE)
    set(CURL_DISABLE_LDAP ON CACHE BOOL "CURL_DISABLE_LDAP" FORCE)
    set(CURL_DISABLE_LDAPS ON CACHE BOOL "CURL_DISABLE_LDAPS" FORCE)
    set(CURL_DISABLE_TELNET ON CACHE BOOL "CURL_DISABLE_TELNET" FORCE)
    set(CURL_DISABLE_DICT ON CACHE BOOL "CURL_DISABLE_DICT" FORCE)
    set(CURL_DISABLE_FILE ON CACHE BOOL "CURL_DISABLE_FILE" FORCE)
    set(CURL_DISABLE_TFTP ON CACHE BOOL "CURL_DISABLE_TFTP" FORCE)
    set(CURL_DISABLE_LDAPS ON CACHE BOOL "CURL_DISABLE_LDAPS" FORCE)
    set(CURL_DISABLE_RTSP ON CACHE BOOL "CURL_DISABLE_RTSP" FORCE)
    set(CURL_DISABLE_PROXY ON CACHE BOOL "CURL_DISABLE_RTSP" FORCE)    
    set(CURL_DISABLE_POP3 ON CACHE BOOL "CURL_DISABLE_POP3" FORCE)
    set(CURL_DISABLE_IMAP ON CACHE BOOL "CURL_DISABLE_IMAP" FORCE)
    set(CURL_DISABLE_SMTP ON CACHE BOOL "CURL_DISABLE_SMTP" FORCE)
    set(CURL_DISABLE_GOPHER ON CACHE BOOL "CURL_DISABLE_GOPHER" FORCE)

    set(CURL_DISABLE_COOKIES ON CACHE BOOL "CURL_DISABLE_COOKIES" FORCE)
    set(CURL_DISABLE_CRYPTO_AUTH ON CACHE BOOL "CURL_DISABLE_CRYPTO_AUTH" FORCE)   
    set(CMAKE_USE_LIBSSH2 OFF CACHE BOOL "CMAKE_USE_LIBSSH2" FORCE)      
    
    set(CURL_CA_PATH "none" CACHE STRING "CURL_CA_PATH" FORCE)

if(MENGINE_PLATFORM_XCODE)
    set(CMAKE_USE_OPENSSL OFF CACHE BOOL "Use CMAKE_USE_OPENSSL code. Experimental" FORCE)
endif()

if(MENGINE_PLATFORM_ANDROID)
    set(CMAKE_USE_OPENSSL OFF CACHE BOOL "Use CMAKE_USE_OPENSSL code. Experimental" FORCE)
endif()
    
if(MENGINE_PLATFORM_WIN32)
    set(CMAKE_USE_WINSSL ON CACHE BOOL "Use CMAKE_USE_WINSSL code. Experimental" FORCE)
endif()

if(MENGINE_PLATFORM_IOS)
    set(ENABLE_THREADED_RESOLVER OFF CACHE BOOL "ENABLE_THREADED_RESOLVER" FORCE)
    set(CMAKE_USE_LIBSSH2 OFF CACHE BOOL "Use CMAKE_USE_LIBSSH2 code. Experimental" FORCE)
    set(CMAKE_USE_DARWINSSL ON CACHE BOOL "Use CMAKE_USE_DARWINSSL code. Experimental" FORCE)
endif()
	
    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libcurl )
	
if(MENGINE_PLATFORM_IOS)
    #configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/libcurl/curl_config.h ${THIRDPARTY_DIR}/libcurl/lib/curl_config.h COPYONLY)
    #configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libcurl/curlbuild.h ${THIRDPARTY_DIR}/libcurl/include/curl/curlbuild.h COPYONLY)	
endif()

    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
endif()


if( MENGINE_TARGET_SDL AND (MENGINE_PLATFORM_MAC OR MENGINE_PLATFORM_WIN32 OR MENGINE_PLATFORM_ANDROID ) )
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/SDL2)  
    
    if(MENGINE_PLATFORM_WIN32 OR MENGINE_PLATFORM_MAC)
        set(FORCE_STATIC_VCRT ON CACHE BOOL "Force /MT for static VC runtimes" FORCE)
        set(SDL_SHARED OFF CACHE BOOL "Build a static version of the library" FORCE)
        set(SDL_STATIC ON CACHE BOOL "Build a static version of the library" FORCE)
    endif()
    
    if(MENGINE_PLATFORM_ANDROID)
        set(SDL_SHARED ON CACHE BOOL "Build a static version of the library" FORCE)
        set(SDL_STATIC OFF CACHE BOOL "Build a static version of the library" FORCE)    
    endif()
    
	
    if(MENGINE_PLATFORM_WIN32 OR MENGINE_PLATFORM_MAC)
		if(0)
			set(SDL_JOYSTICK OFF CACHE BOOL "SDL_JOYSTICK" FORCE)
			set(SDL_JOYSTICK_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
			set(SDL_HAPTIC OFF CACHE BOOL "SDL_HAPTIC" FORCE)
			set(SDL_HAPTIC_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
			set(SDL_POWER OFF CACHE BOOL "SDL_POWER" FORCE)
			set(SDL_POWER_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)        
		else()
			set(SDL_JOYSTICK ON CACHE BOOL "SDL_JOYSTICK" FORCE)
			set(SDL_JOYSTICK_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
			set(SDL_HAPTIC ON CACHE BOOL "SDL_HAPTIC" FORCE)
			set(SDL_HAPTIC_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
			set(SDL_POWER ON CACHE BOOL "SDL_POWER" FORCE)
			set(SDL_POWER_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)		
		endif()			
	endif()
	
    
    if(MENGINE_PLATFORM_ANDROID)
        set(SDL_JOYSTICK ON CACHE BOOL "SDL_JOYSTICK" FORCE)
        set(SDL_JOYSTICK_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
        set(SDL_HAPTIC ON CACHE BOOL "SDL_HAPTIC" FORCE)
        set(SDL_HAPTIC_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
        set(SDL_POWER ON CACHE BOOL "SDL_POWER" FORCE)
        set(SDL_POWER_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)
    endif()
    
    set(SDL_CMAKE_DEBUG_POSTFIX "" CACHE STRING "SDL_CMAKE_DEBUG_POSTFIX")
	
	if(MENGINE_PLATFORM_ANDROID)
		configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/SDL2/SDLActivity.java ${THIRDPARTY_DIR}/SDL2/android-project/app/src/main/java/org/libsdl/app/SDLActivity.java COPYONLY)
		configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/SDL2/SDLSurface.java ${THIRDPARTY_DIR}/SDL2/android-project/app/src/main/java/org/libsdl/app/SDLSurface.java COPYONLY)
	endif()
    
    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/SDL2 )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
endif()

if(0)
	set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
	set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/Box2D/Box2D)
	SET(BOX2D_INSTALL OFF CACHE BOOL "Install Box2D libs, includes, and CMake scripts" FORCE)
	SET(BOX2D_INSTALL_DOC OFF CACHE BOOL "Install Box2D documentation" FORCE)
	SET(BOX2D_BUILD_SHARED OFF CACHE BOOL "Build Box2D shared libraries" FORCE)
	SET(BOX2D_BUILD_STATIC ON CACHE BOOL "Build Box2D static libraries" FORCE)
	SET(BOX2D_BUILD_EXAMPLES OFF CACHE BOOL "Build Box2D examples" FORCE)
	ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/Box2D )
	set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})
endif()

if( MENGINE_TARGET_AEPLUGIN )
    ADD_SUBDIRECTORY( ae )
endif()    


ADD_SUBDIRECTORY( lz4 )
ADD_SUBDIRECTORY( libogg )
ADD_SUBDIRECTORY( libvorbis )
ADD_SUBDIRECTORY( libvorbisfile )
ADD_SUBDIRECTORY( libtheora )

#ADD_SUBDIRECTORY( AtlasAllocator )

#ADD_SUBDIRECTORY( simpleini )

ADD_SUBDIRECTORY( zlib )
ADD_SUBDIRECTORY( poly2tri )
ADD_SUBDIRECTORY( polyclipping )
#ADD_SUBDIRECTORY( icu )

#ADD_SUBDIRECTORY( Box2D )

ADD_SUBDIRECTORY( libjpeg )
#ADD_SUBDIRECTORY( libpng )
#ADD_SUBDIRECTORY( libwebp )

#ADD_SUBDIRECTORY( pybind )

set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/libpng)
    set(PNG_SHARED OFF CACHE BOOL "PNG_SHARED" FORCE)
    set(PNG_STATIC ON CACHE BOOL "PNG_STATIC" FORCE)
    set(PNG_TESTS OFF CACHE BOOL "PNG_TESTS" FORCE)
    set(PNG_FRAMEWORK OFF CACHE BOOL "PNG_FRAMEWORK" FORCE)
    set(PNG_DEBUG OFF CACHE BOOL "PNG_DEBUG" FORCE)
    set(PNGARG OFF CACHE BOOL "PNGARG" FORCE)
    set(PNG_HARDWARE_OPTIMIZATIONS OFF CACHE BOOL "PNGARG" FORCE)
    set(ZLIB_LIBRARY ${THIRDPARTY_DIR}/zlib)
    set(ZLIB_INCLUDE_DIR ${THIRDPARTY_DIR}/zlib)

    configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/libpng/pnglibconf.h ${THIRDPARTY_DIR}/libpng/pnglibconf.h COPYONLY)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/libpng )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})

set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/pybind)
    set(PYBIND_PROJECT_NAME "pybind" CACHE STRING "PYBIND_PROJECT_NAME" FORCE)
    set(PYBIND_EXTERNAL_BUILD ON CACHE BOOL "PYBIND_EXTERNAL_BUILD" FORCE)
    set(PYBIND_PYTHON_INCLUDE_PATH "${THIRDPARTY_DIR}/Python" CACHE STRING "PYBIND_PYTHON_INCLUDE_PATH" FORCE)
    set(PYBIND_PYTHON_CONFIG_INCLUDE_PATH "${THIRDPARTY_DIR}/Python/PC" CACHE STRING "PYBIND_PYTHON_CONFIG_INCLUDE_PATH" FORCE)
    set(PYBIND_STDEX_INCLUDE_PATH "${THIRDPARTY_DIR}/stdex/include" CACHE STRING "PYBIND_STDEX_INCLUDE_PATH" FORCE)
    set(PYBIND_PYTHON_VERSION 278 CACHE INTEGER "PYBIND_PYTHON_VERSION" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/pybind )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})  

ADD_SUBDIRECTORY( Python )

#ADD_SUBDIRECTORY( metabuf )
#ADD_SUBDIRECTORY( pugixml )

set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/pugixml)
    set(BUILD_SHARED_LIBS OFF CACHE STRING "BUILD_SHARED_LIBS" FORCE)
    set(BUILD_TESTS OFF CACHE BOOL "PYBIND_EXTERNAL_BUILD" FORCE)
    set(USE_VERSIONED_LIBDIR OFF CACHE STRING "PYBIND_PYTHON_INCLUDE_PATH" FORCE)
    set(USE_POSTFIX OFF CACHE STRING "USE_POSTFIX" FORCE)
    set(BUILD_DEFINES "PUGIXML_NO_XPATH" CACHE STRING "PUGIXML_NO_XPATH" FORCE)

ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/pugixml )
set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})

if( MENGINE_TARGET_MSVC )
    ADD_SUBDIRECTORY( Python3 )
    ADD_SUBDIRECTORY( Python3_decimal )    
    
    set(CMAKE_SOURCE_DIR2 ${CMAKE_SOURCE_DIR})
    set(CMAKE_SOURCE_DIR ${THIRDPARTY_DIR}/pybind)
    set(PYBIND_PROJECT_NAME "pybind3" CACHE STRING "PYBIND_PROJECT_NAME" FORCE)
    set(PYBIND_EXTERNAL_BUILD ON CACHE BOOL "PYBIND_EXTERNAL_BUILD" FORCE)
    set(PYBIND_PYTHON_INCLUDE_PATH "${THIRDPARTY_DIR}/Python3" CACHE STRING "PYBIND_PYTHON_INCLUDE_PATH" FORCE)
    set(PYBIND_PYTHON_CONFIG_INCLUDE_PATH "${THIRDPARTY_DIR}/Python3/PC" CACHE STRING "PYBIND_PYTHON_CONFIG_INCLUDE_PATH" FORCE)
    set(PYBIND_STDEX_INCLUDE_PATH "${THIRDPARTY_DIR}/stdex/include" CACHE STRING "PYBIND_STDEX_INCLUDE_PATH" FORCE)
    set(PYBIND_PYTHON_VERSION 350 CACHE INTEGER "PYBIND_PYTHON_VERSION" FORCE)
        
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/openssl/opensslconf.h ${THIRDPARTY_DIR}/openssl/include/openssl/opensslconf.h COPYONLY)

    ADD_SUBDIRECTORY( ${CMAKE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/pybind3 )
    set(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR2})  
    
    #ADD_SUBDIRECTORY( xml2metabuf )
endif()