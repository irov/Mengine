CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

OPTION(MENGINE_DEPENDENCE_XMLSAX "xmlsax" ON)
OPTION(MENGINE_DEPENDENCE_LZ4 "lz4" ON)
OPTION(MENGINE_DEPENDENCE_OGG "ogg" ON)
OPTION(MENGINE_DEPENDENCE_VORBIS "vorbis" ON)
OPTION(MENGINE_DEPENDENCE_VORBISFILE "vorbisfile" ON)
OPTION(MENGINE_DEPENDENCE_THEORA "theora" ON)
OPTION(MENGINE_DEPENDENCE_ZLIB "zlib" ON)
OPTION(MENGINE_DEPENDENCE_POLY2TRI "poly2tri" ON)
OPTION(MENGINE_DEPENDENCE_JPEG "libjpeg" ON)
OPTION(MENGINE_DEPENDENCE_PYTHON "Python" ON)
OPTION(MENGINE_DEPENDENCE_WEBP "libwebp" ON)
OPTION(MENGINE_DEPENDENCE_SPINE "spine" ON)
OPTION(MENGINE_DEPENDENCE_STDEX "stdex" ON)
OPTION(MENGINE_DEPENDENCE_FE "libfe" ON)
OPTION(MENGINE_DEPENDENCE_OZZ "ozz" ON)
OPTION(MENGINE_DEPENDENCE_LIBMOVIE "libmovie" ON)
OPTION(MENGINE_DEPENDENCE_JANSSON "jansson" ON)
OPTION(MENGINE_DEPENDENCE_JPP "jpp" ON)
OPTION(MENGINE_DEPENDENCE_PUGIXML "pugixml" ON)
OPTION(MENGINE_DEPENDENCE_GOAP "GOAP" ON)
OPTION(MENGINE_DEPENDENCE_METABUF "metabuf" ON)
OPTION(MENGINE_DEPENDENCE_MATH "libmath" ON)
OPTION(MENGINE_DEPENDENCE_TINYINI "tinyini" ON)
OPTION(MENGINE_DEPENDENCE_FREETYPE "freetype" ON)
OPTION(MENGINE_DEPENDENCE_CURL "curl" ON)
OPTION(MENGINE_DEPENDENCE_SDL2 "SDL2" ON)
OPTION(MENGINE_DEPENDENCE_OPENAL_SOFT "openal-soft" ON)
OPTION(MENGINE_DEPENDENCE_PNG "libpng" ON)
OPTION(MENGINE_DEPENDENCE_PYBIND "pybind" ON)
OPTION(MENGINE_DEPENDENCE_PYTHON3 "Python3" ON)
OPTION(MENGINE_DEPENDENCE_PYBIND3 "pybind3" ON)
OPTION(MENGINE_DEPENDENCE_GLAD "glad" ON)
OPTION(MENGINE_DEPENDENCE_GLFW3 "glfw3" ON)
OPTION(MENGINE_DEPENDENCE_IMGUI "imgui" ON)

MESSAGE("MENGINE_DEPENDENCE_XMLSAX: ${MENGINE_DEPENDENCE_XMLSAX}")
MESSAGE("MENGINE_DEPENDENCE_LZ4: ${MENGINE_DEPENDENCE_LZ4}")
MESSAGE("MENGINE_DEPENDENCE_OGG: ${MENGINE_DEPENDENCE_OGG}")
MESSAGE("MENGINE_DEPENDENCE_VORBIS: ${MENGINE_DEPENDENCE_VORBIS}")
MESSAGE("MENGINE_DEPENDENCE_VORBISFILE: ${MENGINE_DEPENDENCE_VORBISFILE}")
MESSAGE("MENGINE_DEPENDENCE_THEORA: ${MENGINE_DEPENDENCE_THEORA}")
MESSAGE("MENGINE_DEPENDENCE_ZLIB: ${MENGINE_DEPENDENCE_ZLIB}")
MESSAGE("MENGINE_DEPENDENCE_POLY2TRI: ${MENGINE_DEPENDENCE_POLY2TRI}")
MESSAGE("MENGINE_DEPENDENCE_JPEG: ${MENGINE_DEPENDENCE_JPEG}")
MESSAGE("MENGINE_DEPENDENCE_PYTHON: ${MENGINE_DEPENDENCE_PYTHON}")
MESSAGE("MENGINE_DEPENDENCE_WEBP: ${MENGINE_DEPENDENCE_WEBP}")
MESSAGE("MENGINE_DEPENDENCE_SPINE: ${MENGINE_DEPENDENCE_SPINE}")
MESSAGE("MENGINE_DEPENDENCE_STDEX: ${MENGINE_DEPENDENCE_STDEX}")
MESSAGE("MENGINE_DEPENDENCE_FE: ${MENGINE_DEPENDENCE_FE}")
MESSAGE("MENGINE_DEPENDENCE_OZZ: ${MENGINE_DEPENDENCE_OZZ}")
MESSAGE("MENGINE_DEPENDENCE_LIBMOVIE: ${MENGINE_DEPENDENCE_LIBMOVIE}")
MESSAGE("MENGINE_DEPENDENCE_JANSSON: ${MENGINE_DEPENDENCE_JANSSON}")
MESSAGE("MENGINE_DEPENDENCE_JPP: ${MENGINE_DEPENDENCE_JPP}")
MESSAGE("MENGINE_DEPENDENCE_PUGIXML: ${MENGINE_DEPENDENCE_PUGIXML}")
MESSAGE("MENGINE_DEPENDENCE_GOAP: ${MENGINE_DEPENDENCE_GOAP}")
MESSAGE("MENGINE_DEPENDENCE_METABUF: ${MENGINE_DEPENDENCE_METABUF}")
MESSAGE("MENGINE_DEPENDENCE_MATH: ${MENGINE_DEPENDENCE_MATH}")
MESSAGE("MENGINE_DEPENDENCE_TINYINI: ${MENGINE_DEPENDENCE_TINYINI}")
MESSAGE("MENGINE_DEPENDENCE_FREETYPE: ${MENGINE_DEPENDENCE_FREETYPE}")
MESSAGE("MENGINE_DEPENDENCE_CURL: ${MENGINE_DEPENDENCE_CURL}")
MESSAGE("MENGINE_DEPENDENCE_SDL2: ${MENGINE_DEPENDENCE_SDL2}")
MESSAGE("MENGINE_DEPENDENCE_OPENAL_SOFT: ${MENGINE_DEPENDENCE_OPENAL_SOFT}")
MESSAGE("MENGINE_DEPENDENCE_PNG: ${MENGINE_DEPENDENCE_PNG}")
MESSAGE("MENGINE_DEPENDENCE_PYBIND: ${MENGINE_DEPENDENCE_PYBIND}")
MESSAGE("MENGINE_DEPENDENCE_PYTHON3: ${MENGINE_DEPENDENCE_PYTHON3}")
MESSAGE("MENGINE_DEPENDENCE_PYBIND3: ${MENGINE_DEPENDENCE_PYBIND3}")
MESSAGE("MENGINE_DEPENDENCE_GLAD: ${MENGINE_DEPENDENCE_GLAD}")
MESSAGE("MENGINE_DEPENDENCE_GLFW3: ${MENGINE_DEPENDENCE_GLFW3}")
MESSAGE("MENGINE_DEPENDENCE_IMGUI: ${MENGINE_DEPENDENCE_IMGUI}")

PROJECT(Dependencies)

message("============@@##START##@@============")

if(MENGINE_DEPENDENCE_LZ4)
    message("================lz4================")
    ADD_SUBDIRECTORY(lz4)
endif()

if(MENGINE_DEPENDENCE_OGG)
    message("================libogg================")
    ADD_SUBDIRECTORY(libogg)
endif()

if(MENGINE_DEPENDENCE_VORBIS)
    message("================libvorbis================")
    ADD_SUBDIRECTORY(libvorbis)
endif()

if(MENGINE_DEPENDENCE_VORBISFILE)
    message("================libvorbisfile================")
    ADD_SUBDIRECTORY(libvorbisfile)
endif()

if(MENGINE_DEPENDENCE_THEORA)
    message("================libtheora================")
    ADD_SUBDIRECTORY(libtheora)
endif()


if(MENGINE_DEPENDENCE_ZLIB)
    message("================zlib================")
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/zlib/CMakeLists.txt ${THIRDPARTY_DIR}/zlib/CMakeLists.txt COPYONLY)
    
    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/zlib ${CMAKE_TEMP_DIR}/zlib)
endif()


if(MENGINE_DEPENDENCE_POLY2TRI)
    message("================poly2tri================")
    ADD_SUBDIRECTORY(poly2tri)
endif()


if(MENGINE_DEPENDENCE_JPEG)
    message("================libjpeg================")
    ADD_SUBDIRECTORY(libjpeg)
endif()


if(MENGINE_DEPENDENCE_PYTHON)
    message("================Python================")
    ADD_SUBDIRECTORY(Python)
endif()

#dependencies xmlsax
if(MENGINE_DEPENDENCE_XMLSAX)
    message("================xmlsax================")
    set(XMLSAX_EXTERNAL_BUILD ON CACHE BOOL "XMLSAX_EXTERNAL_BUILD" FORCE)
    set(XMLSAX_INSTALL OFF CACHE BOOL "XMLSAX_INSTALL" FORCE)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/xmlsax ${CMAKE_TEMP_DIR}/xmlsax)
endif()

#dependencies libwebp
if(MENGINE_DEPENDENCE_WEBP)
    message("================libwebp================")
    IF(MENGINE_TARGET_MINGW)
        set(WEBP_ENABLE_SIMD OFF CACHE BOOL "Enable any SIMD optimization." FORCE)
    ELSE()
        set(WEBP_ENABLE_SIMD ON CACHE BOOL "Enable any SIMD optimization." FORCE)
    ENDIF()
    
    set(WEBP_BUILD_ANIM_UTILS OFF CACHE BOOL "WEBP_BUILD_ANIM_UTILS" FORCE)
    set(WEBP_BUILD_CWEBP OFF CACHE BOOL "Build the cwebp command line tool." FORCE)
    set(WEBP_BUILD_DWEBP OFF CACHE BOOL "Build the dwebp command line tool." FORCE)
    set(WEBP_BUILD_GIF2WEBP OFF CACHE BOOL "Build the gif2webp conversion tool." FORCE)
    set(WEBP_BUILD_IMG2WEBP OFF CACHE BOOL "Build the img2webp animation tool." FORCE)
    set(WEBP_BUILD_VWEBP OFF CACHE BOOL "Build the vwebp viewer tool." FORCE)
    set(WEBP_BUILD_WEBPINFO OFF CACHE BOOL "Build the webpinfo command line tool." FORCE)
    set(WEBP_BUILD_WEBPMUX OFF CACHE BOOL "Build the webpinfo command line tool." FORCE)	
    set(WEBP_BUILD_EXTRAS OFF CACHE BOOL "Build extras." FORCE)
    set(WEBP_BUILD_WEBP_JS OFF CACHE BOOL "Emscripten build of webp.js" FORCE)
    set(WEBP_NEAR_LOSSLESS OFF CACHE BOOL "Enable near-lossless encoding" FORCE)
    set(WEBP_ENABLE_SWAP_16BIT_CSP OFF CACHE BOOL "Enable byte swap for 16 bit colorspaces." FORCE)
    set(WEBP_UNICODE OFF CACHE BOOL "Build Unicode executables." FORCE)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/libwebp ${CMAKE_TEMP_DIR}/libwebp)
endif()

#dependencies spine
if(MENGINE_DEPENDENCE_SPINE)
    message("================spine================")
    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/spine/spine-c ${CMAKE_TEMP_DIR}/spine-c)
endif() 

#dependencies stdex
if(MENGINE_DEPENDENCE_STDEX)
    message("================stdex================")
    set(STDEX_EXTERNAL_BUILD ON CACHE BOOL "STDEX_EXTERNAL_BUILD" FORCE)    
    set(STDEX_DBGHELP_INCLUDE "${MENGINE_REPOSITORY}/src/Environment/Windows" CACHE STRING "STDEX_DBGHELP_INCLUDE" FORCE)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/stdex ${CMAKE_TEMP_DIR}/stdex)
endif()

#dependencies libfe
if(MENGINE_DEPENDENCE_FE)
    message("================libfe================")
	set(FE_EXTERNAL_BUILD ON CACHE BOOL "FE_EXTERNAL_BUILD" FORCE)
	set(FE_TEST_BUILD OFF CACHE BOOL "FE_TEST_BUILD" FORCE)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/libfe ${CMAKE_TEMP_DIR}/libfe)
endif()

#dependencies ozz
if(MENGINE_DEPENDENCE_OZZ)
message("================ozz================")
    if(NOT MENGINE_TARGET_ANDROID AND NOT MENGINE_TARGET_IOS)
		set(ozz_build_fbx OFF CACHE BOOL "ozz_build_fbx" FORCE)
		set(ozz_build_data OFF CACHE BOOL "ozz_build_data" FORCE)
		set(ozz_build_samples OFF CACHE BOOL "ozz_build_samples" FORCE)
		set(ozz_build_howtos OFF CACHE BOOL "ozz_build_howtos" FORCE)
		set(ozz_build_tests OFF CACHE BOOL "ozz_build_tests" FORCE)
		set(ozz_build_simd_ref OFF CACHE BOOL "ozz_build_simd_ref" FORCE)
		set(ozz_build_cpp11 OFF CACHE BOOL "ozz_build_cpp11" FORCE)
		set(ozz_build_msvc_rt_dll OFF CACHE BOOL "ozz_build_msvc_rt_dll" FORCE)
		set(ozz_run_tests_headless OFF CACHE BOOL "ozz_run_tests_headless" FORCE)

        ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/ozz ${CMAKE_TEMP_DIR}/ozz)
    endif()
endif()

#dependencies libmovie
if(MENGINE_DEPENDENCE_LIBMOVIE)
    message("================libmovie================")
	set(LIBMOVIE_EXTERNAL_BUILD ON CACHE BOOL "LIBMOVIE_EXTERNAL_BUILD" FORCE)
    set(LIBMOVIE_EXAMPLES_BUILD OFF CACHE BOOL "LIBMOVIE_EXAMPLES_BUILD" FORCE)
	set(LIBMOVIE_COVERAGE OFF CACHE BOOL "LIBMOVIE_COVERAGE" FORCE)
    set(LIBMOVIE_INSTALL OFF CACHE BOOL "LIBMOVIE_INSTALL" FORCE)
    set(LIBMOVIE_TEST OFF CACHE BOOL "LIBMOVIE_TEST" FORCE)
    set(LIBMOVIE_MEMORY_DEBUG OFF CACHE BOOL "LIBMOVIE_MEMORY_DEBUG" FORCE)    

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/libmovie ${CMAKE_TEMP_DIR}/libmovie)
endif()

#dependencies jansson
if(MENGINE_DEPENDENCE_JANSSON)
    message("================jansson================")
    set(USE_URANDOM OFF CACHE BOOL "USE_URANDOM" FORCE)
    set(USE_WINDOWS_CRYPTOAPI OFF CACHE BOOL "USE_URANDOM" FORCE)
    set(JANSSON_STATIC_CRT ON CACHE BOOL "JANSSON_STATIC_CRT" FORCE)
    set(JANSSON_EXAMPLES OFF CACHE BOOL "USE_URANDOM" FORCE)
    set(JANSSON_BUILD_DOCS OFF CACHE BOOL "JANSSON_BUILD_DOCS" FORCE)
    set(JANSSON_WITHOUT_TESTS ON CACHE BOOL "JANSSON_WITHOUT_TESTS" FORCE)    
    set(JANSSON_INSTALL OFF CACHE BOOL "JANSSON_INSTALL" FORCE)    

    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson/jansson.h ${THIRDPARTY_DIR}/jansson/include/jansson.h COPYONLY)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson/jansson_config.h ${THIRDPARTY_DIR}/jansson/include/jansson_config.h COPYONLY)

    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson/CMakeLists.txt ${THIRDPARTY_DIR}/jansson/CMakeLists.txt COPYONLY)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/jansson ${CMAKE_TEMP_DIR}/jansson)
endif()

#dependencies jpp
if(MENGINE_DEPENDENCE_JPP)
    message("================jpp================")
    set(JPP_EXTERNAL_BUILD ON CACHE BOOL "JPP_EXTERNAL_BUILD" FORCE)
    set(JPP_JANSSON_INCLUDE_PATH "${THIRDPARTY_DIR}/jansson/include" CACHE STRING "JPP_JANSSON_INCLUDE_PATH" FORCE)
    set(JPP_TEST OFF CACHE BOOL "JPP_TEST" FORCE)
    set(JPP_INSTALL OFF CACHE BOOL "JPP_INSTALL" FORCE)    

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/jpp ${CMAKE_TEMP_DIR}/jpp)
endif()

#dependencies pugixml
if(MENGINE_DEPENDENCE_PUGIXML)
    message("================pugixml================")
    set(BUILD_SHARED_LIBS OFF CACHE STRING "BUILD_SHARED_LIBS" FORCE)
    set(BUILD_TESTS OFF CACHE BOOL "BUILD_TESTS" FORCE)
    set(USE_VERSIONED_LIBDIR OFF CACHE STRING "USE_VERSIONED_LIBDIR" FORCE)
    set(USE_POSTFIX OFF CACHE STRING "USE_POSTFIX" FORCE)
    set(BUILD_DEFINES "PUGIXML_NO_XPATH" CACHE STRING "BUILD_DEFINES" FORCE)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/pugixml ${CMAKE_TEMP_DIR}/pugixml)
endif()

#dependencies GOAP
if(MENGINE_DEPENDENCE_GOAP)
    message("================GOAP================")
    set(LIBGOAP_EXTERNAL_BUILD ON CACHE BOOL "LIBGOAP_EXTERNAL_BUILD" FORCE)
    set(LIBGOAP_BUILD_TEST OFF CACHE BOOL "LIBGOAP_BUILD_TEST" FORCE)
    set(LIBGOAP_EXTERNAL_CONFIG_INCLUDE ON CACHE BOOL "LIBGOAP_EXTERNAL_CONFIG_INCLUDE" FORCE)
    set(LIBGOAP_EXTERNAL_CONFIG_INCLUDE_PATH ${THIRDPARTY_DIR}/stdex/include ${CMAKE_CURRENT_SOURCE_DIR}/GOAP/Config CACHE STRING "LIBGOAP_EXTERNAL_CONFIG_INCLUDE_PATH" FORCE)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/GOAP ${CMAKE_TEMP_DIR}/GOAP)
endif()

#dependencies metabuf
if(MENGINE_DEPENDENCE_METABUF)
    message("================metabuf================")
	set(METABUF_EXTERNAL_BUILD ON CACHE BOOL "METABUF_EXTERNAL_BUILD" FORCE)
    set(METABUF_TEST OFF CACHE BOOL "METABUF_TEST" FORCE)
	set(METABUF_METAGEN OFF CACHE BOOL "METABUF_METAGEN" FORCE)
	if(WIN32)
		set(METABUF_XML2METABUF ON CACHE BOOL "METABUF_XML2METABUF" FORCE)
	endif()

	SET(METABUF_PUGIXML_EXTERNAL ON CACHE BOOL "METABUF_PUGIXML_EXTERNAL" FORCE)
	SET(METABUF_PUGIXML_INCLUDE_DIR ${THIRDPARTY_DIR}/pugixml/src CACHE STRING "METABUF_PUGIXML_INCLUDE_DIR" FORCE)
	SET(METABUF_PUGIXML_LIBRARY_NAME ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}pugixml${MENGINE_LIB_SUFFIX} CACHE STRING "METABUF_PUGIXML_LIBRARY_NAME" FORCE)
    SET(METABUF_EXTERNAL_CONFIG ON CACHE BOOL "METABUF_EXTERNAL_CONFIG" FORCE)

	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/metabuf/Metaexternalconfig.hpp ${THIRDPARTY_DIR}/metabuf/include/config/Metaexternalconfig.hpp COPYONLY)
    
    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/metabuf ${CMAKE_TEMP_DIR}/metabuf)
    add_dependencies(metabuf pugixml)
endif()

#dependencies libmath
if(MENGINE_DEPENDENCE_MATH)
    message("================libmath================")
	set(LIBMATH_EXTERNAL_BUILD ON CACHE BOOL "LIBMATH_EXTERNAL_BUILD" FORCE)
	set(LIBMATH_EXAMPLES_BUILD OFF CACHE BOOL "LIBMATH_EXAMPLES_BUILD" FORCE)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/libmath ${CMAKE_TEMP_DIR}/libmath)
endif()

#dependencies tinyini
if(MENGINE_DEPENDENCE_TINYINI)
    message("================tinyini================")
    set(TINYINI_EXTERNAL_BUILD ON CACHE BOOL "TINYINI_EXTERNAL_BUILD" FORCE)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/tinyini ${CMAKE_TEMP_DIR}/tinyini)
endif()

#dependencies freetype
if(MENGINE_DEPENDENCE_FREETYPE)
    message("================freetype================")
    set(SKIP_INSTALL_ALL ON CACHE BOOL "SKIP_INSTALL_ALL" FORCE)

    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/freetype/CMakeLists.txt ${THIRDPARTY_DIR}/freetype/CMakeLists.txt COPYONLY)

    if(MENGINE_TARGET_IOS)
        set(IOS_PLATFORM "OS" CACHE STRING "IOS_PLATFORM" FORCE)
    endif()

    set(WITH_BZip2 OFF CACHE BOOL "WITH_BZip2" FORCE)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/freetype ${CMAKE_TEMP_DIR}/freetype)
    
    if(MENGINE_TARGET_IOS)
        unset(IOS_PLATFORM CACHE)
    endif()
endif()

#dependencies curl
if(MENGINE_DEPENDENCE_CURL)
    message("================curl================")
    
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/curl/CMakeLists.txt ${THIRDPARTY_DIR}/curl/CMakeLists.txt COPYONLY)
    
    set(BUILD_CURL_EXE OFF CACHE BOOL "Set to ON to build curl executable." FORCE)
    if(MENGINE_TOOLCHAIN_MSVC)
        set(CURL_STATIC_CRT ON CACHE BOOL "Set to ON to build libcurl with static CRT on Windows (/MT)." FORCE)
    else()
        set(CURL_STATIC_CRT OFF CACHE BOOL "Set to ON to build libcurl with static CRT on Windows (/MT)." FORCE)
    endif()
    set(BUILD_TESTING OFF CACHE BOOL "Set to ON to build curl executable." FORCE)
    set(ENABLE_MANUAL OFF CACHE BOOL "to provide the built-in manual" FORCE)
    set(CURL_STATICLIB ON CACHE BOOL "Set to ON to build libcurl with static linking." FORCE)
    set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libraries" FORCE)
    set(HTTP_ONLY OFF CACHE BOOL "disables all protocols except HTTP (This overrides all CURL_DISABLE_* options)" FORCE)
    set(CURL_DISABLE_FTP ON CACHE BOOL "CURL_DISABLE_FTP" FORCE)
    set(CURL_DISABLE_LDAP ON CACHE BOOL "CURL_DISABLE_LDAP" FORCE)
    set(CURL_DISABLE_LDAPS ON CACHE BOOL "CURL_DISABLE_LDAPS" FORCE)
    set(CURL_DISABLE_TELNET ON CACHE BOOL "CURL_DISABLE_TELNET" FORCE)
    set(CURL_DISABLE_DICT ON CACHE BOOL "CURL_DISABLE_DICT" FORCE)
    set(CURL_DISABLE_FILE ON CACHE BOOL "CURL_DISABLE_FILE" FORCE)
    set(CURL_DISABLE_TFTP ON CACHE BOOL "CURL_DISABLE_TFTP" FORCE)
    set(CURL_DISABLE_LDAPS ON CACHE BOOL "CURL_DISABLE_LDAPS" FORCE)
    set(CURL_DISABLE_RTSP ON CACHE BOOL "CURL_DISABLE_RTSP" FORCE)
    set(CURL_DISABLE_PROXY ON CACHE BOOL "CURL_DISABLE_RTSP" FORCE)    
    set(CURL_DISABLE_POP3 ON CACHE BOOL "CURL_DISABLE_POP3" FORCE)
    set(CURL_DISABLE_IMAP ON CACHE BOOL "CURL_DISABLE_IMAP" FORCE)
    set(CURL_DISABLE_SMTP ON CACHE BOOL "CURL_DISABLE_SMTP" FORCE)
    set(CURL_DISABLE_GOPHER ON CACHE BOOL "CURL_DISABLE_GOPHER" FORCE)
    
    set(CMAKE_USE_OPENSSL OFF CACHE BOOL "Use CMAKE_USE_OPENSSL code. Experimental" FORCE)
    set(CMAKE_USE_WINSSL OFF CACHE BOOL "Use CMAKE_USE_WINSSL code. Experimental" FORCE)
    set(CMAKE_USE_LIBSSH2 OFF CACHE BOOL "Use CMAKE_USE_LIBSSH2 code. Experimental" FORCE)
    set(CMAKE_USE_SECTRANSP OFF CACHE BOOL "Use CMAKE_USE_SECTRANSP code. Experimental" FORCE)

    set(CURL_DISABLE_COOKIES ON CACHE BOOL "CURL_DISABLE_COOKIES" FORCE)
    set(CURL_DISABLE_CRYPTO_AUTH ON CACHE BOOL "CURL_DISABLE_CRYPTO_AUTH" FORCE)   

    set(CURL_CA_PATH "none" CACHE STRING "CURL_CA_PATH" FORCE)

    if(MENGINE_TARGET_IOS)
        set(CMAKE_USE_OPENSSL OFF CACHE BOOL "Use CMAKE_USE_OPENSSL code. Experimental" FORCE)
    endif()

    if(MENGINE_TARGET_ANDROID)
        set(OPENSSL_LIBRARIES libssl.a libcrypto.a CACHE STRING "OPENSSL_LIBRARIES" FORCE)
        set(OPENSSL_INCLUDE_DIR "${THIRDPARTY_DIR}/openssl_android/inc/${ANDROID_ABI}" CACHE STRING "OPENSSL_INCLUDE_DIR" FORCE)
        set(OPENSSL_USE_STATIC_LIBS ON CACHE BOOL "OPENSSL_USE_STATIC_LIBS" FORCE)
        set(CMAKE_USE_OPENSSL ON CACHE BOOL "Use CMAKE_USE_OPENSSL code. Experimental" FORCE)
    endif()
        
    if(MENGINE_TARGET_WINDOWS)
        set(CMAKE_USE_WINSSL ON CACHE BOOL "Use CMAKE_USE_WINSSL code. Experimental" FORCE)
    endif()
    
    if(MENGINE_TARGET_MINGW)
        set(CMAKE_USE_WINSSL ON CACHE BOOL "Use CMAKE_USE_WINSSL code. Experimental" FORCE)
    endif()

    if(MENGINE_TARGET_IOS)
        set(ENABLE_THREADED_RESOLVER ON CACHE BOOL "ENABLE_THREADED_RESOLVER" FORCE)
        set(CMAKE_USE_SECTRANSP ON CACHE BOOL "Use CMAKE_USE_SECTRANSP code. Experimental" FORCE)
    endif()		
	
    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/curl ${CMAKE_TEMP_DIR}/curl)
endif()

#dependencies SDL2
if(MENGINE_DEPENDENCE_SDL2)
    message("================SDL2================")
    if(MENGINE_PLATFORM_SDL AND (MENGINE_TARGET_WINDOWS OR (MENGINE_TARGET_IOS AND MENGINE_BUILD_ONLY_EXECUTABLE_MODULE)))
        set(SDL_CMAKE_DEBUG_POSTFIX "d" CACHE STRING "Name suffix for debug builds" FORCE)
        
        if(MENGINE_TARGET_WINDOWS OR MENGINE_TARGET_MINGW)
            set(FORCE_STATIC_VCRT ON CACHE BOOL "Force /MT for static VC runtimes" FORCE)
            set(SDL_SHARED OFF CACHE BOOL "Build a static version of the library" FORCE)
            set(SDL_STATIC ON CACHE BOOL "Build a static version of the library" FORCE)
        endif()
        
        if(MENGINE_TARGET_ANDROID)
            set(SDL_SHARED ON CACHE BOOL "Build a static version of the library" FORCE)
            set(SDL_STATIC OFF CACHE BOOL "Build a static version of the library" FORCE)    
        endif()

        if(MENGINE_TARGET_IOS)
            set(SDL_SHARED OFF CACHE BOOL "Build a static version of the library" FORCE)
            set(SDL_STATIC ON CACHE BOOL "Build a static version of the library" FORCE)    
        endif()

        if(MENGINE_TARGET_WINDOWS OR MENGINE_TARGET_MINGW)
            if(0)
                set(SDL_JOYSTICK OFF CACHE BOOL "SDL_JOYSTICK" FORCE)
                set(SDL_JOYSTICK_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
                set(SDL_HAPTIC OFF CACHE BOOL "SDL_HAPTIC" FORCE)
                set(SDL_HAPTIC_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
                set(SDL_POWER OFF CACHE BOOL "SDL_POWER" FORCE)
                set(SDL_POWER_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)        
            else()
                set(SDL_JOYSTICK ON CACHE BOOL "SDL_JOYSTICK" FORCE)
                set(SDL_JOYSTICK_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
                set(SDL_HAPTIC ON CACHE BOOL "SDL_HAPTIC" FORCE)
                set(SDL_HAPTIC_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
                set(SDL_POWER ON CACHE BOOL "SDL_POWER" FORCE)
                set(SDL_POWER_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)		
            endif()			
        endif()		
        
        if(MENGINE_TARGET_ANDROID)
            set(SDL_JOYSTICK ON CACHE BOOL "SDL_JOYSTICK" FORCE)
            set(SDL_JOYSTICK_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
            set(SDL_HAPTIC ON CACHE BOOL "SDL_HAPTIC" FORCE)
            set(SDL_HAPTIC_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
            set(SDL_POWER ON CACHE BOOL "SDL_POWER" FORCE)
            set(SDL_POWER_ENABLED_BY_DEFAULT ON CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)
        endif()

        if(MENGINE_TARGET_IOS)
            set(SDL_JOYSTICK OFF CACHE BOOL "SDL_JOYSTICK" FORCE)
            set(SDL_JOYSTICK_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_JOYSTICK_ENABLED_BY_DEFAULT" FORCE)
            set(SDL_HAPTIC OFF CACHE BOOL "SDL_HAPTIC" FORCE)
            set(SDL_HAPTIC_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_HAPTIC_ENABLED_BY_DEFAULT" FORCE)
            set(SDL_POWER OFF CACHE BOOL "SDL_POWER" FORCE)
            set(SDL_POWER_ENABLED_BY_DEFAULT OFF CACHE BOOL "SDL_POWER_ENABLED_BY_DEFAULT" FORCE)
        endif()

        ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/SDL2 ${CMAKE_TEMP_DIR}/SDL2)
    endif()

    if(MENGINE_PLATFORM_SDL AND MENGINE_TARGET_ANDROID)
        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/SDL2/SDLActivity.java ${THIRDPARTY_DIR}/SDL2/android-project/app/src/main/java/org/libsdl/app/SDLActivity.java COPYONLY)
        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/SDL2/SDLSurface.java ${THIRDPARTY_DIR}/SDL2/android-project/app/src/main/java/org/libsdl/app/SDLSurface.java COPYONLY)
    endif()
endif()

#dependencies openal-soft
if(MENGINE_DEPENDENCE_OPENAL_SOFT)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/openal-soft/CMakeLists.txt ${THIRDPARTY_DIR}/openal-soft/CMakeLists.txt COPYONLY)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/openal-soft/bsinc_inc.h ${THIRDPARTY_DIR}/openal-soft/include/bsinc_inc.h COPYONLY)    

    message("================openal-soft================")
    if(NOT MENGINE_TARGET_IOS AND NOT MENGINE_TARGET_ANDROID)
        if(MENGINE_TOOLCHAIN_MSVC)			
            SET(LIBTYPE STATIC)
            SET(FORCE_STATIC_VCRT ON CACHE BOOL "Force /MT for static VC runtimes" FORCE)
        endif()
        
        if(MENGINE_TOOLCHAIN_MINGW)
            SET(LIBTYPE STATIC)
            SET(ALSOFT_STATIC_LIBGCC ON CACHE BOOL "Force /MT for static VC runtimes" FORCE)
        endif()
        
        if(MENGINE_TOOLCHAIN_GRADLE)
            SET(LIBTYPE SHARED)
        endif()    

        SET(ALSOFT_DLOPEN OFF CACHE BOOL "Check for the dlopen API for loading optional libs" FORCE)
        SET(ALSOFT_WERROR OFF CACHE BOOL "Treat compile warnings as errors" FORCE)
        SET(ALSOFT_UTILS OFF CACHE BOOL "Build and install utility programs" FORCE)
        SET(ALSOFT_NO_CONFIG_UTIL ON CACHE BOOL "Disable building the alsoft-config utility" FORCE)
        SET(ALSOFT_EXAMPLES OFF CACHE BOOL "Build and install example programs" FORCE)
        SET(ALSOFT_TESTS OFF CACHE BOOL "Build and install test programs" FORCE)
        SET(ALSOFT_CONFIG OFF CACHE BOOL "Install alsoft.conf sample configuration file" FORCE)
        SET(ALSOFT_HRTF_DEFS OFF CACHE BOOL "Install HRTF definition files" FORCE)
        SET(ALSOFT_AMBDEC_PRESETS OFF CACHE BOOL "Install AmbDec preset files" FORCE)
        SET(ALSOFT_INSTALL OFF CACHE BOOL "Install headers and libraries" FORCE)
        SET(ALSOFT_NO_UID_DEFS OFF CACHE BOOL "Do not define GUIDs, IIDs, CLSIDs, or PropertyKeys" FORCE)
        SET(ALSOFT_EMBED_HRTF_DATA OFF CACHE BOOL "Embed the HRTF data files (increases library footprint)" FORCE)
        SET(ALSOFT_BUILD_IMPORT_LIB OFF CACHE BOOL "Build an import .lib using dlltool (requires sed)" FORCE)
        SET(ALSOFT_BACKEND_WAVE OFF CACHE BOOL "Enable Wave Writer backend" FORCE)
        SET(ALSOFT_REQUIRE_SDL2 OFF CACHE BOOL "Require SDL2 backend" FORCE)

        ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/openal-soft ${CMAKE_TEMP_DIR}/openal-soft)
    endif()    
endif()


#dependencies libpng
if(MENGINE_DEPENDENCE_PNG)
    message("================libpng================")    
    set(PNG_BUILD_ZLIB ON CACHE BOOL "PNG_BUILD_ZLIB" FORCE)
    set(PNG_SHARED OFF CACHE BOOL "PNG_SHARED" FORCE)
    set(PNG_STATIC ON CACHE BOOL "PNG_STATIC" FORCE)
    set(PNG_TESTS OFF CACHE BOOL "PNG_TESTS" FORCE)
    set(PNG_FRAMEWORK OFF CACHE BOOL "PNG_FRAMEWORK" FORCE)
    set(PNG_DEBUG OFF CACHE BOOL "PNG_DEBUG" FORCE)
    set(PNGARG OFF CACHE BOOL "PNGARG" FORCE)
	SET(CMAKE_SYSTEM_PROCESSOR "arm64")
    set(PNG_HARDWARE_OPTIMIZATIONS ON CACHE BOOL "PNG_HARDWARE_OPTIMIZATIONS" FORCE)
    set(ZLIB_LIBRARY zlib)
    set(ZLIB_INCLUDE_DIR ${THIRDPARTY_DIR}/zlib)

    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libpng/pnglibconf.h ${THIRDPARTY_DIR}/libpng/pnglibconf.h COPYONLY)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/libpng ${CMAKE_TEMP_DIR}/libpng)
    add_dependencies(png_static zlib)
endif()

#dependencies pybind
if(MENGINE_DEPENDENCE_PYBIND)
    message("================pybind================")
    set(PYBIND_PROJECT_NAME "pybind" CACHE STRING "PYBIND_PROJECT_NAME" FORCE)
    set(PYBIND_EXTERNAL_BUILD ON CACHE BOOL "PYBIND_EXTERNAL_BUILD" FORCE)
    set(PYBIND_PYTHON_INCLUDE_PATH "${THIRDPARTY_DIR}/Python" CACHE STRING "PYBIND_PYTHON_INCLUDE_PATH" FORCE)
    set(PYBIND_PYTHON_CONFIG_INCLUDE_PATH "${THIRDPARTY_DIR}/Python/PC" CACHE STRING "PYBIND_PYTHON_CONFIG_INCLUDE_PATH" FORCE)
    set(PYBIND_STDEX_INCLUDE_PATH "${THIRDPARTY_DIR}/stdex/include" CACHE STRING "PYBIND_STDEX_INCLUDE_PATH" FORCE)
    set(PYBIND_STL_NOT_SUPPORT ON CACHE BOOL "PYBIND_STL_NOT_SUPPORT" FORCE)
    set(PYBIND_PYTHON_VERSION 278 CACHE INTEGER "PYBIND_PYTHON_VERSION" FORCE)
    set(PYBIND_PYTHON_ERROR_FORMAT_FLAG ON CACHE BOOL "PYBIND_PYTHON_ERROR_FORMAT_FLAG" FORCE)
    set(PYBIND_INSTALL OFF CACHE BOOL "PYBIND_INSTALL" FORCE)
    set(PYBIND_SANDBOX OFF CACHE BOOL "PYBIND_SANDBOX" FORCE)

    ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/pybind ${CMAKE_TEMP_DIR}/pybind)
    add_dependencies(pybind_python python)
endif()

if(MENGINE_TOOLCHAIN_MSVC)
    #dependencies Python3
    if(MENGINE_DEPENDENCE_PYTHON3)        
        message("================Python3================")
        ADD_SUBDIRECTORY(Python3)
        message("================Python3_decimal================")
        ADD_SUBDIRECTORY(Python3_decimal)
    endif()
	
    
    #dependencies pybind3
    if(MENGINE_DEPENDENCE_PYBIND3)
        message("================pybind3================")
		set(PYBIND_PROJECT_NAME "pybind3" CACHE STRING "PYBIND_PROJECT_NAME" FORCE)
		set(PYBIND_EXTERNAL_BUILD ON CACHE BOOL "PYBIND_EXTERNAL_BUILD" FORCE)
		set(PYBIND_PYTHON_INCLUDE_PATH "${THIRDPARTY_DIR}/Python3" CACHE STRING "PYBIND_PYTHON_INCLUDE_PATH" FORCE)
		set(PYBIND_PYTHON_CONFIG_INCLUDE_PATH "${THIRDPARTY_DIR}/Python3/PC" CACHE STRING "PYBIND_PYTHON_CONFIG_INCLUDE_PATH" FORCE)
		set(PYBIND_STDEX_INCLUDE_PATH "${THIRDPARTY_DIR}/stdex/include" CACHE STRING "PYBIND_STDEX_INCLUDE_PATH" FORCE)
        set(PYBIND_STL_NOT_SUPPORT ON CACHE BOOL "PYBIND_STL_NOT_SUPPORT" FORCE)
		set(PYBIND_PYTHON_VERSION 350 CACHE INTEGER "PYBIND_PYTHON_VERSION" FORCE)
        set(PYBIND_PYTHON_ERROR_FORMAT_FLAG OFF CACHE BOOL "PYBIND_PYTHON_ERROR_FORMAT_FLAG" FORCE)
        set(PYBIND_INSTALL OFF CACHE BOOL "PYBIND_INSTALL" FORCE)
        set(PYBIND_SANDBOX OFF CACHE BOOL "PYBIND_SANDBOX" FORCE)
			
		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/openssl/opensslconf.h ${THIRDPARTY_DIR}/openssl/include/openssl/opensslconf.h COPYONLY)

        ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/pybind ${CMAKE_TEMP_DIR}/pybind3)
        add_dependencies(pybind3 python3 python3_decimal)
    endif()
	
    #dependencies glad
    if(MENGINE_DEPENDENCE_GLAD)
        message("================glad================")
        set(GLAD_INSTALL ON CACHE BOOL "GLAD_INSTALL" FORCE)
        set(USE_MSVC_RUNTIME_LIBRARY_DLL OFF CACHE BOOL "GLAD_INSTALL" FORCE)
        set(GLAD_OUT_DIR "${THIRDPARTY_DIR}/glad" CACHE STRING "GLAD_OUT_DIR" FORCE)

        ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/glad ${CMAKE_TEMP_DIR}/glad)
    endif()
	
    #dependencies glfw3
    if(MENGINE_DEPENDENCE_GLFW3)
        message("================glfw3================")
		set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "GLFW_BUILD_EXAMPLES" FORCE)
		set(GLFW_BUILD_TESTS OFF CACHE BOOL "GLFW_BUILD_TESTS" FORCE)
		set(GLFW_BUILD_DOCS OFF CACHE BOOL "GLFW_BUILD_DOCS" FORCE)
		set(GLFW_INSTAL OFF CACHE BOOL "GLFW_INSTAL" FORCE)
		set(GLFW_VULKAN_STATIC OFF CACHE BOOL "GLFW_VULKAN_STATIC" FORCE)

        ADD_SUBDIRECTORY(${THIRDPARTY_DIR}/glfw3 ${CMAKE_TEMP_DIR}/glfw3)
    endif()
    
    #dependencies imgui
    if(MENGINE_DEPENDENCE_IMGUI)
        message("================imgui================")
        ADD_SUBDIRECTORY(imgui)
    endif()
endif()

message("============@@##COMPLETE##@@============")