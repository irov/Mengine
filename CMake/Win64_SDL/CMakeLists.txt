CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

OPTION(MENGINE_PROJECT_NAME "Mengine build master release" OFF)
OPTION(MENGINE_BUILD_MENGINE_MASTER_RELEASE "Mengine build master release" OFF)
OPTION(MENGINE_USE_PRECOMPILED_HEADER "Mengine use precompiled header" OFF)
OPTION(MENGINE_USE_PYTHON_FRAMEWORK "Mengine use python framework" ON)
OPTION(MENGINE_EXTERNAL_FRAMEWORK "Mengine external framework" OFF)
OPTION(MENGINE_EXTERNAL_FRAMEWORK_SOURCE_PATH "Mengine external framework source path" "")
OPTION(MENGINE_EXTERNAL_FRAMEWORK_TEMP_PATH "Mengine external framework temp path" "")

IF(NOT MENGINE_PROJECT_NAME)
    PROJECT(Mengine_WIN64_SDL)
ELSE()
    PROJECT(${MENGINE_PROJECT_NAME})
ENDIF()

INCLUDE(../macro_template.cmake)
INCLUDE(../win64_template.cmake)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

SET_MENGINE_ENVIRONMENT(WINDOWS OPENGL X64 SDL MSVC)

SET(MENGINE_REPOSITORY ${CMAKE_CURRENT_SOURCE_DIR}/../..)

# output paths
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${MENGINE_REPOSITORY}/build_temp/${PROJECT_NAME})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${MENGINE_REPOSITORY}/bin/${PROJECT_NAME})

# input and thirdparty paths
SET(THIRDPARTY_DIR ${MENGINE_REPOSITORY}/dependencies)
SET(THIRDPARTY_LIB_DIR ${MENGINE_REPOSITORY}/build_temp/${MENGINE_LIB_DIR}/${CMAKE_BUILD_TYPE})

SET(MENGINE_SOURCE_DIR ${MENGINE_REPOSITORY}/src)
SET(CMAKE_TEMP_DIR ${MENGINE_REPOSITORY}/CMakeTemp/${PROJECT_NAME}/${CMAKE_GENERATOR}/${CMAKE_BUILD_TYPE})

# plugins
ADD_PLUGIN(MENGINE_PLUGIN_NODEDEBUGRENDER ${MENGINE_USE_PYTHON_FRAMEWORK} OFF "MENGINE_PLUGIN_NODEDEBUGRENDER")
ADD_PLUGIN(MENGINE_PLUGIN_RESOURCEVALIDATE ON OFF "MENGINE_PLUGIN_RESOURCEVALIDATE")
ADD_PLUGIN(MENGINE_PLUGIN_RESOURCEPREFETCHER ON OFF "MENGINE_PLUGIN_RESOURCEPREFETCHER")
ADD_PLUGIN(MENGINE_PLUGIN_RESOURCECONVERT ON OFF "MENGINE_PLUGIN_RESOURCECONVERT")
ADD_PLUGIN(MENGINE_PLUGIN_RESOURCEDEBUGGER ON OFF "MENGINE_PLUGIN_RESOURCEDEBUGGER")
ADD_PLUGIN(MENGINE_PLUGIN_NODEDEBUGGER ON OFF "MENGINE_PLUGIN_NODEDEBUGGER")
ADD_PLUGIN(MENGINE_PLUGIN_METABUFLOADER ON OFF "MENGINE_PLUGIN_METABUFLOADER")
ADD_PLUGIN(MENGINE_PLUGIN_WEBP ON OFF "MENGINE_PLUGIN_WEBP")
ADD_PLUGIN(MENGINE_PLUGIN_VIDEO ON OFF "MENGINE_PLUGIN_VIDEO")
ADD_PLUGIN(MENGINE_PLUGIN_THEORA ON OFF "MENGINE_PLUGIN_THEORA")
ADD_PLUGIN(MENGINE_PLUGIN_BITMAPFONT ON OFF "MENGINE_PLUGIN_BITMAPFONT")
ADD_PLUGIN(MENGINE_PLUGIN_TTF ON OFF "MENGINE_PLUGIN_TTF")
ADD_PLUGIN(MENGINE_PLUGIN_SPINE OFF OFF "MENGINE_PLUGIN_SPINE")
ADD_PLUGIN(MENGINE_PLUGIN_CURL ON ON "MENGINE_PLUGIN_CURL")
ADD_PLUGIN(MENGINE_PLUGIN_ASTRALAX ON ON "MENGINE_PLUGIN_ASTRALAX")
ADD_PLUGIN(MENGINE_PLUGIN_STEAM OFF ON "MENGINE_PLUGIN_STEAM")
ADD_PLUGIN(MENGINE_PLUGIN_OZZ_ANIMATION ON ON "MENGINE_PLUGIN_OZZ_ANIMATION")
ADD_PLUGIN(MENGINE_PLUGIN_ANDROID_NATIVE_FACEBOOK OFF OFF "MENGINE_PLUGIN_ANDROID_NATIVE_FACEBOOK")
ADD_PLUGIN(MENGINE_PLUGIN_ANDROID_NATIVE_UNITYADS OFF OFF "MENGINE_PLUGIN_ANDROID_NATIVE_UNITYADS")
ADD_PLUGIN(MENGINE_PLUGIN_ANDROID_NATIVE_ADMOB OFF OFF "MENGINE_PLUGIN_ANDROID_NATIVE_ADMOB")
ADD_PLUGIN(MENGINE_PLUGIN_ANDROID_NATIVE_DEVTODEV OFF OFF "MENGINE_PLUGIN_ANDROID_NATIVE_DEVTODEV")
ADD_PLUGIN(MENGINE_PLUGIN_ANDROID_NATIVE_LINKING OFF OFF "MENGINE_PLUGIN_ANDROID_NATIVE_LINKING")
ADD_PLUGIN(MENGINE_PLUGIN_ANDROID_NATIVE_LOCAL_NOTIFICATIONS OFF OFF "MENGINE_PLUGIN_ANDROID_NATIVE_LOCAL_NOTIFICATIONS")
ADD_PLUGIN(MENGINE_PLUGIN_WIN32_SOCKET OFF ON "MENGINE_PLUGIN_WIN32_SOCKET")
ADD_PLUGIN(MENGINE_PLUGIN_POSIX_SOCKET OFF OFF "MENGINE_PLUGIN_POSIX_SOCKET")

ADD_DEFINITIONS(-DMENGINE_RENDER_TEXTURE_RGBA)
if(MENGINE_BUILD_MENGINE_MASTER_RELEASE)
    ADD_DEFINITIONS(-DMENGINE_MASTER_RELEASE)
endif()
ADD_DEFINITIONS(-DMENGINE_SETJMP_UNSUPPORTED)

SET(APPLICATION_DEPENDENCIES)
SET(APPLICATION_LINK_LIBRARIES)

INCLUDE_DIRECTORIES(${MENGINE_SOURCE_DIR})
INCLUDE_DIRECTORIES(${THIRDPARTY_DIR}/libmath/include)
INCLUDE_DIRECTORIES(${THIRDPARTY_DIR}/stdex/include)

ADD_SUBDIRECTORY(${MENGINE_SOURCE_DIR} ${CMAKE_TEMP_DIR}/src)

IF(MENGINE_EXTERNAL_FRAMEWORK)
    ADD_SUBDIRECTORY(${MENGINE_EXTERNAL_FRAMEWORK_SOURCE_PATH} ${MENGINE_EXTERNAL_FRAMEWORK_TEMP_PATH})
ELSEIF(MENGINE_PLUGIN_PYTHONFRAMEWORK)
    ADD_SUBDIRECTORY(${MENGINE_SOURCE_DIR}/Frameworks/PythonFramework ${CMAKE_TEMP_DIR}/Frameworks/PythonFramework)
ENDIF()

ADD_SUBDIRECTORY(${MENGINE_SOURCE_DIR}/SDLApplication ${CMAKE_TEMP_DIR}/SDLApplication)