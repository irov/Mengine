#	include "Animatable.h"

namespace Menge
{
	//////////////////////////////////////////////////////////////////////////
	Animatable::Animatable()
		: m_enumerator(0)
		, m_play(false)
		, m_loop(false)
		, m_speedFactor(1.f)
		, m_reverse(false)
		, m_startInterval(0.0f)
	{
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::setLoop( bool _value )
	{
		m_loop = _value;
	}
	//////////////////////////////////////////////////////////////////////////
	bool Animatable::getLoop() const
	{
		return m_loop;
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::setSpeedFactor( float _factor )
	{
		m_speedFactor = _factor;
		this->_setSpeedFactor( _factor );
	}
	//////////////////////////////////////////////////////////////////////////
	float Animatable::getSpeedFactor() const
	{
		return m_speedFactor;
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::setTiming( float _timing )
	{		
		float timing = 0;
		timing = _timing + m_startInterval;
	
		this->_setTiming( timing );
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::_setTiming( float _timing )
	{
		//Empty
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::setLastFrame()
	{		
		this->_setLastFrame();
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::_setLastFrame()
	{
		//Empty
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::setFirstFrame()
	{		
		this->_setFirstFrame();
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::_setFirstFrame()
	{
		//Empty
	}
	//////////////////////////////////////////////////////////////////////////
	float Animatable::getTiming() const
	{
		float timing = this->_getTiming();

		return timing;
	}
	//////////////////////////////////////////////////////////////////////////
	float Animatable::_getTiming() const
	{
		return 0.f;
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::setReverse( bool _value)
	{
		m_reverse = _value;

		this->_setReverse( _value );
	}
	//////////////////////////////////////////////////////////////////////////
	bool Animatable::getReverse() const
	{
		return m_reverse;
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::_setReverse( bool _value )
	{
		//Empty
	}
	//////////////////////////////////////////////////////////////////////////
	size_t Animatable::play()
	{
		//printf("Animatable play\n");

		if( m_play == true )
		{
			if( this->_restart( m_enumerator ) == false )
			{
				return 0;
			}
		}
		else
		{
			if( this->_play() == false )
			{
				return 0;
			}
		}

		m_play = true;

		size_t id = ++m_enumerator;

		return id;
	}
	//////////////////////////////////////////////////////////////////////////
	bool Animatable::stop()
	{
		if( m_play == false )
		{
			return false;
		}

		//printf("Animatable stop\n");

		m_play = false;

		this->_stop( m_enumerator );

		return true;
	}
	//////////////////////////////////////////////////////////////////////////
	bool Animatable::interrupt()
	{
		if( m_play == false )
		{
			return false;
		}

		//m_play = false;

		this->_interrupt( m_enumerator );

		return true;
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::end()
	{
		if( m_play == false )
		{
			return;
		}

		//printf("Animatable end\n");

		m_play = false;

		this->_end( m_enumerator );
	}
	//////////////////////////////////////////////////////////////////////////
	bool Animatable::isPlay() const
	{
		return m_play;
	}
	//////////////////////////////////////////////////////////////////////////
	size_t Animatable::getPlayId() const
	{
		return m_enumerator;
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::_setLoop( bool _value )
	{
		//Empty
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::_setSpeedFactor( float _factor )
	{
		//Empty
	}
	//////////////////////////////////////////////////////////////////////////
	void Animatable::setStartInterval( float _startInterval )
	{
		m_startInterval = _startInterval;
	}
	//////////////////////////////////////////////////////////////////////////
	float Animatable::getStartInterval() const
	{
		return m_startInterval;
	}
	//////////////////////////////////////////////////////////////////////////
}