SET(APPLICATION_LINK_LIBRARIES)
SET(APPLICATION_DEPENDENCIES)
SET(APPLICATION_STATIC_PLUGINS)
SET(APPLICATION_APPLE_FRAMEWORKS)
SET(APPLICATION_APPLE_FRAMEWORK_WITH_PATH)
SET(APPLICATION_APPLE_COCOAPODS)
SET(APPLICATION_APPLE_GLOBAL_COCOAPODS)
SET(APPLICATION_APPLE_SCRIPT_PHASES)
SET(APPLICATION_APPLE_APPLICATION_DELEGATE)
SET(APPLICATION_APPLE_RESOURCES)
SET(APPLICATION_APPLE_SKADNETWORKITEMS_PLISTS)
SET(APPLICATION_MACOS_DYLIB)
SET(APPLICATION_MACOS_DYLIB_WITH_SIGN)

SET(MENGINE_CONFIG_DEFINITIONS)
SET(MENGINE_CONFIG_CONFIGURATIONS)

if(MENGINE_BUILD_MENGINE_MASTER_RELEASE)
    MENGINE_ADD_DEFINITION(MENGINE_MASTER_RELEASE)
endif()

if(MENGINE_BUILD_MENGINE_BUILD_PUBLISH)
    MENGINE_ADD_DEFINITION(MENGINE_BUILD_PUBLISH)
endif()

if(MENGINE_BUILD_MENGINE_LOGGER_LEVEL_FORCE_VERBOSE)
    MENGINE_ADD_DEFINITION(MENGINE_LOGGER_LEVEL_FORCE_VERBOSE=1)
endif()

if(MENGINE_BUILD_MENGINE_DEVELOPMENT)
    MENGINE_ADD_DEFINITION(MENGINE_BUILD_DEVELOPMENT)
endif()

if(MENGINE_BUILD_MENGINE_SCRIPT_EMBEDDED)
    MENGINE_ADD_DEFINITION(MENGINE_BUILD_MENGINE_SCRIPT_EMBEDDED)
endif()

if(COMMAND MENGINE_PREPARE_FUNCTION)
    MENGINE_PREPARE_FUNCTION()
endif()

if(MENGINE_ARCHITECTURE_X86)
    MENGINE_ADD_DEFINITION(MENGINE_ENVIRONMENT_ARCHITECTURE_X86)
elseif(MENGINE_ARCHITECTURE_X64)
    MENGINE_ADD_DEFINITION(MENGINE_ENVIRONMENT_ARCHITECTURE_X64)
endif()

if(MENGINE_WINDOWS_STORE)
    MENGINE_ADD_DEFINITION(MENGINE_WINDOWS_STORE)
endif()

set(MENGINE_BUILD_NUMBER "0" CACHE STRING "MENGINE_BUILD_NUMBER")
set(MENGINE_BUILD_VERSION "0.0.0" CACHE STRING "MENGINE_BUILD_VERSION")

if(MENGINE_BUILD_NUMBER STREQUAL "AUTO")
    string(TIMESTAMP MENGINE_BUILD_NUMBER "%Y%m%d%H%M%S")
endif()

if(MENGINE_BUILD_VERSION STREQUAL "AUTO")
    string(TIMESTAMP MENGINE_BUILD_VERSION "%Y.%m.%d")
endif()

if(NOT MENGINE_BUILD_NUMBER MATCHES "^[0-9]+$")
    MESSAGE(FATAL_ERROR "Build number '${MENGINE_BUILD_NUMBER}' not valid INTEGER value")
endif()

MESSAGE("MENGINE_BUILD_NUMBER: ${MENGINE_BUILD_NUMBER}")

IF(NOT MENGINE_BUILD_VERSION MATCHES "^([0-9]+).0*([0-9]+).0*([0-9]+)$")
    MESSAGE(FATAL_ERROR "Build version '${MENGINE_BUILD_VERSION}' not valid MAJOR.MINOR.PATCH value")
ENDIF()

SET(MENGINE_BUILD_VERSION_MAJOR ${CMAKE_MATCH_1})
SET(MENGINE_BUILD_VERSION_MINOR ${CMAKE_MATCH_2})
SET(MENGINE_BUILD_VERSION_PATCH ${CMAKE_MATCH_3})

IF(NOT MENGINE_BUILD_VERSION_MAJOR MATCHES "^([1-9][0-9]?[0-9]?[0-9]?)$|^0$")
    MESSAGE(FATAL_ERROR "Build version '${MENGINE_BUILD_VERSION}' not valid MAJOR '${MENGINE_BUILD_VERSION_MAJOR}' value between [0-9999]")
ENDIF()

IF(NOT MENGINE_BUILD_VERSION_MINOR MATCHES "^0*([1-9][0-9]?)$|^0$")
    MESSAGE(FATAL_ERROR "Build version '${MENGINE_BUILD_VERSION}' not valid MINOR '${MENGINE_BUILD_VERSION_MINOR}' value between [0-99]")
ENDIF()

IF(NOT MENGINE_BUILD_VERSION_PATCH MATCHES "^0*([1-9][0-9]?)$|^0$")
    MESSAGE(FATAL_ERROR "Build version '${MENGINE_BUILD_VERSION}' not valid PATCH '${MENGINE_BUILD_VERSION_PATCH}' value between [0-99]")
ENDIF()

MESSAGE("MENGINE_BUILD_VERSION: ${MENGINE_BUILD_VERSION}")
MESSAGE("MENGINE_BUILD_VERSION_MAJOR: ${MENGINE_BUILD_VERSION_MAJOR}")
MESSAGE("MENGINE_BUILD_VERSION_MINOR: ${MENGINE_BUILD_VERSION_MINOR}")
MESSAGE("MENGINE_BUILD_VERSION_PATCH: ${MENGINE_BUILD_VERSION_PATCH}")

IF(MENGINE_DEPLOY_PATH)
    IF(NOT EXISTS ${MENGINE_DEPLOY_PATH})
        MESSAGE(FATAL_ERROR "Deploy path setup invalid path '${MENGINE_DEPLOY_PATH}'")
    ENDIF()
ENDIF()

SET(MENGINE_DEPLOY_PATH "" CACHE STRING "Mengine deploy path")

MESSAGE("MENGINE_DEPLOY_PATH: ${MENGINE_DEPLOY_PATH}")

if(MENGINE_DEPLOY_PATH)
    SET(MENGINE_DEPLOY_PREPARE_PATH ${MENGINE_DEPLOY_PATH}/mengine_prepare.cmake)
    
    if(EXISTS ${MENGINE_DEPLOY_PREPARE_PATH})
        MESSAGE("include mengine prepare: ${MENGINE_DEPLOY_PREPARE_PATH}")
        
        include(${MENGINE_DEPLOY_PREPARE_PATH})
    endif()
endif()

MESSAGE("CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")
MESSAGE("CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
MESSAGE("CMAKE_C_FLAGS_DEBUG: ${CMAKE_C_FLAGS_DEBUG}")
MESSAGE("CMAKE_C_FLAGS_RELEASE: ${CMAKE_C_FLAGS_RELEASE}")
MESSAGE("CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
MESSAGE("CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}")
MESSAGE("CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}")
MESSAGE("CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}")