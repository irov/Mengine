apply plugin: 'com.android.application'

apply from: rootProject.projectDir.getAbsolutePath() + '/base.gradle'
apply from: rootProject.projectDir.getAbsolutePath() + '/androidx.gradle'
apply from: rootProject.projectDir.getAbsolutePath() + '/minify.gradle'
apply from: rootProject.projectDir.getAbsolutePath() + '/split.gradle'
apply from: rootProject.projectDir.getAbsolutePath() + '/delivery.gradle'
apply from: rootProject.projectDir.getAbsolutePath() + '/gms.gradle'

def ANDROID_APP_BUILD_NUMBER = Utils.getIntegerProperty("ANDROID_APP_BUILD_NUMBER", 0)
def ANDROID_APP_BUILD_VERSION = Utils.getStringProperty("ANDROID_APP_BUILD_VERSION", "0.0.0")
def ANDROID_APP_BUILD_PUBLISH = Utils.getBooleanProperty("ANDROID_APP_BUILD_PUBLISH", false)
def ANDROID_APP_LOGGER_LEVEL_FORCE_VERBOSE = Utils.getBooleanProperty("ANDROID_APP_LOGGER_LEVEL_FORCE_VERBOSE", false)
def ANDROID_APP_SPLIT_ENABLE = Utils.getBooleanProperty("ANDROID_APP_SPLIT_ENABLE", false)
def ANDROID_APP_BUNDLE_ENABLE = Utils.getBooleanProperty("ANDROID_APP_BUNDLE_ENABLE", false)
def ANDROID_APP_DELIVERY_PACKAGES = Utils.getStringProperty("ANDROID_APP_DELIVERY_PACKAGES", null)
def ANDROID_APP_MAIN_PROJECT = Utils.getStringProperty("ANDROID_APP_MAIN_PROJECT", "app")

def MENGINE_APP_LIBRARY_MENGINE = Utils.existAppLibrary("MENGINE_APP_LIBRARY_MENGINE")
def MENGINE_APP_LIBRARY_OPENAL32 = Utils.existAppLibrary("MENGINE_APP_LIBRARY_OPENAL32")

def MENGINE_APP_SERVICE_AD = Utils.existAppService("MENGINE_APP_SERVICE_AD")
def MENGINE_APP_SERVICE_MONITORCONNECTIVITYSTATUS = Utils.existAppService("MENGINE_APP_SERVICE_MONITORCONNECTIVITYSTATUS")

def MENGINE_APP_PLUGIN_SPLASHSCREEN = Utils.existAppPlugin("MENGINE_APP_PLUGIN_SPLASHSCREEN")
def MENGINE_APP_PLUGIN_LOCAL_NOTIFICATIONS = Utils.existAppPlugin("MENGINE_APP_PLUGIN_LOCAL_NOTIFICATIONS")
def MENGINE_APP_PLUGIN_GOOGLE_SERVICE = Utils.existAppPlugin("MENGINE_APP_PLUGIN_GOOGLE_SERVICE")
def MENGINE_APP_PLUGIN_GOOGLE_ADVERTISING = Utils.existAppPlugin("MENGINE_APP_PLUGIN_GOOGLE_ADVERTISING", ["MENGINE_APP_PLUGIN_GOOGLE_SERVICE"])
def MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL = Utils.existAppPlugin("MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL", ["MENGINE_APP_PLUGIN_GOOGLE_SERVICE"])
def MENGINE_APP_PLUGIN_GOOGLE_PLAY_BILLING = Utils.existAppPlugin("MENGINE_APP_PLUGIN_GOOGLE_PLAY_BILLING", ["MENGINE_APP_PLUGIN_GOOGLE_SERVICE"])
def MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS = Utils.existAppPlugin("MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS", ["MENGINE_APP_PLUGIN_GOOGLE_SERVICE"])
def MENGINE_APP_PLUGIN_GOOGLE_CONSENT = Utils.existAppPlugin("MENGINE_APP_PLUGIN_GOOGLE_CONSENT", ["MENGINE_APP_PLUGIN_GOOGLE_SERVICE"])
def MENGINE_APP_PLUGIN_FIREBASE = Utils.existAppPlugin("MENGINE_APP_PLUGIN_FIREBASE", ["MENGINE_APP_PLUGIN_GOOGLE_SERVICE"])
def MENGINE_APP_PLUGIN_FIREBASE_INSTALLATIONS = Utils.existAppPlugin("MENGINE_APP_PLUGIN_FIREBASE_INSTALLATIONS", ["MENGINE_APP_PLUGIN_FIREBASE"])
def MENGINE_APP_PLUGIN_FIREBASE_APPCHECK = Utils.existAppPlugin("MENGINE_APP_PLUGIN_FIREBASE_APPCHECK", ["MENGINE_APP_PLUGIN_FIREBASE"])
def MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS = Utils.existAppPlugin("MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS", ["MENGINE_APP_PLUGIN_FIREBASE"])
def MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS_NATIVE_SYMBOL_UPLOAD_ENABLE = Utils.getBooleanProperty("MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS_NATIVE_SYMBOL_UPLOAD_ENABLE", false)
def MENGINE_APP_PLUGIN_FIREBASE_ANALYTICS = Utils.existAppPlugin("MENGINE_APP_PLUGIN_FIREBASE_ANALYTICS", ["MENGINE_APP_PLUGIN_FIREBASE"])
def MENGINE_APP_PLUGIN_FIREBASE_MESSAGING = Utils.existAppPlugin("MENGINE_APP_PLUGIN_FIREBASE_MESSAGING", ["MENGINE_APP_PLUGIN_FIREBASE"])
def MENGINE_APP_PLUGIN_FIREBASE_REMOTECONFIG = Utils.existAppPlugin("MENGINE_APP_PLUGIN_FIREBASE_REMOTECONFIG", ["MENGINE_APP_PLUGIN_FIREBASE"])
def MENGINE_APP_PLUGIN_FIREBASE_PERFORMANCEMONITORING = Utils.existAppPlugin("MENGINE_APP_PLUGIN_FIREBASE_PERFORMANCEMONITORING", ["MENGINE_APP_PLUGIN_FIREBASE"])
def MENGINE_APP_PLUGIN_FLURRY = Utils.existAppPlugin("MENGINE_APP_PLUGIN_FLURRY")
def MENGINE_APP_PLUGIN_APPMETRICA = Utils.existAppPlugin("MENGINE_APP_PLUGIN_APPMETRICA")
def MENGINE_APP_PLUGIN_APPSFLYER = Utils.existAppPlugin("MENGINE_APP_PLUGIN_APPSFLYER")
def MENGINE_APP_PLUGIN_DEVTODEV = Utils.existAppPlugin("MENGINE_APP_PLUGIN_DEVTODEV")
def MENGINE_APP_PLUGIN_FACEBOOK = Utils.existAppPlugin("MENGINE_APP_PLUGIN_FACEBOOK")
def MENGINE_APP_PLUGIN_SENTRY = Utils.existAppPlugin("MENGINE_APP_PLUGIN_SENTRY")
def MENGINE_APP_PLUGIN_MAR = Utils.existAppPlugin("MENGINE_APP_PLUGIN_MAR")
def MENGINE_APP_PLUGIN_ADMOB = Utils.existAppPlugin("MENGINE_APP_PLUGIN_ADMOB", ["MENGINE_APP_PLUGIN_GOOGLE_SERVICE"])
def MENGINE_APP_PLUGIN_AMAZON = Utils.existAppPlugin("MENGINE_APP_PLUGIN_AMAZON")
def MENGINE_APP_PLUGIN_APPLOVIN = Utils.existAppPlugin("MENGINE_APP_PLUGIN_APPLOVIN")
def MENGINE_APP_PLUGIN_ADJUST = Utils.existAppPlugin("MENGINE_APP_PLUGIN_ADJUST")
def MENGINE_APP_PLUGIN_HELPSHIFT = Utils.existAppPlugin("MENGINE_APP_PLUGIN_HELPSHIFT")
def MENGINE_APP_PLUGIN_ONESIGNAL = Utils.existAppPlugin("MENGINE_APP_PLUGIN_ONESIGNAL")
def MENGINE_APP_PLUGIN_LEANPLUM = Utils.existAppPlugin("MENGINE_APP_PLUGIN_LEANPLUM")
def MENGINE_APP_PLUGIN_DATADOG = Utils.existAppPlugin("MENGINE_APP_PLUGIN_DATADOG")
def MENGINE_APP_PLUGIN_VIBRATOR = Utils.existAppPlugin("MENGINE_APP_PLUGIN_VIBRATOR")
def MENGINE_APP_PLUGIN_AMPLITUDE = Utils.existAppPlugin("MENGINE_APP_PLUGIN_AMPLITUDE")

Utils.logString("ANDROID_APP_DELIVERY_PACKAGES", ANDROID_APP_DELIVERY_PACKAGES)
Utils.logAvailable("ANDROID_APP_BUILD_PUBLISH", ANDROID_APP_BUILD_PUBLISH)
Utils.logAvailable("ANDROID_APP_LOGGER_LEVEL_FORCE_VERBOSE", ANDROID_APP_LOGGER_LEVEL_FORCE_VERBOSE)
Utils.logAvailable("ANDROID_APP_SPLIT_ENABLE", ANDROID_APP_SPLIT_ENABLE)
Utils.logAvailable("ANDROID_APP_BUNDLE_ENABLE", ANDROID_APP_BUNDLE_ENABLE)
Utils.logInteger("ANDROID_APP_BUILD_NUMBER", ANDROID_APP_BUILD_NUMBER)
Utils.logString("ANDROID_APP_BUILD_VERSION", ANDROID_APP_BUILD_VERSION)

if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == true) {
    apply plugin: 'com.google.gms.google-services'
}

if (MENGINE_APP_PLUGIN_SENTRY == true) {
    apply plugin: 'io.sentry.android.gradle'
}

if (MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS == true) {
    apply plugin: 'com.google.firebase.crashlytics'
}

if (MENGINE_APP_PLUGIN_FIREBASE_PERFORMANCEMONITORING == true) {
    apply plugin: 'com.google.firebase.firebase-perf'
}

if (MENGINE_APP_PLUGIN_APPLOVIN == true && project.hasProperty("MENGINE_APP_PLUGIN_APPLOVIN_AD_REVIEW_KEY")) {
    println "MENGINE_APP_PLUGIN_APPLOVIN_AD_REVIEW_KEY: $MENGINE_APP_PLUGIN_APPLOVIN_AD_REVIEW_KEY"

    apply plugin: 'applovin-quality-service'

    applovin {
        apiKey MENGINE_APP_PLUGIN_APPLOVIN_AD_REVIEW_KEY
    }
}

if (MENGINE_APP_PLUGIN_DATADOG == true) {
    apply plugin: 'com.datadoghq.dd-sdk-android-gradle-plugin'
}

android {
    ext.plugins = []
    ext.activities = []

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleDebug)) {
            //Empty
        } else if (taskGraph.hasTask(assembleRelease)) {
            //Empty
        } else if (taskGraph.hasTask(bundleDebug)) {
            if (ANDROID_APP_SPLIT_ENABLE == true) {
                throw new GradleException("unsupport bundle with enable ANDROID_APP_SPLIT_ENABLE")
            }

            if (ANDROID_APP_BUNDLE_ENABLE == false) {
                throw new GradleException("unsupport bundle without enable ANDROID_APP_BUNDLE_ENABLE")
            }
        } else if (taskGraph.hasTask(bundleRelease)) {
            if (ANDROID_APP_SPLIT_ENABLE == true) {
                throw new GradleException("unsupport bundle with enable ANDROID_APP_SPLIT_ENABLE")
            }

            if (ANDROID_APP_BUNDLE_ENABLE == false) {
                throw new GradleException("unsupport bundle without enable ANDROID_APP_BUNDLE_ENABLE")
            }
        }
    }

    signingConfigs {
        if (project.hasProperty("ANDROID_APP_DEBUG_STORE_FILE")) {
            debug {
                println "ANDROID_APP_DEBUG_STORE_FILE: $ANDROID_APP_DEBUG_STORE_FILE"
                println "ANDROID_APP_DEBUG_KEY_ALIAS: $ANDROID_APP_DEBUG_KEY_ALIAS"

                def f = new File(ANDROID_APP_DEBUG_STORE_FILE)

                if (f.exists() == false) {
                    throw new GradleException("ANDROID_APP_DEBUG_STORE_FILE not found folder: $ANDROID_APP_DEBUG_STORE_FILE")
                }

                storeFile file(ANDROID_APP_DEBUG_STORE_FILE)
                storePassword ANDROID_APP_DEBUG_STORE_PASSWORD
                keyAlias ANDROID_APP_DEBUG_KEY_ALIAS
                keyPassword ANDROID_APP_DEBUG_KEY_PASSWORD
            }
        }

        if (project.hasProperty("ANDROID_APP_RELEASE_STORE_FILE")) {
            release {
                println "ANDROID_APP_RELEASE_STORE_FILE: $ANDROID_APP_RELEASE_STORE_FILE"
                println "ANDROID_APP_RELEASE_KEY_ALIAS: $ANDROID_APP_RELEASE_KEY_ALIAS"

                def f = new File(ANDROID_APP_RELEASE_STORE_FILE)

                if (f.exists() == false) {
                    throw new GradleException("ANDROID_APP_RELEASE_STORE_FILE not found folder: $ANDROID_APP_RELEASE_STORE_FILE")
                }

                storeFile file(ANDROID_APP_RELEASE_STORE_FILE)
                storePassword ANDROID_APP_RELEASE_STORE_PASSWORD
                keyAlias ANDROID_APP_RELEASE_KEY_ALIAS
                keyPassword ANDROID_APP_RELEASE_KEY_PASSWORD
            }
        }
    }

    defaultConfig {
        if (project.hasProperty("ANDROID_APP_ID")) {
            applicationId ANDROID_APP_ID

            println "ANDROID_APP_ID: $applicationId"
        } else if (System.getenv('ANDROID_APP_ID')) {
            applicationId System.getenv('ANDROID_APP_ID')

            println "ANDROID_APP_ID: $applicationId"
        } else {
            applicationId "org.Mengine.ANDROID_APP_ID"

            println "HARDCODE ANDROID_APP_ID: $applicationId"
        }

        def buildNumber = ANDROID_APP_BUILD_NUMBER

        if (ANDROID_APP_BUILD_PUBLISH == true) {
            if (ANDROID_APP_BUNDLE_ENABLE == true) {
                versionCode = 410000000 + buildNumber
            } else {
                versionCode = 400000000 + buildNumber
            }
        } else {
            if (ANDROID_APP_BUNDLE_ENABLE == true) {
                versionCode = 310000000 + buildNumber
            } else {
                versionCode = 300000000 + buildNumber
            }
        }

        versionName ANDROID_APP_BUILD_VERSION

        println "versionCode: $versionCode"
        println "versionName: $versionName"
    }

    buildTypes {
        debug {
            if (project.hasProperty("ANDROID_APP_DEBUG_STORE_FILE")) {
                signingConfig signingConfigs.debug
            }
        }

        release {
            if (project.hasProperty("ANDROID_APP_RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }
    }

    if (MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS == true) {
        if (MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS_NATIVE_SYMBOL_UPLOAD_ENABLE == true) {
            buildTypes {
                var buildDirectory = getLayout().getBuildDirectory();

                debug {
                    firebaseCrashlytics {
                        mappingFileUploadEnabled true
                        nativeSymbolUploadEnabled true

                        unstrippedNativeLibsDir buildDirectory.dir("intermediates/merged_native_libs/debug/mergeDebugNativeLibs/out/lib")
                    }

                    ndk {
                        debugSymbolLevel 'FULL'
                    }
                }

                release {
                    firebaseCrashlytics {
                        mappingFileUploadEnabled true
                        nativeSymbolUploadEnabled true

                        unstrippedNativeLibsDir buildDirectory.dir("intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib")
                    }

                    ndk {
                        debugSymbolLevel 'SYMBOL_TABLE'
                    }
                }
            }
        }
        else
        {
            buildTypes {
                debug {
                    firebaseCrashlytics {
                        mappingFileUploadEnabled false
                        nativeSymbolUploadEnabled false
                    }
                }

                release {
                    firebaseCrashlytics {
                        mappingFileUploadEnabled false
                        nativeSymbolUploadEnabled false
                    }
                }
            }
        }
    }

    if (ANDROID_APP_DELIVERY_PACKAGES != null) {
        def PACKAGES = ANDROID_APP_DELIVERY_PACKAGES.split(",")

        for(PACKAGE_DESC in PACKAGES) {
            var PACKAGE_NAME = PACKAGE_DESC.split(";")[0]

            println "add delivery asset pack: $PACKAGE_NAME"

            assetPacks += [":$ANDROID_APP_MAIN_PROJECT:" + PACKAGE_NAME]
        }
    }

    sourceSets {
        main {
			manifest.srcFile 'src/main/AndroidManifest.xml'
			
            java.srcDirs += ['src']

            if (project.hasProperty("ANDROID_APP_ASSETS_RES_DIR")) {
                println "ANDROID_APP_ASSETS_RES_DIR: $ANDROID_APP_ASSETS_RES_DIR"

                def f = new File(ANDROID_APP_ASSETS_RES_DIR)

                if (f.exists() == false) {
                    throw new GradleException("ANDROID_APP_ASSETS_RES_DIR not found folder: $ANDROID_APP_ASSETS_RES_DIR")
                }

                res.srcDirs += [ANDROID_APP_ASSETS_RES_DIR]
            } else {
                println 'ANDROID_APP_ASSETS_RES_DIR: res [Default]'

                res.srcDirs += ['res']
            }

            if (project.hasProperty("ANDROID_APP_ASSETS_SRC_DIR")) {
                println "ANDROID_APP_ASSETS_SRC_DIR: $ANDROID_APP_ASSETS_SRC_DIR"

                def f = new File(ANDROID_APP_ASSETS_SRC_DIR)

                if (f.exists() == false) {
                    throw new GradleException("ANDROID_APP_ASSETS_SRC_DIR not found folder: $ANDROID_APP_ASSETS_SRC_DIR")
                }

                assets.srcDirs += [ANDROID_APP_ASSETS_SRC_DIR]
            } else {
                println 'ANDROID_APP_ASSETS_SRC_DIR: data [Default]'

                assets.srcDirs += ['data']
            }
        }
    }

    packagingOptions {
        jniLibs {
            pickFirsts += ['lib/**/libc++_shared.so']

            if(MENGINE_APP_LIBRARY_OPENAL32) {
                pickFirsts += ['lib/**/libopenal.so']
            }
        }
    }

    androidResources {
        noCompress += ['pak', 'bin', 'jpg', 'jpeg', 'png', 'webp', 'ogg', 'ogv', 'ogva']
    }

    namespace "org.Mengine.Project"
}

if (ANDROID_APP_SPLIT_ENABLE == true) {
    android.applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def abiCodes = ["arm64-v8a": 1, "armeabi-v7a": 2, "x86": 3, "x86_64": 4]

            def filter = output.getFilter("ABI")
            def baseAbiVersionCode = abiCodes.get(filter)

            if (baseAbiVersionCode != null) {
                output.versionCodeOverride = baseAbiVersionCode * 1000000 + variant.versionCode
            }
        }
    }
}

Utils.logAvailable("MENGINE_APP_LIBRARY_OPENAL32", MENGINE_APP_LIBRARY_OPENAL32)

if (MENGINE_APP_LIBRARY_OPENAL32 == true) {
    dependencies {
        implementation project(':libraries:OpenAL32')
    }
}

Utils.logAvailable("MENGINE_APP_LIBRARY_MENGINE", MENGINE_APP_LIBRARY_MENGINE)

if (MENGINE_APP_LIBRARY_MENGINE == true) {
    dependencies {
        implementation project(':libraries:Mengine')
    }
}

Utils.logAvailable("MENGINE_APP_SERVICE_AD", MENGINE_APP_SERVICE_AD)

if (MENGINE_APP_SERVICE_AD == true) {
    android.ext.plugins += 'org.Mengine.Base.MengineAdService'
}

Utils.logAvailable("MENGINE_APP_SERVICE_MONITORCONNECTIVITYSTATUS", MENGINE_APP_SERVICE_MONITORCONNECTIVITYSTATUS)

if (MENGINE_APP_SERVICE_MONITORCONNECTIVITYSTATUS == true) {
    android.ext.plugins += 'org.Mengine.Base.MengineMonitorConnectivityStatusService'
}

Utils.logAvailable("MENGINE_APP_PLUGIN_SPLASHSCREEN", MENGINE_APP_PLUGIN_SPLASHSCREEN)

if (MENGINE_APP_PLUGIN_SPLASHSCREEN == true) {
    android.ext.plugins += 'org.Mengine.Plugin.SplashScreen.MengineSplashScreenPlugin'

    dependencies {
        implementation project(':plugins:SplashScreen')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_GOOGLE_SERVICE", MENGINE_APP_PLUGIN_GOOGLE_SERVICE)

if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == true) {
    android.ext.plugins += 'org.Mengine.Plugin.GoogleService.MengineGoogleServicePlugin'

    dependencies {
        implementation project(':plugins:GoogleService')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_GOOGLE_ADVERTISING", MENGINE_APP_PLUGIN_GOOGLE_ADVERTISING)

if (MENGINE_APP_PLUGIN_GOOGLE_ADVERTISING == true) {
    android.ext.plugins += 'org.Mengine.Plugin.GoogleAdvertising.MengineGoogleAdvertisingPlugin'

    dependencies {
        implementation project(':plugins:GoogleAdvertising')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_FIREBASE", MENGINE_APP_PLUGIN_FIREBASE)

if (MENGINE_APP_PLUGIN_FIREBASE == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Firebase.MengineFirebasePlugin'

    dependencies {
        implementation project(':plugins:Firebase')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_FIREBASE_INSTALLATIONS", MENGINE_APP_PLUGIN_FIREBASE_INSTALLATIONS)

if (MENGINE_APP_PLUGIN_FIREBASE_INSTALLATIONS == true) {
    android.ext.plugins += 'org.Mengine.Plugin.FirebaseInstallations.MengineFirebaseInstallationsPlugin'

    dependencies {
        implementation project(':plugins:FirebaseInstallations')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_FIREBASE_APPCHECK", MENGINE_APP_PLUGIN_FIREBASE_APPCHECK)

if (MENGINE_APP_PLUGIN_FIREBASE_APPCHECK == true) {
    android.ext.plugins += 'org.Mengine.Plugin.FirebaseAppCheck.MengineFirebaseAppCheckPlugin'

    dependencies {
        implementation project(':plugins:FirebaseAppCheck')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS", MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS)
Utils.logAvailable("MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS_NATIVE_SYMBOL_UPLOAD_ENABLE", MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS_NATIVE_SYMBOL_UPLOAD_ENABLE)

if (MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS == true) {
    android.ext.plugins += 'org.Mengine.Plugin.FirebaseCrashlytics.MengineFirebaseCrashlyticsPlugin'

    dependencies {
        implementation project(':plugins:FirebaseCrashlytics')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_FIREBASE_ANALYTICS", MENGINE_APP_PLUGIN_FIREBASE_ANALYTICS)

if (MENGINE_APP_PLUGIN_FIREBASE_ANALYTICS == true) {
    android.ext.plugins += 'org.Mengine.Plugin.FirebaseAnalytics.MengineFirebaseAnalyticsPlugin'

    dependencies {
        implementation project(':plugins:FirebaseAnalytics')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_FIREBASE_MESSAGING", MENGINE_APP_PLUGIN_FIREBASE_MESSAGING)

if (MENGINE_APP_PLUGIN_FIREBASE_MESSAGING == true) {
    android.ext.plugins += 'org.Mengine.Plugin.FirebaseMessaging.MengineFirebaseMessagingPlugin'

    dependencies {
        implementation project(':plugins:FirebaseMessaging')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_FIREBASE_REMOTECONFIG", MENGINE_APP_PLUGIN_FIREBASE_REMOTECONFIG)

if (MENGINE_APP_PLUGIN_FIREBASE_REMOTECONFIG == true) {
    android.ext.plugins += 'org.Mengine.Plugin.FirebaseRemoteConfig.MengineFirebaseRemoteConfigPlugin'

    dependencies {
        implementation project(':plugins:FirebaseRemoteConfig')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_FIREBASE_PERFORMANCEMONITORING", MENGINE_APP_PLUGIN_FIREBASE_PERFORMANCEMONITORING)

if (MENGINE_APP_PLUGIN_FIREBASE_PERFORMANCEMONITORING == true) {
    android.ext.plugins += 'org.Mengine.Plugin.FirebasePerformanceMonitoring.MengineFirebasePerformanceMonitoringPlugin'

    dependencies {
        implementation project(':plugins:FirebasePerformanceMonitoring')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_FLURRY", MENGINE_APP_PLUGIN_FLURRY)

if (MENGINE_APP_PLUGIN_FLURRY == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Flurry.MengineFlurryPlugin'

    dependencies {
        implementation project(':plugins:Flurry')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_APPMETRICA", MENGINE_APP_PLUGIN_APPMETRICA)

if (MENGINE_APP_PLUGIN_APPMETRICA == true) {
    android.ext.plugins += 'org.Mengine.Plugin.AppMetrica.MengineAppMetricaPlugin'

    dependencies {
        implementation project(':plugins:AppMetrica')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_APPSFLYER", MENGINE_APP_PLUGIN_APPSFLYER)

if (MENGINE_APP_PLUGIN_APPSFLYER == true) {
    android.ext.plugins += 'org.Mengine.Plugin.AppsFlyer.MengineAppsFlyerPlugin'

    dependencies {
        implementation project(':plugins:AppsFlyer')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_DEVTODEV", MENGINE_APP_PLUGIN_DEVTODEV)

if (MENGINE_APP_PLUGIN_DEVTODEV == true) {
    android.ext.plugins += 'org.Mengine.Plugin.DevToDev.MengineDevToDevPlugin'

    dependencies {
        implementation project(':plugins:DevToDev')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_DATADOG", MENGINE_APP_PLUGIN_DATADOG)

if (MENGINE_APP_PLUGIN_DATADOG == true) {
    android.ext.plugins += 'org.Mengine.Plugin.DataDog.MengineDataDogPlugin'

    dependencies {
        implementation project(':plugins:DataDog')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_SENTRY", MENGINE_APP_PLUGIN_SENTRY)

if (MENGINE_APP_PLUGIN_SENTRY == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Sentry.MengineSentryPlugin'

    dependencies {
        implementation project(':plugins:Sentry')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_ADJUST", MENGINE_APP_PLUGIN_ADJUST)

if (MENGINE_APP_PLUGIN_ADJUST == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Adjust.MengineAdjustPlugin'

    dependencies {
        implementation project(':plugins:Adjust')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL", MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL)

if (MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL == true) {
    if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == false) {
        throw new GradleException("MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL required enable MENGINE_APP_PLUGIN_GOOGLE_SERVICE")
    }

    android.ext.plugins += 'org.Mengine.Plugin.GoogleGameSocial.MengineGoogleGameSocialPlugin'

    dependencies {
        implementation project(':plugins:GoogleGameSocial')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_GOOGLE_PLAY_BILLING", MENGINE_APP_PLUGIN_GOOGLE_PLAY_BILLING)

if (MENGINE_APP_PLUGIN_GOOGLE_PLAY_BILLING == true) {
    if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == false) {
        throw new GradleException("MENGINE_APP_PLUGIN_GOOGLE_PLAY_BILLING required enable MENGINE_APP_PLUGIN_GOOGLE_SERVICE")
    }

    android.ext.plugins += 'org.Mengine.Plugin.GooglePlayBilling.MengineGooglePlayBillingPlugin'

    dependencies {
        implementation project(':plugins:GooglePlayBilling')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS", MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS)

if (MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS == true) {
    if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == false) {
        throw new GradleException("MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS required enable MENGINE_APP_PLUGIN_GOOGLE_SERVICE")
    }

    android.ext.plugins += 'org.Mengine.Plugin.GoogleInAppReviews.MengineGoogleInAppReviewsPlugin'

    dependencies {
        implementation project(':plugins:GoogleInAppReviews')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_GOOGLE_CONSENT", MENGINE_APP_PLUGIN_GOOGLE_CONSENT)

if (MENGINE_APP_PLUGIN_GOOGLE_CONSENT == true) {
    if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == false) {
        throw new GradleException("MENGINE_APP_PLUGIN_GOOGLE_CONSENT required enable MENGINE_APP_PLUGIN_GOOGLE_SERVICE")
    }

    android.ext.plugins += 'org.Mengine.Plugin.GoogleConsent.MengineGoogleConsentPlugin'

    dependencies {
        implementation project(':plugins:GoogleConsent')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_FACEBOOK", MENGINE_APP_PLUGIN_FACEBOOK)

if (MENGINE_APP_PLUGIN_FACEBOOK == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Facebook.MengineFacebookPlugin'

    dependencies {
        implementation project(':plugins:Facebook')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_LOCAL_NOTIFICATIONS", MENGINE_APP_PLUGIN_LOCAL_NOTIFICATIONS)

if (MENGINE_APP_PLUGIN_LOCAL_NOTIFICATIONS == true) {
    android.ext.plugins += 'org.Mengine.Plugin.LocalNotifications.MengineLocalNotificationsPlugin'

    dependencies {
        implementation project(':plugins:LocalNotifications')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_MAR", MENGINE_APP_PLUGIN_MAR)

if (MENGINE_APP_PLUGIN_MAR == true) {
    android.ext.plugins += 'org.Mengine.Plugin.MAR.MengineMARPlugin'

    dependencies {
        implementation project(':plugins:MAR')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_ADMOB", MENGINE_APP_PLUGIN_ADMOB)

if (MENGINE_APP_PLUGIN_ADMOB == true) {
    android.ext.plugins += 'org.Mengine.Plugin.AdMob.MengineAdMobPlugin'

    dependencies {
        implementation project(':plugins:AdMob')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_AMAZON", MENGINE_APP_PLUGIN_AMAZON)

if (MENGINE_APP_PLUGIN_AMAZON == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Amazon.MengineAmazonPlugin'

    dependencies {
        implementation project(':plugins:Amazon')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_APPLOVIN", MENGINE_APP_PLUGIN_APPLOVIN)

if (MENGINE_APP_PLUGIN_APPLOVIN == true) {
    android.ext.plugins += 'org.Mengine.Plugin.AppLovin.MengineAppLovinPlugin'

    dependencies {
        implementation project(':plugins:AppLovin')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_HELPSHIFT", MENGINE_APP_PLUGIN_HELPSHIFT)

if (MENGINE_APP_PLUGIN_HELPSHIFT == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Helpshift.MengineHelpshiftPlugin'

    dependencies {
        implementation project(':plugins:Helpshift')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_ONESIGNAL", MENGINE_APP_PLUGIN_ONESIGNAL)

if (MENGINE_APP_PLUGIN_ONESIGNAL == true) {
    android.ext.plugins += 'org.Mengine.Plugin.OneSignal.MengineOneSignalPlugin'

    dependencies {
        implementation project(':plugins:OneSignal')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_LEANPLUM", MENGINE_APP_PLUGIN_LEANPLUM)

if (MENGINE_APP_PLUGIN_LEANPLUM == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Leanplum.MengineLeanplumPlugin'

    dependencies {
        implementation project(':plugins:Leanplum')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_VIBRATOR", MENGINE_APP_PLUGIN_VIBRATOR)

if (MENGINE_APP_PLUGIN_VIBRATOR == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Vibrator.MengineVibratorPlugin'

    dependencies {
        implementation project(':plugins:Vibrator')
    }
}

Utils.logAvailable("MENGINE_APP_PLUGIN_AMPLITUDE", MENGINE_APP_PLUGIN_AMPLITUDE)

if (MENGINE_APP_PLUGIN_AMPLITUDE == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Amplitude.MengineAmplitudePlugin'

    dependencies {
        implementation project(':plugins:Amplitude')
    }
}

if (project.hasProperty("MENGINE_APP_OPTIONS")) {
    println "MENGINE_APP_OPTIONS: $MENGINE_APP_OPTIONS"

    android {
        defaultConfig {
            buildConfigField "String", "MENGINE_APP_OPTIONS", "\"${MENGINE_APP_OPTIONS}\""
        }
    }
} else {
    println "MENGINE_APP_OPTIONS: [None]"

    android {
        defaultConfig {
            buildConfigField "String", "MENGINE_APP_OPTIONS", "\"\""
        }
    }
}

android {
    defaultConfig {
        buildConfigField "boolean", "ANDROID_APP_BUILD_PUBLISH", "${ANDROID_APP_BUILD_PUBLISH}"
    }
}

android {
    defaultConfig {
        buildConfigField "String[]", "MENGINE_ANDROID_PLUGINS", '{' + android.ext.plugins.collect {"\"${it}\""}.join(",") + '}'
    }
}

android {
    defaultConfig {
        buildConfigField "String[]", "MENGINE_ANDROID_ACTIVITIES", '{' + android.ext.activities.collect {"\"${it}\""}.join(",") + '}'
    }
}

if (MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS == true && MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS_NATIVE_SYMBOL_UPLOAD_ENABLE == true) {
    tasks.register('checkDebugUnstrippedNativeLibsDir') {
        doLast {
            println "[TASK] checkDebugUnstrippedNativeLibsDir"

            def f = android.buildTypes.debug.firebaseCrashlytics.unstrippedNativeLibsDir.get().getAsFile()

            if (f.exists() == false) {
                var fname = f.getCanonicalPath()

                throw new GradleException("unstrippedNativeLibsDir not found folder: $fname")
            }

            println "unstrippedNativeLibsDir debug: " + f.getCanonicalPath()
        }
    }

    tasks.register('checkReleaseUnstrippedNativeLibsDir') {
        doLast {
            println "[TASK] checkReleaseUnstrippedNativeLibsDir"

            def f = android.buildTypes.release.firebaseCrashlytics.unstrippedNativeLibsDir.get().getAsFile()

            if (f.exists() == false) {
                var fname = f.getCanonicalPath()

                throw new GradleException("unstrippedNativeLibsDir not found folder: $fname")
            }

            println "unstrippedNativeLibsDir release: " + f.getCanonicalPath()
        }
    }

    tasks.configureEach { task ->
        if (task.name == 'assembleRelease') {
            task.finalizedBy checkReleaseUnstrippedNativeLibsDir
        } else if(task.name == 'assembleDebug') {
            task.finalizedBy checkDebugUnstrippedNativeLibsDir
        }
    }

    tasks.configureEach { task ->
        if (task.name.startsWith('generateCrashlyticsSymbolFile')) {
            task.dependsOn 'merge' + (task.name =~ /^generateCrashlyticsSymbolFile(.+)$/)[0][1] + 'NativeLibs'
        }
    }

    tasks.configureEach { task ->
        if (task.name.startsWith('injectCrashlyticsBuildIds')) {
            task.dependsOn 'merge' + (task.name =~ /^injectCrashlyticsBuildIds(.+)$/)[0][1] + 'NativeLibs'
        }
    }

    tasks.configureEach { task ->
        if (task.name == "bundleRelease") {
            task.finalizedBy 'uploadCrashlyticsSymbolFileRelease'
        }
    }
}