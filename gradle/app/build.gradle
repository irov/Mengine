apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'io.sentry.android.gradle'

def property_buildPublish = "FALSE"

android {
    buildToolsVersion '29.0.3'
    compileSdkVersion 28


    signingConfigs {
        config {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                print 'RELEASE_STORE_FILE = '
                println RELEASE_STORE_FILE

                print 'RELEASE_KEY_ALIAS = '
                println RELEASE_KEY_ALIAS

                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }   
    
    defaultConfig {
        if (findProperty("ANDROID_APP_ID")) {
            applicationId ANDROID_APP_ID
            print 'ANDROID_APP_ID = '
        } else if (System.getenv('ANDROID_ANDROID_APP_ID')) {
            applicationId System.getenv('ANDROID_ANDROID_APP_ID')
            print 'ANDROID_ANDROID_APP_ID = '
        } else {
            applicationId "org.Wonderland.EvilMonkey"
            print 'HARDCODE ANDROID_APP_ID = '
        }
        
        println applicationId

        minSdkVersion 18
        targetSdkVersion 28

        if (findProperty("ANDROID_APP_CODE_VERSION")) {
            versionCode ANDROID_APP_CODE_VERSION as Integer
            versionName ANDROID_APP_CODE_VERSION
        } else {
            versionCode 4
            versionName "4"
        }
        
        if (findProperty("ANDROID_APP_NAME")) {
            manifestPlaceholders = [app_name_gradle:ANDROID_APP_NAME]
        } else {
            manifestPlaceholders = [app_name_gradle:"org.Mengine.EvilMonkey"]
        }
        
        if (findProperty("ANDROID_BUILD_PUBLISH")) {
            property_buildPublish = ANDROID_BUILD_PUBLISH
        }

        print 'manifestPlaceholders = '
        println manifestPlaceholders
        
        print 'ANDROID_APP_CODE_VERSION = '
        println versionCode
        
        print 'ANDROID_APP_NAME_VERSION = '
        println versionName
        
        print 'ANDROID_BUILD_PUBLISH = '
        println property_buildPublish
        
        signingConfig signingConfigs.config

        multiDexEnabled true
        
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a"
        }
    }

    splits {
        abi {
            if (findProperty("ANDROID_APP_SPLIT_ENABLE")) {
                enable true
            } else {
                enable false
            }
            
            print 'ANDROID_APP_SPLIT_ENABLE = '
            println findProperty("ANDROID_APP_SPLIT_ENABLE") != null
            
            reset()

            include "arm64-v8a", "armeabi-v7a"

            universalApk false
        }
    }
    
    externalNativeBuild {
        cmake {
            version "3.10.2"
        }
    }
    
    buildTypes {
        debug {
            debuggable true
            
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_PLATFORM=android-18",
                        "-DANDROID_ARM_NEON=TRUE",
                        "-DANDROID_STL=c++_shared", 
                        "-DANDROID_TOOLCHAIN=clang",
                        "-DANDROID_ALLOW_UNDEFINED_SYMBOLS=TRUE",
                        "-DMENGINE_BUILD_PUBLISH=" + property_buildPublish,
                        "-DCMAKE_BUILD_TYPE:STRING=Debug"
                }
                
                firebaseCrashlytics {
                    mappingFileUploadEnabled false
                }
            }
        }

        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_PLATFORM=android-18",
                        "-DANDROID_ARM_NEON=TRUE",
                        "-DANDROID_STL=c++_shared",
                        "-DANDROID_TOOLCHAIN=clang",
                        "-DANDROID_ALLOW_UNDEFINED_SYMBOLS=TRUE",
                        "-DMENGINE_BUILD_PUBLISH=" + property_buildPublish,
                        "-DCMAKE_BUILD_TYPE:STRING=Release"
                }
                
                firebaseCrashlytics {
                    nativeSymbolUploadEnabled true
                }
            }
        }
    }
    
    externalNativeBuild {
        cmake {
            path "../../CMake/Android_SDL/CMakeLists.txt"
        }
    }
    
    sourceSets {
        main {
            if (findProperty("MANIFEST_SRC_FILE")) {
                print 'MANIFEST_SRC_FILE = '
                println MANIFEST_SRC_FILE
            
                manifest.srcFile MANIFEST_SRC_FILE
            } else if (findProperty("MANIFEST_PUBLISH")) {
                print 'MANIFEST_PUBLISH = '
                println MANIFEST_PUBLISH
            
                manifest.srcFile 'AndroidManifestPublish.xml'
            } else {
                manifest.srcFile 'AndroidManifest.xml'
            }
            
            java.srcDirs = ['src', '../../dependencies/SDL2/android-project/app/src/main/java/']
            
            if (findProperty("ASSETS_RES_DIR")) {
                print 'ASSETS_RES_DIR = '
                println ASSETS_RES_DIR

                res.srcDirs = [ASSETS_RES_DIR]
            } else {
                res.srcDirs = ['res']
            }

			if (findProperty("ASSETS_SRC_DIR")) {
                print 'ASSETS_SRC_DIR = '
                println ASSETS_SRC_DIR

                assets.srcDirs = [ASSETS_SRC_DIR]
            } else {
                assets.srcDirs = ['data']
            }
        }
    }
    
    aaptOptions {
        noCompress 'pak', 'bin'
    }
    
    productFlavors {
    }
    
    packagingOptions {
       pickFirst 'lib/arm64-v8a/libjsc.so'
       pickFirst 'lib/arm64-v8a/libc++_shared.so'
       pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    }
    
    afterEvaluate {
        if (findProperty("ANDROID_APP_UPLOAD_CRASHLYTICS")) {
            assembleRelease.finalizedBy(uploadCrashlyticsSymbolFileRelease)
        }
    }
}

sentry {
    autoProguardConfig true
    autoUpload true
    uploadNativeSymbols true
    includeNativeSources true
}

task openal_copy_bsinc_inc(type: Copy) {
    from "../../cmake/Dependencies/openal-soft/bsinc_inc.h"
    into "../../dependencies/openal-soft"
}

task openal_CMakeLists(type: Copy) {
    from "../../cmake/Dependencies/openal-soft/CMakeLists.txt"
    into "../../dependencies/openal-soft"
}

preBuild.dependsOn openal_copy_bsinc_inc
preBuild.dependsOn openal_CMakeLists

ext.abiCodes = ["arm64-v8a": 1, "armeabi-v7a": 2, "x86": 3, "x86_64": 4]

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->    
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        if (baseAbiVersionCode != null) {
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000000 + variant.versionCode
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':unity-ads')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.core:core:1.2.0"
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'
    implementation 'com.devtodev:android:1.13'
    implementation 'com.google.android.gms:play-services-base:17.2.1'
    implementation 'com.google.android.gms:play-services-ads:19.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.facebook.android:facebook-android-sdk:5.15.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.google.firebase:firebase-core:17.4.1'
    implementation 'com.google.firebase:firebase-analytics:17.4.1'
    implementation 'com.google.firebase:firebase-auth:19.3.1'
    implementation 'com.google.firebase:firebase-firestore:21.4.3'
    implementation 'com.google.firebase:firebase-crashlytics-ndk:17.0.0'
    implementation 'com.google.firebase:firebase-messaging:20.1.7'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'io.sentry:sentry-android:2.0.0'

    implementation project(':libraries:SDL2')
    implementation project(':libraries:OpenAL32')
}

apply plugin: 'com.google.gms.google-services'

