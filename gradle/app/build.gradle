import com.Mengine.Utils

apply plugin: 'com.android.application'

def ANDROID_APP_UPLOAD_CRASHLYTICS = Utils.getBooleanProperty(project, "ANDROID_APP_UPLOAD_CRASHLYTICS", false);
def ANDROID_APP_BUILD_PUBLISH = Utils.getBooleanProperty(project, "ANDROID_APP_BUILD_PUBLISH", false);
def ANDROID_APP_SPLIT_ENABLE = Utils.getBooleanProperty(project, "ANDROID_APP_SPLIT_ENABLE", false);
def ANDROID_APP_ARCH_86_64_ENABLE = Utils.getBooleanProperty(project, "ANDROID_APP_ARCH_86_64_ENABLE", true);
def ANDROID_APP_ENABLE_DELIVERY_PACKAGE = Utils.getBooleanProperty(project, "ANDROID_APP_ENABLE_DELIVERY_PACKAGE", false);

def MENGINE_APP_PLUGIN_SPLASHSCREEN = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_SPLASHSCREEN");
def MENGINE_APP_PLUGIN_LOCAL_NOTIFICATIONS = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_LOCAL_NOTIFICATIONS");
def MENGINE_APP_PLUGIN_ADVERTISING = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_ADVERTISING");
def MENGINE_APP_PLUGIN_GOOGLE_SERVICE = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_GOOGLE_SERVICE");
def MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL");
def MENGINE_APP_PLUGIN_GOOGLE_BILLING = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_GOOGLE_BILLING");
def MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS");
def MENGINE_APP_PLUGIN_GOOGLE_CONSENT = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_GOOGLE_CONSENT");
def MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS");
def MENGINE_APP_PLUGIN_FIREBASE_ANALYTICS = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_FIREBASE_ANALYTICS");
def MENGINE_APP_PLUGIN_DEVTODEV = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_DEVTODEV");
def MENGINE_APP_PLUGIN_FACEBOOK = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_FACEBOOK");
def MENGINE_APP_PLUGIN_SENTRY = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_SENTRY");
def MENGINE_APP_PLUGIN_MAR = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_MAR");
def MENGINE_APP_PLUGIN_APPLOVIN = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_APPLOVIN");
def MENGINE_APP_PLUGIN_ADJUST = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_ADJUST");
def MENGINE_APP_PLUGIN_HELPSHIFT = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_HELPSHIFT");
def MENGINE_APP_PLUGIN_DEVDEBUGGER = Utils.existAppPlugin(project, "MENGINE_APP_PLUGIN_DEVDEBUGGER");

if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == true) {
    apply plugin: 'com.google.gms.google-services'
}

if (MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS == true) {
    apply plugin: 'com.google.firebase.crashlytics'
}

android {
    ext.plugins = []

    ndkVersion project.ndkVersion
    buildToolsVersion project.buildToolsVersion
    compileSdkVersion project.compileSdkVersion

    signingConfigs {
        if (project.hasProperty("ANDROID_APP_DEBUG_STORE_FILE") == true) {
            debug {
                println "ANDROID_APP_DEBUG_STORE_FILE = $ANDROID_APP_DEBUG_STORE_FILE"
                println "ANDROID_APP_DEBUG_KEY_ALIAS = $ANDROID_APP_DEBUG_KEY_ALIAS"

                storeFile file(ANDROID_APP_DEBUG_STORE_FILE)
                storePassword ANDROID_APP_DEBUG_STORE_PASSWORD
                keyAlias ANDROID_APP_DEBUG_KEY_ALIAS
                keyPassword ANDROID_APP_DEBUG_KEY_PASSWORD
            }
        }

        if (project.hasProperty("ANDROID_APP_RELEASE_STORE_FILE") == true) {
            release {
                println "ANDROID_APP_RELEASE_STORE_FILE = $ANDROID_APP_RELEASE_STORE_FILE"
                println "ANDROID_APP_RELEASE_KEY_ALIAS = $ANDROID_APP_RELEASE_KEY_ALIAS"

                storeFile file(ANDROID_APP_RELEASE_STORE_FILE)
                storePassword ANDROID_APP_RELEASE_STORE_PASSWORD
                keyAlias ANDROID_APP_RELEASE_KEY_ALIAS
                keyPassword ANDROID_APP_RELEASE_KEY_PASSWORD
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = false
        }
        abi {
            enableSplit = false
        }
    }

    defaultConfig {
        if (project.hasProperty("ANDROID_APP_ID")) {
            applicationId ANDROID_APP_ID

            println "ANDROID_APP_ID = $applicationId"
        } else if (System.getenv('ANDROID_APP_ID')) {
            applicationId System.getenv('ANDROID_APP_ID')

            println "ANDROID_APP_ID = $applicationId"
        } else {
            applicationId "org.Mengine.ANDROID_APP_ID"

            println "HARDCODE ANDROID_APP_ID = $applicationId"
        }

        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion

        def ANDROID_APP_BUILD_NUMBER = project.getProperties().get("ANDROID_APP_BUILD_NUMBER", "0")

        println "ANDROID_APP_BUILD_NUMBER = $ANDROID_APP_BUILD_NUMBER"

        def buildNumber = ANDROID_APP_BUILD_NUMBER as Integer

        if (ANDROID_APP_BUILD_PUBLISH == true) {
            versionCode = 400000000 + buildNumber
        } else {
            versionCode = 300000000 + buildNumber
        }

        if (project.hasProperty("ANDROID_APP_VERSION_NAME")) {
            versionName ANDROID_APP_VERSION_NAME
        } else {
            versionName versionCode as String
        }

        println "versionCode = $versionCode"
        println "versionName = $versionName"

        multiDexEnabled true

        println "ANDROID_APP_SPLIT_ENABLE = $ANDROID_APP_SPLIT_ENABLE"

        if (ANDROID_APP_SPLIT_ENABLE == false) {
            ndk {
                if (ANDROID_APP_ARCH_86_64_ENABLE == true) {
                    abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
                } else {
                    abiFilters "arm64-v8a", "armeabi-v7a"
                }
            }
        }

        println "ANDROID_APP_ARCH_86_64_ENABLE = $ANDROID_APP_ARCH_86_64_ENABLE"
    }

    buildTypes {
        if (project.hasProperty("ANDROID_APP_DEBUG_STORE_FILE") == true) {
            debug {
                signingConfig signingConfigs.debug
            }
        }

        if (project.hasProperty("ANDROID_APP_RELEASE_STORE_FILE") == true) {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    splits {
        abi {
            if (ANDROID_APP_SPLIT_ENABLE == true) {
                enable true
            } else {
                enable false
            }

            reset()

            if (ANDROID_APP_ARCH_86_64_ENABLE == true) {
                include "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
            } else {
                include "arm64-v8a", "armeabi-v7a"
            }

            universalApk false
        }
    }

    if (ANDROID_APP_ENABLE_DELIVERY_PACKAGE == true) {
        println "ANDROID_APP_DELIVERY_PACKAGE_NAME = $ANDROID_APP_DELIVERY_PACKAGE_NAME"

        assetPacks += [ANDROID_APP_DELIVERY_PACKAGE_NAME]
    }

    sourceSets {
        main {
            if (project.hasProperty("ANDROID_APP_MANIFEST_SRC_FILE")) {
                println "ANDROID_APP_MANIFEST_SRC_FILE = $ANDROID_APP_MANIFEST_SRC_FILE"

                manifest.srcFile ANDROID_APP_MANIFEST_SRC_FILE
            } else {
                println 'ANDROID_APP_MANIFEST_SRC_FILE = AndroidManifest.xml [Default]'

                manifest.srcFile 'AndroidManifest.xml'
            }

            java.srcDirs += ['src']

            if (project.hasProperty("ANDROID_APP_ASSETS_RES_DIR")) {
                println "ANDROID_APP_ASSETS_RES_DIR = $ANDROID_APP_ASSETS_RES_DIR"

                res.srcDirs += [ANDROID_APP_ASSETS_RES_DIR]
            } else {
                println 'ANDROID_APP_ASSETS_RES_DIR = res [Default]'

                res.srcDirs += ['res']
            }

            if (project.hasProperty("ANDROID_APP_ASSETS_SRC_DIR")) {
                println "ANDROID_APP_ASSETS_SRC_DIR = $ANDROID_APP_ASSETS_SRC_DIR"

                assets.srcDirs += [ANDROID_APP_ASSETS_SRC_DIR]
            } else {
                print 'ANDROID_APP_ASSETS_SRC_DIR = '
                println 'data'

                assets.srcDirs += ['data']
            }
        }
    }

    packagingOptions {
        jniLibs {
            pickFirsts += ['lib/**/libc++_shared.so', 'lib/**/libopenal.so', 'lib/**/libSDL2.so']
        }
    }

// test c++ debug -> preBuild.dependsOn ":libraries:Mengine:build", ":libraries:SDL2:build", ":libraries:OpenAL32:build"

    if (MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS == true && ANDROID_APP_UPLOAD_CRASHLYTICS == true) {
        buildTypes {
            debug {
                externalNativeBuild {
                    firebaseCrashlytics {
                        nativeSymbolUploadEnabled true
                        unstrippedNativeLibsDir "$rootDir/libraries/Mengine/build/intermediates/merged_native_libs/debug/out/lib/"
                    }
                }
            }

            release {
                externalNativeBuild {
                    firebaseCrashlytics {
                        nativeSymbolUploadEnabled true
                        unstrippedNativeLibsDir "$rootDir/libraries/Mengine/build/intermediates/merged_native_libs/release/out/lib/"
                    }
                }
            }
        }

        afterEvaluate {
            android.applicationVariants.all { variant ->
                def variantName = variant.name.capitalize()
                def task = tasks.findByName("assemble${variantName}")
                def uploader = "uploadCrashlyticsSymbolFile${variantName}"

                task?.finalizedBy(uploader)
            }
        }
    }

    androidResources {
        noCompress 'pak', 'bin'
    }
}

ext.abiCodes = ["arm64-v8a": 1, "armeabi-v7a": 2, "x86": 3, "x86_64": 4]

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        if (baseAbiVersionCode != null) {
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000000 + variant.versionCode
        }
    }
}

dependencies {
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.annotation:annotation:1.5.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.preference:preference:1.2.0"


    implementation project(':libraries:SDL2')
    implementation project(':libraries:OpenAL32')
    implementation project(':libraries:Mengine')

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
}

println "MENGINE_APP_PLUGIN_DEVTODEV: $MENGINE_APP_PLUGIN_DEVTODEV"

if (MENGINE_APP_PLUGIN_DEVTODEV == true) {
    android.ext.plugins += 'org.Mengine.Plugin.DevToDev.MengineDevToDevPlugin'

    dependencies {
        implementation project(':libraries:DevToDev')
    }
}

println "MENGINE_APP_PLUGIN_FACEBOOK: $MENGINE_APP_PLUGIN_FACEBOOK"

if (MENGINE_APP_PLUGIN_FACEBOOK == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Facebook.MengineFacebookPlugin'

    dependencies {
        implementation project(':libraries:Facebook')
    }
}

println "MENGINE_APP_PLUGIN_ADVERTISING: $MENGINE_APP_PLUGIN_ADVERTISING"

if (MENGINE_APP_PLUGIN_ADVERTISING == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Advertising.MengineAdvertisingPlugin'

    dependencies {
        implementation project(':libraries:Advertising')
    }
}

println "MENGINE_APP_PLUGIN_GOOGLE_SERVICE: $MENGINE_APP_PLUGIN_GOOGLE_SERVICE"

if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == true) {
    dependencies {
        implementation project(':libraries:GoogleService')
    }
}

println "MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL: $MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL"

if (MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL == true) {
    if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == false) {
        throw new GradleException("MENGINE_APP_PLUGIN_GOOGLE_GAME_SOCIAL required enable MENGINE_APP_PLUGIN_GOOGLE_SERVICE");
    }

    android.ext.plugins += 'org.Mengine.Plugin.GoogleGameSocial.MengineGoogleGameSocialPlugin'

    dependencies {
        implementation project(':libraries:GoogleGameSocial')
    }
}

println "MENGINE_APP_PLUGIN_GOOGLE_BILLING: $MENGINE_APP_PLUGIN_GOOGLE_BILLING"

if (MENGINE_APP_PLUGIN_GOOGLE_BILLING == true) {
    if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == false) {
        throw new GradleException("MENGINE_APP_PLUGIN_GOOGLE_BILLING required enable MENGINE_APP_PLUGIN_GOOGLE_BILLING");
    }

    android.ext.plugins += 'org.Mengine.Plugin.GooglePlayBilling.MengineGooglePlayBillingPlugin'

    dependencies {
        implementation project(':libraries:GoogleBilling')
    }
}

println "MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS: $MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS"

if (MENGINE_APP_PLUGIN_GOOGLE_INAPP_REVIEWS == true) {
    if (MENGINE_APP_PLUGIN_GOOGLE_SERVICE == false) {
        throw new GradleException("MENGINE_APP_PLUGIN_GOOGLE_BILLING required enable MENGINE_APP_PLUGIN_GOOGLE_BILLING");
    }

    android.ext.plugins += 'org.Mengine.Plugin.GoogleInAppReviews.MengineGoogleInAppReviewsPlugin'

    dependencies {
        implementation project(':libraries:GoogleInAppReviews')
    }
}

println "MENGINE_APP_PLUGIN_GOOGLE_CONSENT: $MENGINE_APP_PLUGIN_GOOGLE_CONSENT"

if (MENGINE_APP_PLUGIN_GOOGLE_CONSENT == true) {
    android.ext.plugins += 'org.Mengine.Plugin.GoogleConsent.MengineGoogleConsentPlugin'

    dependencies {
        implementation project(':libraries:GoogleConsent')
    }
}

println "MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS: $MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS"

if (MENGINE_APP_PLUGIN_FIREBASE_CRASHLYTICS == true) {
    android.ext.plugins += 'org.Mengine.Plugin.FirebaseCrashlytics.MengineFirebaseCrashlyticsPlugin'

    dependencies {
        implementation project(':libraries:FirebaseCrashlytics')
    }
}

println "MENGINE_APP_PLUGIN_FIREBASE_ANALYTICS: $MENGINE_APP_PLUGIN_FIREBASE_ANALYTICS"

if (MENGINE_APP_PLUGIN_FIREBASE_ANALYTICS == true) {
    android.ext.plugins += 'org.Mengine.Plugin.FirebaseAnalytics.MengineFirebaseAnalyticsPlugin'

    dependencies {
        implementation project(':libraries:FirebaseAnalytics')
    }
}

println "MENGINE_APP_PLUGIN_SPLASHSCREEN: $MENGINE_APP_PLUGIN_SPLASHSCREEN"

if (MENGINE_APP_PLUGIN_SPLASHSCREEN == true) {
    android.ext.plugins += 'org.Mengine.Plugin.SplashScreen.MengineSplashScreenPlugin'

    dependencies {
        implementation project(':libraries:SplashScreen')
    }
}

println "MENGINE_APP_PLUGIN_LOCAL_NOTIFICATIONS: $MENGINE_APP_PLUGIN_LOCAL_NOTIFICATIONS"

if (MENGINE_APP_PLUGIN_LOCAL_NOTIFICATIONS == true) {
    android.ext.plugins += 'org.Mengine.Plugin.LocalNotifications.MengineLocalNotificationsPlugin'

    dependencies {
        implementation project(':libraries:LocalNotifications')
    }
}

println "MENGINE_APP_PLUGIN_SENTRY: $MENGINE_APP_PLUGIN_SENTRY"

if (MENGINE_APP_PLUGIN_SENTRY == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Sentry.MengineSentryPlugin'

    dependencies {
        implementation project(':libraries:Sentry')
    }
}

println "MENGINE_APP_PLUGIN_MAR: $MENGINE_APP_PLUGIN_MAR"

if (MENGINE_APP_PLUGIN_MAR == true) {
    android.ext.plugins += 'org.Mengine.Plugin.MAR.MengineMARPlugin'

    dependencies {
        implementation project(':libraries:MAR')
    }
}

println "MENGINE_APP_PLUGIN_APPLOVIN: $MENGINE_APP_PLUGIN_APPLOVIN"

if (MENGINE_APP_PLUGIN_APPLOVIN == true) {
    android.ext.plugins += 'org.Mengine.Plugin.AppLovin.MengineAppLovinPlugin'

    dependencies {
        implementation project(':libraries:AppLovin')
    }
}

println "MENGINE_APP_PLUGIN_ADJUST: $MENGINE_APP_PLUGIN_ADJUST"

if (MENGINE_APP_PLUGIN_ADJUST == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Adjust.MengineAdjustPlugin'

    dependencies {
        implementation project(':libraries:Adjust')
    }
}

println "MENGINE_APP_PLUGIN_HELPSHIFT: $MENGINE_APP_PLUGIN_HELPSHIFT"

if (MENGINE_APP_PLUGIN_HELPSHIFT == true) {
    android.ext.plugins += 'org.Mengine.Plugin.Helpshift.MengineHelpshiftPlugin'

    dependencies {
        implementation project(':libraries:Helpshift')
    }
}

println "MENGINE_APP_PLUGIN_DEVDEBUGGER: $MENGINE_APP_PLUGIN_DEVDEBUGGER"

if (MENGINE_APP_PLUGIN_DEVDEBUGGER == true) {
    android.ext.plugins += 'org.Mengine.Plugin.DevDebugger.MengineDevDebuggerPlugin'

    dependencies {
        implementation project(':libraries:DevDebugger')
    }
}

if (project.hasProperty("MENGINE_APP_OPTIONS")) {
    println "MENGINE_APP_OPTIONS: $MENGINE_APP_OPTIONS"

    android {
        buildTypes {
            debug {
                buildConfigField "String", "MENGINE_APP_OPTIONS", "\"${MENGINE_APP_OPTIONS}\""
            }

            release {
                buildConfigField "String", "MENGINE_APP_OPTIONS", "\"${MENGINE_APP_OPTIONS}\""
            }
        }
    }
}

android {
    buildTypes {
        debug {
            buildConfigField "String[]", "MENGINE_GRADLE_ANDROID_PLUGINS", '{' + android.ext.plugins.collect {
                "\"${it}\""
            }.join(",") + '}'
        }

        release {
            buildConfigField "String[]", "MENGINE_GRADLE_ANDROID_PLUGINS", '{' + android.ext.plugins.collect {
                "\"${it}\""
            }.join(",") + '}'
        }
    }
}