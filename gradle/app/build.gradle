apply plugin: 'com.android.application'

android {
    ndkVersion '22.0.7026061'
    buildToolsVersion '30.0.2'
    compileSdkVersion 30

    ext.getBooleanProperty = { name, d ->
        def p = project.getProperties().get(name, null)

        if( p == null )
        {
            return d
        }

        if( p as Integer == 0 )
        {
            return false
        }

        return true
    }

    signingConfigs {
        config {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                print 'RELEASE_STORE_FILE = '
                println RELEASE_STORE_FILE

                print 'RELEASE_KEY_ALIAS = '
                println RELEASE_KEY_ALIAS

                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }   
    
    defaultConfig {
        if (project.hasProperty("ANDROID_APP_ID")) {
            applicationId ANDROID_APP_ID
            print 'ANDROID_APP_ID = '
        } else if (System.getenv('ANDROID_ANDROID_APP_ID')) {
            applicationId System.getenv('ANDROID_ANDROID_APP_ID')
            print 'ANDROID_ANDROID_APP_ID = '
        } else {
            applicationId "org.Wonderland.EvilMonkey"
            print 'HARDCODE ANDROID_APP_ID = '
        }
        
        println applicationId

        minSdkVersion 19
        targetSdkVersion 30
        
        print 'ANDROID_APP_BUILD_PUBLISH = '
        println getBooleanProperty("ANDROID_APP_BUILD_PUBLISH", false)
        
        print 'ANDROID_APP_BUILD_NUMBER = '
        println project.getProperties().get("ANDROID_APP_BUILD_NUMBER", null)
        
        def buildNumber = 0
        if (project.hasProperty("ANDROID_APP_BUILD_NUMBER")) {
            buildNumber = ANDROID_APP_BUILD_NUMBER as Integer
        }

        if (getBooleanProperty("ANDROID_APP_BUILD_PUBLISH", false) == true) {
            versionCode = 400000000 + buildNumber
        } else {
            versionCode = 300000000 + buildNumber
        }
        
        if (project.hasProperty("ANDROID_APP_VERSION_NAME")) {
            versionName ANDROID_APP_VERSION_NAME
        } else {
            versionName versionCode as String
        }
        
        if (project.hasProperty("ANDROID_APP_NAME")) {
            manifestPlaceholders = [app_name_gradle:ANDROID_APP_NAME]
        } else {
            manifestPlaceholders = [app_name_gradle:"org.Wonderland.EvilMonkey"]
        }
        
        print 'manifestPlaceholders = '
        println manifestPlaceholders
        
        print 'versionCode = '
        println versionCode
        
        print 'versionName = '
        println versionName
        
        signingConfig signingConfigs.config

        multiDexEnabled true
        
        print 'ANDROID_APP_EMULATOR_ENABLE = '
        println getBooleanProperty("ANDROID_APP_EMULATOR_ENABLE", false)
        
        if (getBooleanProperty("ANDROID_APP_SPLIT_ENABLE", false) == false) {
            ndk {
                abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
            }
        }
    }

    splits {
        abi {
            if (getBooleanProperty("ANDROID_APP_SPLIT_ENABLE", false) == true) {
                enable true
            } else {
                enable false
            }
            
            print 'ANDROID_APP_SPLIT_ENABLE = '
            println getBooleanProperty("ANDROID_APP_SPLIT_ENABLE", false)
            
            reset()

            if (getBooleanProperty("ANDROID_APP_SPLIT_ENABLE", false) == false) {
                include "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
            }

            universalApk false
        }
    }
    
    buildTypes {
        debug {
            debuggable true
            
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_PLATFORM=android-19",
                        "-DANDROID_ARM_NEON=TRUE",
                        "-DANDROID_STL=c++_shared", 
                        "-DANDROID_TOOLCHAIN=clang",
                        "-DANDROID_ALLOW_UNDEFINED_SYMBOLS:BOOLEAN=TRUE",
                        "-DMENGINE_BUILD_MENGINE_BUILD_PUBLISH=" + (getBooleanProperty("ANDROID_APP_BUILD_PUBLISH", false) ? "ON" : "OFF"),
                        "-DMENGINE_BUILD_MENGINE_DEVELOPMENT=ON",
                        "-DCMAKE_BUILD_TYPE:STRING=Debug"
                        
                }
                
                if (getBooleanProperty("ANDROID_APP_UPLOAD_CRASHLYTICS", false) == true) {
                    firebaseCrashlytics {
                        mappingFileUploadEnabled true
                    }
                }
            }
        }

        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_PLATFORM=android-19",
                        "-DANDROID_ARM_NEON=TRUE",
                        "-DANDROID_STL=c++_shared",
                        "-DANDROID_TOOLCHAIN=clang",
                        "-DANDROID_ALLOW_UNDEFINED_SYMBOLS:BOOLEAN=TRUE",
                        "-DMENGINE_BUILD_MENGINE_BUILD_PUBLISH=" + (getBooleanProperty("ANDROID_APP_BUILD_PUBLISH", false) ? "ON" : "OFF"),
                        "-DMENGINE_BUILD_MENGINE_DEVELOPMENT=OFF",
                        "-DCMAKE_BUILD_TYPE:STRING=Release"
                }
                
                if (getBooleanProperty("ANDROID_APP_UPLOAD_CRASHLYTICS", false) == true) {
                    firebaseCrashlytics {
                        nativeSymbolUploadEnabled true
                    }
                }
            }
        }
    }
    
    externalNativeBuild {
        cmake {
            path "../../cmake/Android_SDL/CMakeLists.txt"
            version "3.10.2"
        }
    }
    
    sourceSets {
        main {
            if (project.hasProperty("MANIFEST_SRC_FILE")) {
                print 'MANIFEST_SRC_FILE = '
                println MANIFEST_SRC_FILE
            
                manifest.srcFile MANIFEST_SRC_FILE
            } else if (getBooleanProperty("ANDROID_APP_BUILD_PUBLISH", false) == true) {
                println 'MANIFEST_SRC_FILE = AndroidManifestPublish.xml'
            
                manifest.srcFile 'AndroidManifestPublish.xml'
            } else {
                println 'MANIFEST_SRC_FILE = AndroidManifest.xml'
                
                manifest.srcFile 'AndroidManifest.xml'
            }

            if (project.hasProperty("ASSETS_JAVA_NO_SRC_DIR")) {
                println 'ASSETS_JAVA_SRC_DIR = [No]'

                java.srcDirs = ['../../dependencies/SDL2/android-project/app/src/main/java/']
            } else if (project.hasProperty("ASSETS_JAVA_SRC_DIR")) {
                print 'ASSETS_JAVA_SRC_DIR = '
                println ASSETS_JAVA_SRC_DIR

                java.srcDirs = [ASSETS_JAVA_SRC_DIR, '../../dependencies/SDL2/android-project/app/src/main/java/']
            }
            else {
                java.srcDirs = ['src', '../../dependencies/SDL2/android-project/app/src/main/java/']
            }
            
            if (project.hasProperty("ASSETS_RES_DIR")) {
                print 'ASSETS_RES_DIR = '
                println ASSETS_RES_DIR

                res.srcDirs = [ASSETS_RES_DIR]
            } else {
                res.srcDirs = ['res']
            }

			if (project.hasProperty("ASSETS_SRC_DIR")) {
                print 'ASSETS_SRC_DIR = '
                println ASSETS_SRC_DIR

                assets.srcDirs = [ASSETS_SRC_DIR]
            } else {
                print 'ASSETS_SRC_DIR = '
                println 'data'
                
                assets.srcDirs = ['data']
            }
        }
    }
    
    aaptOptions {
        noCompress 'pak', 'bin'
    }
    
    productFlavors {
    }
    
    packagingOptions {
        pickFirst 'lib/**/libc++_shared.so'
        pickFirst 'lib/**/libopenal.so'
        pickFirst 'lib/**/libSDL2.so'
        pickFirst 'lib/**/libhidapi.so'
    }
    
    afterEvaluate {
        if (getBooleanProperty("ANDROID_APP_UPLOAD_CRASHLYTICS", false) == true) {
            build.finalizedBy(uploadCrashlyticsSymbolFileRelease)
        }
    }
}

ext.abiCodes = ["arm64-v8a": 1, "armeabi-v7a": 2, "x86": 3, "x86_64": 4]

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->    
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        if (baseAbiVersionCode != null) {
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000000 + variant.versionCode
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':unity-ads')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.core:core:1.3.2"
    implementation 'com.devtodev:android:1.13'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.facebook.android:facebook-android-sdk:5.15.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation project(':libraries:SDL2')
    implementation project(':libraries:OpenAL32')
}

if( android.getBooleanProperty("ANDROID_APP_ENABLE_GOOGLE_SERVICE", true) == true ) {
    println 'ANDROID_APP_ENABLE_GOOGLE_SERVICE'

    dependencies {
        implementation 'com.google.android.gms:play-services-gcm:17.0.0'
        implementation 'com.google.android.gms:play-services-ads:19.6.0'
        implementation 'com.google.firebase:firebase-core:18.0.1'
        implementation 'com.google.firebase:firebase-analytics:18.0.1'
        implementation 'com.google.firebase:firebase-auth:20.0.2'
        implementation 'com.google.firebase:firebase-firestore:22.0.1'
        implementation 'com.google.firebase:firebase-crashlytics-ndk:17.3.0'
        implementation 'com.google.firebase:firebase-messaging:21.0.1'
    }

    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
}

if( android.getBooleanProperty("ANDROID_APP_ENABLE_SENTRY", true) == true ) {
    println 'ANDROID_APP_ENABLE_SENTRY'

    dependencies {
        implementation 'io.sentry:sentry-android:2.3.1'
    }

    apply plugin: 'io.sentry.android.gradle'

    sentry {
        autoProguardConfig true
        autoUpload true
        uploadNativeSymbols true
        includeNativeSources true
    }
}