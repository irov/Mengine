apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    signingConfigs {
        config {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                print 'RELEASE_STORE_FILE = '
                println RELEASE_STORE_FILE

                print 'RELEASE_KEY_ALIAS = '
                println RELEASE_KEY_ALIAS

                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }
    buildToolsVersion '28.0.3'
    compileSdkVersion 28
    defaultConfig {
        if (findProperty("ANDROID_APP_ID")) {
            applicationId ANDROID_APP_ID
            print 'ANDROID_APP_ID = '
        } else if (System.getenv('MENGINE_ANDROID_APP_ID')) {
            applicationId System.getenv('MENGINE_ANDROID_APP_ID')
            print 'MENGINE_ANDROID_APP_ID = '
        } else {
            applicationId "org.Mengine.EvilMonkey"
            print 'HARDCODE ANDROID_APP_ID = '
            println applicationId
        }
        
        print 'ANDROID_APP_ID = '
        println applicationId

        minSdkVersion 18

        if (findProperty("ANDROID_APP_CODE_VERSION")) {
            versionCode ANDROID_APP_CODE_VERSION as Integer
            versionName ANDROID_APP_CODE_VERSION
        } else {
            versionCode 4
            versionName "4"
        }
        if (findProperty("ANDROID_APP_NAME")) {
            manifestPlaceholders = [app_name_gradle:ANDROID_APP_NAME]
        } else {
            manifestPlaceholders = [app_name_gradle:"Dunge"]
        }
//               a
        print 'ANDROID_APP_CODE_VERSION = '
        println versionCode
        
        versionName "1.7"
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a"
        }
        signingConfig signingConfigs.config
        targetSdkVersion 28
    }
    buildTypes {
        debug {
            debuggable true
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_PLATFORM=android-18",
                            "-DANDROID_ARM_NEON=TRUE",
                            "-DANDROID_STL=c++_shared",
                            "-DANDROID_TOOLCHAIN=clang",
                            "-DANDROID_ALLOW_UNDEFINED_SYMBOLS=TRUE",
                            "-DCMAKE_BUILD_TYPE:STRING=Debug",
                            "-DCMAKE_CONFIGURATION_TYPES:STRING=Debug"
                }
            }
        }

        release {
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_PLATFORM=android-18",
                            "-DANDROID_ARM_NEON=TRUE",
                            "-DANDROID_STL=c++_shared",
                            "-DANDROID_TOOLCHAIN=clang",
                            "-DANDROID_ALLOW_UNDEFINED_SYMBOLS=TRUE",
                            "-DCMAKE_BUILD_TYPE:STRING=Release",
                            "-DCMAKE_CONFIGURATION_TYPES:STRING=Release"
                }
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "../../CMake/Android_SDL/CMakeLists.txt"
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src', '../../dependencies/SDL2/android-project/app/src/main/java/']
            
            if (findProperty("ASSETS_RES_DIR")) {
                print 'ASSETS_RES_DIR = '
                println ASSETS_RES_DIR

                res.srcDirs = [ASSETS_RES_DIR]
            } else {
                res.srcDirs = ['res']
            }

			if (findProperty("ASSETS_SRC_DIR")) {
                print 'ASSETS_SRC_DIR = '
                println ASSETS_SRC_DIR

                assets.srcDirs = [ASSETS_SRC_DIR]
            } else {
                assets.srcDirs = ['data']
            }
          
            
            
            
            
        }
    }
    aaptOptions {
        noCompress 'pak', 'bin'
    }
    productFlavors {
    }    
    packagingOptions {
       pickFirst 'lib/arm64-v8a/libjsc.so'
       pickFirst 'lib/arm64-v8a/libc++_shared.so'
       pickFirst 'lib/armeabi-v7a/libc++_shared.so'
   }
    afterEvaluate {
        assembleDebug.finalizedBy(crashlyticsUploadSymbolsDebug)
        assembleRelease.finalizedBy(crashlyticsUploadSymbolsRelease)
    }
}

crashlytics {
    enableNdk true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation "com.android.support:support-compat:26.1.0"
    implementation 'com.google.android.gms:play-services-gcm:16.1.0'
    implementation 'com.devtodev:android:1.13'
    implementation 'com.google.android.gms:play-services-base:15.0.1'
    implementation 'com.google.android.gms:play-services-ads:15.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.facebook.android:facebook-android-sdk:[5,6)'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation project(':libraries:SDL2')
    implementation project(':libraries:OpenAL32')
    implementation project(':unity-ads')
    implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation 'com.crashlytics.sdk.android:crashlytics-ndk:2.1.0'
    implementation 'com.google.firebase:firebase-messaging:18.0.0'
}
apply plugin: 'com.google.gms.google-services'

