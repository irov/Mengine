import com.Mengine.Utils

apply from: rootProject.projectDir.getAbsolutePath() + '/libraries/library.gradle'

def ANDROID_APP_BUILD_NUMBER = Utils.getIntegerProperty(project, "ANDROID_APP_BUILD_NUMBER", 0)
def ANDROID_APP_BUILD_VERSION = Utils.getStringProperty(project, "ANDROID_APP_BUILD_VERSION", "0.0.0")
def ANDROID_APP_BUILD_PUBLISH = Utils.getBooleanProperty(project, "ANDROID_APP_BUILD_PUBLISH", false)
def ANDROID_APP_LOGGER_LEVEL_FORCE_VERBOSE = Utils.getBooleanProperty(project, "ANDROID_APP_LOGGER_LEVEL_FORCE_VERBOSE", false)
def MENGINE_APP_DEPLOY_PATH = Utils.getStringProperty(project, "MENGINE_APP_DEPLOY_PATH", rootProject.projectDir.getAbsolutePath() + '/app')

android {
    externalNativeBuild {
        cmake {
            path "../../../cmake/Android_SDL/CMakeLists.txt"
        }
    }

    buildTypes {
        List<String> cmake_arguments = new ArrayList<String>();
        cmake_arguments.add("-DANDROID_PLATFORM=android-" + project.minSdkVersion);
        cmake_arguments.add("-DANDROID_ARM_NEON=TRUE");
        cmake_arguments.add("-DANDROID_STL=c++_shared");
        cmake_arguments.add("-DANDROID_TOOLCHAIN=clang");
        cmake_arguments.add("-DANDROID_ALLOW_UNDEFINED_SYMBOLS:BOOLEAN=TRUE");
        cmake_arguments.add("-DMENGINE_BUILD_NUMBER:STRING=" + ANDROID_APP_BUILD_NUMBER);
        cmake_arguments.add("-DMENGINE_BUILD_VERSION:STRING=" + ANDROID_APP_BUILD_VERSION);
        cmake_arguments.add("-DMENGINE_BUILD_MENGINE_BUILD_PUBLISH=" + (ANDROID_APP_BUILD_PUBLISH ? "ON" : "OFF"));
        cmake_arguments.add("-DMENGINE_BUILD_MENGINE_LOGGER_LEVEL_FORCE_VERBOSE=" + (ANDROID_APP_LOGGER_LEVEL_FORCE_VERBOSE ? "ON" : "OFF"));
        cmake_arguments.add("-DMENGINE_DEPLOY_PATH=" + MENGINE_APP_DEPLOY_PATH);

        debug {
            externalNativeBuild {
                cmake {
                    cFlags "-std=c11 -g -O0 -D_DEBUG"
                    cppFlags "-std=c++17 -frtti -fexceptions -g -O0 -D_DEBUG"

                    for (String argument : cmake_arguments) {
                        arguments.add(argument)
                    }

                    arguments.add("-DCMAKE_BUILD_TYPE:STRING=Debug")
                    arguments.add("-DMENGINE_BUILD_MENGINE_DEVELOPMENT=ON");
                    arguments.add("-DMENGINE_BUILD_MENGINE_MASTER_RELEASE=OFF");
                }
            }
        }

        release {
            externalNativeBuild {
                cmake {
                    cFlags "-std=c11 -O3 -DNDEBUG"
                    cppFlags "-std=c++17 -frtti -fexceptions -O3 -DNDEBUG"

                    for (String argument : cmake_arguments) {
                        arguments.add(argument)
                    }

                    arguments.add("-DCMAKE_BUILD_TYPE:STRING=Release")
                    arguments.add("-DMENGINE_BUILD_MENGINE_DEVELOPMENT=OFF");
                    arguments.add("-DMENGINE_BUILD_MENGINE_MASTER_RELEASE=ON");
                }
            }
        }
    }

    preBuild.dependsOn ":libraries:SDL:build", ":libraries:OpenAL32:build"

    namespace "org.Mengine.Base"
}

dependencies {
    implementation project(':libraries:SDL')
    implementation project(':libraries:OpenAL32')
}
