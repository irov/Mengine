import com.Mengine.Utils

apply from: rootProject.projectDir.getAbsolutePath() + '/libraries/library.gradle'

def ANDROID_APP_BUILD_NUMBER = Utils.getIntegerProperty(project, "ANDROID_APP_BUILD_NUMBER", 0)
def ANDROID_APP_BUILD_VERSION = Utils.getStringProperty(project, "ANDROID_APP_BUILD_VERSION", "0.0.0")
def ANDROID_APP_BUILD_PUBLISH = Utils.getBooleanProperty(project, "ANDROID_APP_BUILD_PUBLISH", false)
def ANDROID_APP_LOGGER_LEVEL_FORCE_VERBOSE = Utils.getBooleanProperty(project, "ANDROID_APP_LOGGER_LEVEL_FORCE_VERBOSE", false)
def MENGINE_APP_DEPLOY_PATH = Utils.getStringProperty(project, "MENGINE_APP_DEPLOY_PATH", rootProject.projectDir.getAbsolutePath() + '/app')
def MENGINE_APP_SECURE_VALUE = Utils.getStringProperty(project, "MENGINE_APP_SECURE_VALUE", "0123456789A")
def MENGINE_BUILD_ASSERTION_DEBUG= Utils.getIntegerProperty(project, "MENGINE_BUILD_ASSERTION_DEBUG", -1)

android {
    externalNativeBuild {
        cmake {
            path "../../../cmake/Android_SDL/Mengine/CMakeLists.txt"
            buildStagingDirectory rootProject.projectDir.getAbsolutePath() + "/../outputs/gradle/.cxx/" + project.getName()
        }
    }

    buildTypes {
        List<String> cmake_arguments = new ArrayList<String>()
        cmake_arguments.add("-DANDROID_PLATFORM=android-" + project.minSdkVersion)
        cmake_arguments.add("-DANDROID_ARM_NEON=TRUE")
        cmake_arguments.add("-DANDROID_STL=c++_shared")
        cmake_arguments.add("-DANDROID_TOOLCHAIN=clang")
        cmake_arguments.add("-DCMAKE_SYSTEM_NAME=Android")
        cmake_arguments.add("-DCMAKE_SYSTEM_VERSION=" + project.minSdkVersion)

        cmake_arguments.add("-DMENGINE_BUILD_NUMBER:STRING=${ANDROID_APP_BUILD_NUMBER}")
        cmake_arguments.add("-DMENGINE_BUILD_VERSION:STRING=${ANDROID_APP_BUILD_VERSION}")
        cmake_arguments.add("-DMENGINE_BUILD_MENGINE_BUILD_PUBLISH=" + (ANDROID_APP_BUILD_PUBLISH ? "ON" : "OFF"))
        cmake_arguments.add("-DMENGINE_BUILD_MENGINE_LOGGER_LEVEL_FORCE_VERBOSE=" + (ANDROID_APP_LOGGER_LEVEL_FORCE_VERBOSE ? "ON" : "OFF"))
        cmake_arguments.add("-DMENGINE_SECURE_VALUE:STRING=${MENGINE_APP_SECURE_VALUE}")
        cmake_arguments.add("-DMENGINE_DEPLOY_PATH:STRING=${MENGINE_APP_DEPLOY_PATH}")

        debug {
            externalNativeBuild {
                cmake {
                    for (String argument : cmake_arguments) {
                        arguments.add(argument)
                    }

                    arguments.add("-DCMAKE_BUILD_TYPE:STRING=Debug")

                    if (MENGINE_BUILD_ASSERTION_DEBUG != -1) {
                        cppFlags "-DMENGINE_ASSERTION_DEBUG=" + MENGINE_BUILD_ASSERTION_DEBUG
                    }
                }
            }
        }

        release {
            externalNativeBuild {
                cmake {
                    for (String argument : cmake_arguments) {
                        arguments.add(argument)
                    }

                    arguments.add("-DCMAKE_BUILD_TYPE:STRING=Release")

                    if (MENGINE_BUILD_ASSERTION_DEBUG != -1) {
                        cppFlags "-DMENGINE_ASSERTION_DEBUG=${MENGINE_BUILD_ASSERTION_DEBUG}"
                    }
                }
            }
        }
    }

    preBuild.dependsOn ":libraries:SDL:build", ":libraries:OpenAL32:build"

    namespace "org.Mengine.Base"
}

dependencies {
    implementation project(':libraries:SDL')
    implementation project(':libraries:OpenAL32')
}
