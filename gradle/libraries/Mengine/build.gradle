apply from: rootProject.projectDir.getAbsolutePath() + '/libraries/library.gradle'
apply from: rootProject.projectDir.getAbsolutePath() + '/gms.gradle'

def ANDROID_APP_BUILD_NUMBER = Utils.getIntegerProperty("ANDROID_APP_BUILD_NUMBER", 0)
def ANDROID_APP_BUILD_VERSION = Utils.getStringProperty("ANDROID_APP_BUILD_VERSION", "0.0.0")
def ANDROID_APP_BUILD_PUBLISH = Utils.getBooleanProperty("ANDROID_APP_BUILD_PUBLISH", false)
def MENGINE_APP_SECURE_VALUE = Utils.getStringProperty("MENGINE_APP_SECURE_VALUE", "0123456789A")
def ANDROID_APP_MAIN_PROJECT = Utils.getStringProperty("ANDROID_APP_MAIN_PROJECT", "app")
def MENGINE_APP_DEPLOY_PATH = Utils.getStringProperty("MENGINE_APP_DEPLOY_PATH", rootProject.projectDir.getAbsolutePath() + "/$ANDROID_APP_MAIN_PROJECT")
def MENGINE_APP_BUILD_ASSERTION_DEBUG = Utils.getIntegerProperty("MENGINE_APP_BUILD_ASSERTION_DEBUG", -1)
def MENGINE_APP_BUILD_LOGGER_INFO = Utils.getIntegerProperty("MENGINE_APP_BUILD_LOGGER_INFO", -1)
def MENGINE_APP_DEBUG_FILE_PATH = Utils.getIntegerProperty("MENGINE_APP_DEBUG_FILE_PATH", -1)
def MENGINE_APP_ENABLE_STRICT_MODE = Utils.getBooleanProperty("MENGINE_APP_ENABLE_STRICT_MODE", false)

def ANDROID_APP_SCREEN_ORIENTATION = Utils.getStringProperty("ANDROID_APP_SCREEN_ORIENTATION", "sensorPortrait")
def ANDROID_APP_REQUIRED_HARDWARE_TOUCHSCREEN = Utils.getBooleanProperty("ANDROID_APP_REQUIRED_HARDWARE_TOUCHSCREEN", false)
def ANDROID_APP_REQUIRED_HARDWARE_SENSOR_ACCELEROMETER = Utils.getBooleanProperty("ANDROID_APP_REQUIRED_HARDWARE_SENSOR_ACCELEROMETER", false)

def MENGINE_APP_LIBRARY_OPENAL32 = Utils.existAppLibrary("MENGINE_APP_LIBRARY_OPENAL32")

println("MENGINE_APP_SECURE_VALUE: $MENGINE_APP_SECURE_VALUE")
println("MENGINE_APP_DEPLOY_PATH: $MENGINE_APP_DEPLOY_PATH")

println("MENGINE_APP_ENABLE_STRICT_MODE: $MENGINE_APP_ENABLE_STRICT_MODE")

android {
    defaultConfig {
        manifestPlaceholders = [
            ANDROID_APP_BUILD_NUMBER: ANDROID_APP_BUILD_NUMBER,
            ANDROID_APP_BUILD_VERSION: ANDROID_APP_BUILD_VERSION,
            ANDROID_APP_SCREEN_ORIENTATION: ANDROID_APP_SCREEN_ORIENTATION,
            ANDROID_APP_REQUIRED_HARDWARE_TOUCHSCREEN: ANDROID_APP_REQUIRED_HARDWARE_TOUCHSCREEN,
            ANDROID_APP_REQUIRED_HARDWARE_SENSOR_ACCELEROMETER: ANDROID_APP_REQUIRED_HARDWARE_SENSOR_ACCELEROMETER
        ]

        println "ANDROID_APP_SCREEN_ORIENTATION: $ANDROID_APP_SCREEN_ORIENTATION"
        println "ANDROID_APP_REQUIRED_HARDWARE_TOUCHSCREEN: $ANDROID_APP_REQUIRED_HARDWARE_TOUCHSCREEN"
        println "ANDROID_APP_REQUIRED_HARDWARE_SENSOR_ACCELEROMETER: $ANDROID_APP_REQUIRED_HARDWARE_SENSOR_ACCELEROMETER"
    }

    externalNativeBuild {
        cmake {
            path "../../../cmake/Android/Mengine/CMakeLists.txt"
            buildStagingDirectory rootProject.projectDir.getAbsolutePath() + "/../outputs/gradle/.cxx/" + project.getName()
        }
    }

    buildTypes {
        List<String> cmake_arguments = new ArrayList<String>()
        cmake_arguments.add("-DANDROID_PLATFORM=android-" + project.minSdkVersion)
        cmake_arguments.add("-DANDROID_ARM_NEON=TRUE")
        cmake_arguments.add("-DANDROID_STL=c++_shared")
        cmake_arguments.add("-DANDROID_TOOLCHAIN=clang")
        cmake_arguments.add("-DCMAKE_SYSTEM_NAME=Android")
        cmake_arguments.add("-DCMAKE_SYSTEM_VERSION=${project.minSdkVersion}")

        cmake_arguments.add("-DMENGINE_BUILD_NUMBER:STRING=${ANDROID_APP_BUILD_NUMBER}")
        cmake_arguments.add("-DMENGINE_BUILD_VERSION:STRING=${ANDROID_APP_BUILD_VERSION}")
        cmake_arguments.add("-DMENGINE_DEPENDENCIES_PROJECT:STRING=Depends_Android")
        cmake_arguments.add("-DMENGINE_BUILD_MENGINE_BUILD_PUBLISH:BOOLEAN=" + (ANDROID_APP_BUILD_PUBLISH ? "ON" : "OFF"))
        cmake_arguments.add("-DMENGINE_SECURE_VALUE:STRING=${MENGINE_APP_SECURE_VALUE}")
        cmake_arguments.add("-DMENGINE_DEPLOY_PATH:STRING=${MENGINE_APP_DEPLOY_PATH}")

        debug {
            externalNativeBuild {
                cmake {
                    for (String argument : cmake_arguments) {
                        arguments.add(argument)
                    }

                    arguments.add("-DCMAKE_BUILD_TYPE:STRING=Debug")

                    if (MENGINE_APP_BUILD_ASSERTION_DEBUG != -1) {
                        cppFlags += ["-DMENGINE_ASSERTION_DEBUG=${MENGINE_APP_BUILD_ASSERTION_DEBUG}"]
                    }

                    if (MENGINE_APP_BUILD_LOGGER_INFO != -1) {
                        cppFlags += ["-DMENGINE_LOGGER_INFO=${MENGINE_APP_BUILD_LOGGER_INFO}"]
                    }

                    if (MENGINE_APP_DEBUG_FILE_PATH != -1) {
                        cppFlags += ["-DMENGINE_DEBUG_FILE_PATH=${MENGINE_APP_DEBUG_FILE_PATH}"]
                    }
                }
            }
        }

        release {
            externalNativeBuild {
                cmake {
                    for (String argument : cmake_arguments) {
                        arguments.add(argument)
                    }

                    arguments.add("-DCMAKE_BUILD_TYPE:STRING=Release")

                    if (MENGINE_APP_BUILD_ASSERTION_DEBUG != -1) {
                        cppFlags += ["-DMENGINE_ASSERTION_DEBUG=${MENGINE_APP_BUILD_ASSERTION_DEBUG}"]
                    }

                    if (MENGINE_APP_BUILD_LOGGER_INFO != -1) {
                        cppFlags += ["-DMENGINE_LOGGER_INFO=${MENGINE_APP_BUILD_LOGGER_INFO}"]
                    }

                    if (MENGINE_APP_DEBUG_FILE_PATH != -1) {
                        cppFlags += ["-DMENGINE_DEBUG_FILE_PATH=${MENGINE_APP_DEBUG_FILE_PATH}"]
                    }
                }
            }
        }
    }

    buildTypes {
        debug {
            packagingOptions {
                doNotStrip "**/libclang_rt.asan*.so"
            }
        }
    }

    if (MENGINE_APP_LIBRARY_OPENAL32 == true) {
        preBuild.dependsOn ":libraries:OpenAL32:build"
    }

    namespace "org.Mengine.Base"
}

dependencies {
    if (MENGINE_APP_LIBRARY_OPENAL32 == true) {
        implementation project(':libraries:OpenAL32')
    }
}

android {
    defaultConfig {
        buildConfigField "boolean", "MENGINE_APP_ENABLE_STRICT_MODE", "${MENGINE_APP_ENABLE_STRICT_MODE}"

        buildConfigField "boolean", "ANDROID_APP_REQUIRED_HARDWARE_TOUCHSCREEN", "${ANDROID_APP_REQUIRED_HARDWARE_TOUCHSCREEN}"
        buildConfigField "boolean", "ANDROID_APP_REQUIRED_HARDWARE_SENSOR_ACCELEROMETER", "${ANDROID_APP_REQUIRED_HARDWARE_SENSOR_ACCELEROMETER}"
    }
}