if(MENGINE_TARGET_IOS)
    MENGINE_PROJECT_EXTRA_LANGUAGE(SDLApplication Swift)
elseif(MENGINE_TARGET_IOS_SIMULATOR)
    MENGINE_PROJECT_EXTRA_LANGUAGE(SDLApplication Swift)
else()
    MENGINE_PROJECT(SDLApplication)
endif()

if(MENGINE_TARGET_APPLE)
    SET(MENGINE_APPLE_APPLICATION_DELEGATE_STRING "")
    
    foreach(DELEGATE ${APPLICATION_APPLE_APPLICATION_DELEGATE})
        STRING(APPEND MENGINE_APPLE_APPLICATION_DELEGATE_STRING "@\"${DELEGATE}\", ")
    endforeach()
    
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/MengineAppleApplicationDelegates.mm.in ${CMAKE_CURRENT_SOURCE_DIR}/MengineAppleApplicationDelegates.mm @ONLY)
endif()

if(MENGINE_TARGET_UWP)
    ADD_FILTER(
    main
        UWPMain.cpp
    )
elseif(MENGINE_TARGET_WINDOWS)
    ADD_FILTER(
    main
        Win32Main.cpp
    )
elseif(MENGINE_TARGET_ANDROID)
    ADD_FILTER(
    main
        AndroidMain.cpp
        
        stack_chk_fail_local.c
    )
elseif(MENGINE_TARGET_MACOS)
    ADD_FILTER(
    main
        MacOSMain.mm
    )
elseif(MENGINE_TARGET_IOS)
    ADD_FILTER(
    main
        iOSMain.mm
    )
else()
    message(FATAL_ERROR "SDLApplication unsupport this target")
endif()

ADD_FILTER(
src
    SDLApplication.cpp
    SDLApplication.h
    SDLMessageBoxLogger.cpp
    SDLMessageBoxLogger.h
)

if(MENGINE_TARGET_UWP)
    ADD_FILTER(
    EntryPoint
        SDLUWPEntryPoint.cpp
        SDLUWPResources.rc
        SDLUWPResource_BlankCursor.cur
    )

    SET_SOURCE_FILES_PROPERTIES(SDLUWPEntryPoint.cpp PROPERTIES COMPILE_FLAGS /ZW)
endif()

if(MENGINE_TARGET_UWP)
endif()

if(MENGINE_TARGET_APPLE)
    ADD_FILTER(
    apple
        MengineAppleApplicationDelegates.mm
        MengineAppleApplicationDelegates.h
    )
endif()

if(MENGINE_TARGET_IOS)
    ADD_FILTER(
    ios
        SDLUIApplicationDelegate.mm
        SDLUIApplicationDelegate.h
    )
endif()

INCLUDE_DIRECTORIES(${THIRDPARTY_CONFIG_DIR}/SDL/include/include-config-$<LOWER_CASE:$<CONFIG>>)
INCLUDE_DIRECTORIES(${THIRDPARTY_CONFIG_DIR}/SDL/include)
INCLUDE_DIRECTORIES(${THIRDPARTY_DIR}/SDL/include)

LINK_DIRECTORIES(${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})

if(MENGINE_TARGET_WINDOWS)
    set(CMAKE_CXX_STACK_SIZE 4194304)
    
    ADD_MENGINE_EXECUTABLE_WIN32()
endif()

if(MENGINE_TARGET_UWP)
    set(CMAKE_CXX_STACK_SIZE 4194304)

    if(MENGINE_DEPLOY_PATH)
        if(EXISTS "${MENGINE_DEPLOY_PATH}/project_prepare.cmake")
            include("${MENGINE_DEPLOY_PATH}/project_prepare.cmake")
        endif()

        if(MENGINE_APPLICATION_DEPLOY_PACKAGE)
            ADD_FILTER(
            AppXManifest
                ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_PACKAGE}
            )
        endif()
        
        if(MENGINE_APPLICATION_DEPLOY_VISUAL_ASSETS)
            file(GLOB_RECURSE APPX_VISUAL_ASSETS ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_VISUAL_ASSETS}/*)
            
            foreach(DATA ${APPX_VISUAL_ASSETS})
                file(RELATIVE_PATH RELPATH ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_VISUAL_ASSETS} ${DATA})
                get_filename_component(RES_LOC ${RELPATH} PATH)
                
                set_source_files_properties(${DATA} PROPERTIES VS_DEPLOYMENT_CONTENT 1)
                
                string(REPLACE "/" "\\" ide_group_name "AppXVisualAssets/${RES_LOC}")
                source_group(${ide_group_name} FILES ${DATA})
            endforeach()
            
            SET(SRC_FILES ${SRC_FILES} ${APPX_VISUAL_ASSETS})
        endif()
        
        if(MENGINE_APPLICATION_DEPLOY_DATA)
            file(GLOB_RECURSE APPX_DATA ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_DATA}/*)
            
            foreach(DATA ${APPX_DATA})
                file(RELATIVE_PATH RELPATH ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_DATA} ${DATA})
                get_filename_component(RES_LOC ${RELPATH} PATH)
                
                set_source_files_properties(${DATA} PROPERTIES VS_DEPLOYMENT_CONTENT 1)
                set_source_files_properties(${DATA} PROPERTIES VS_DEPLOYMENT_LOCATION "${RES_LOC}")
                
                string(REPLACE "/" "\\" ide_group_name "AppXData/${RES_LOC}")
                source_group(${ide_group_name} FILES ${DATA})
            endforeach()

            SET(SRC_FILES ${SRC_FILES} ${APPX_DATA})
        endif()
    endif()
    
    ADD_MENGINE_EXECUTABLE_WIN32()
    
    if(MENGINE_DEPLOY_PATH)
        if(EXISTS "${MENGINE_DEPLOY_PATH}/project_deploy.cmake")
            include("${MENGINE_DEPLOY_PATH}/project_deploy.cmake")
        endif()
    endif()
endif()

if(MENGINE_TARGET_UNIX)
    ADD_MENGINE_EXECUTABLE_UNIX()
endif()

if(MENGINE_TARGET_ANDROID)
    ADD_MENGINE_EXECUTABLE_ANDROID()
endif()

if(MENGINE_TARGET_APPLE)
	set(MENGINE_APPLE_RESOURCES)
	
    macro(ADD_APPLE_RESOURCES_FOLDER FOLDER)
        file(GLOB_RECURSE FILES ${MENGINE_DEPLOY_PATH}/${FOLDER}/*)
        list(FILTER FILES EXCLUDE REGEX ".*.DS_Store$")
        foreach(FILE ${FILES})
            file(RELATIVE_PATH RES ${MENGINE_DEPLOY_PATH}/${FOLDER} ${FILE})
            get_filename_component(RES_LOC ${RES} PATH)
            
            set_source_files_properties(${FILE} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources/Data/${RES_LOC}" HEADER_FILE_ONLY TRUE)
            string(REPLACE "/" "\\" ide_group_name "deploy_data/${RES_LOC}")
            source_group(${ide_group_name} FILES ${FILE})
        endforeach()

        MESSAGE("Add data: ${MENGINE_DEPLOY_PATH}/${FOLDER}")
        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${FILES})
    endmacro()
    
    if(MENGINE_DEPLOY_PATH)
        if(EXISTS "${MENGINE_DEPLOY_PATH}/project_prepare.cmake")
            include("${MENGINE_DEPLOY_PATH}/project_prepare.cmake")
        endif()
    endif()
    
    MESSAGE("MENGINE_APPLICATION_DEPLOY_PLIST: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_PLIST}")
    
    get_filename_component(MENGINE_APPLICATION_DEPLOY_PLIST_PATH ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_PLIST} PATH)
    get_filename_component(MENGINE_APPLICATION_DEPLOY_PLIST_NAME ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_PLIST} NAME)

    message("MENGINE_APPLICATION_DEPLOY_PLIST_PATH: ${MENGINE_APPLICATION_DEPLOY_PLIST_PATH}")
    message("MENGINE_APPLICATION_DEPLOY_PLIST_NAME: ${MENGINE_APPLICATION_DEPLOY_PLIST_NAME}")
    
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${MENGINE_APPLICATION_DEPLOY_PLIST_PATH})
    
    if(APPLICATION_APPLE_RESOURCES)
        foreach(RESOURCE ${APPLICATION_APPLE_RESOURCES})
	        MESSAGE("Add deploy resources: ${MENGINE_DEPLOY_PATH}/${RESOURCE}")
	        set_source_files_properties(${MENGINE_DEPLOY_PATH}/${RESOURCE} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
	        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${MENGINE_DEPLOY_PATH}/${RESOURCE})
	        source_group("deploy_resources" FILES ${MENGINE_DEPLOY_PATH}/${RESOURCE})
        endforeach()
    endif()
    
    if(MENGINE_APPLICATION_DEPLOY_ICONS)
        get_filename_component(MACOSX_BUNDLE_ICON_FILE ${MENGINE_APPLICATION_DEPLOY_ICONS} NAME)
        
        MESSAGE("Add deploy icons: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_ICONS}")
        set_source_files_properties(${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_ICONS} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_ICONS})
        source_group("deploy_icons" FILES ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_ICONS})
    endif()
    
    if(MENGINE_APPLICATION_DEPLOY_MEDIA)
        MESSAGE("Add deploy media: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_MEDIA}")
        set_source_files_properties(${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_MEDIA} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_MEDIA})
        source_group("deploy_media" FILES ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_MEDIA})
    endif()
        
    if(MENGINE_APPLICATION_DEPLOY_STORYBOARD)
        MESSAGE("Add deploy storyboard: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_STORYBOARD_RESOURCE}")
        file(GLOB_RECURSE FILES ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_STORYBOARD_RESOURCE}/*)
        list(FILTER FILES EXCLUDE REGEX ".*.DS_Store$")
        foreach(FILE ${FILES})
            set_source_files_properties(${FILE} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
            source_group("deploy_storyboard" FILES ${FILE})
	        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${FILE})
	    endforeach()
    endif()
    
    if(MENGINE_APPLICATION_DEPLOY_DATA)
        ADD_APPLE_RESOURCES_FOLDER(${MENGINE_APPLICATION_DEPLOY_DATA})
    endif()
    
    if(MENGINE_TARGET_MACOS)
        foreach(DYLIB ${APPLICATION_MACOS_DYLIB})
            MESSAGE("Add macos dylib: ${DYLIB}")
            set_source_files_properties(${DYLIB} PROPERTIES MACOSX_PACKAGE_LOCATION "MacOS")
            set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${DYLIB})
            source_group("deploy_dylib" FILES ${DYLIB})
        endforeach()
        
        foreach(DYLIB_WITH_SIGN ${APPLICATION_MACOS_DYLIB_WITH_SIGN})
            MESSAGE("Add macos dylib with sign: ${DYLIB_WITH_SIGN}")
            set_source_files_properties(${DYLIB_WITH_SIGN} PROPERTIES MACOSX_PACKAGE_LOCATION "MacOS")
            set_source_files_properties(${DYLIB_WITH_SIGN} PROPERTIES XCODE_FILE_ATTRIBUTES "CodeSignOnCopy")
            set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${DYLIB_WITH_SIGN})
            source_group("deploy_dylib_with_sign" FILES ${DYLIB_WITH_SIGN})
        endforeach()
    endif()
    
    MESSAGE("Bundle Version: ${MENGINE_BUILD_VERSION} [${MENGINE_BUILD_NUMBER}]")
    
    SET(SRC_FILES ${SRC_FILES} ${MENGINE_APPLE_RESOURCES})

    if(MENGINE_TARGET_IOS OR MENGINE_TARGET_IOS_SIMULATOR)
        ADD_MENGINE_EXECUTABLE_IOS()
    
        foreach(FRAMEWORK_NAME ${APPLICATION_APPLE_FRAMEWORK_WITH_PATH})
            set_target_properties(${PROJECT_NAME} PROPERTIES
                XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY ON
                XCODE_EMBED_FRAMEWORKS ${FRAMEWORK_NAME}
            )
        endforeach()
    
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CONFIGURATION_BUILD_DIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_SCHEME_WORKING_DIRECTORY "${CMAKE_INSTALL_PREFIX}")
    
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_TARGETED_DEVICE_FAMILY "1,2")
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_COMBINE_HIDPI_IMAGES NO)

        if(MENGINE_APPLICATION_DEPLOY_MEDIA)
            MESSAGE("MENGINE_APPLICATION_DEPLOY_MEDIA_APPICON_NAME: ${MENGINE_APPLICATION_DEPLOY_MEDIA_APPICON_NAME}")
            SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME ${MENGINE_APPLICATION_DEPLOY_MEDIA_APPICON_NAME})
			
			if(NOT MENGINE_APPLICATION_DEPLOY_STORYBOARD)
	            MESSAGE("MENGINE_APPLICATION_DEPLOY_MEDIA_LAUNCHIMAGE_NAME: ${MENGINE_APPLICATION_DEPLOY_MEDIA_LAUNCHIMAGE_NAME}")
				SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME ${MENGINE_APPLICATION_DEPLOY_MEDIA_LAUNCHIMAGE_NAME})
			endif()
        endif()
    elseif(MENGINE_TARGET_MACOS)
        ADD_MENGINE_EXECUTABLE_MACOSX()
    endif()

    MESSAGE("MENGINE_APPLICATION_DEPLOY_CODE_SIGN_ENTITLEMENTS: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_CODE_SIGN_ENTITLEMENTS}")

    if(MENGINE_APPLICATION_DEPLOY_CODE_SIGN_ENTITLEMENTS)
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CODE_SIGN_ENTITLEMENTS "${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_CODE_SIGN_ENTITLEMENTS}")
    endif()
    
    if(MENGINE_DEPLOY_PATH)
        if(EXISTS "${MENGINE_DEPLOY_PATH}/project_deploy.cmake")
            include("${MENGINE_DEPLOY_PATH}/project_deploy.cmake")
        endif()
    endif()
    
    get_target_property(MACOSX_BUNDLE_GUI_IDENTIFIER ${PROJECT_NAME} XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER)
    
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_GENERATE_DEBUGGING_SYMBOLS YES)

    if(MENGINE_BUILD_TYPE_DEBUG)
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL 0)
    else()
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL 3)
    endif()
    
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${MENGINE_APPLICATION_DEPLOY_PLIST_NAME})
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ENABLE_BITCODE ${MENGINE_XCODE_ENABLE_BITCODE})
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Release] "NO")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Debug] "YES")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_MARKETING_VERSION ${MENGINE_BUILD_VERSION})
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CURRENT_PROJECT_VERSION ${MENGINE_BUILD_NUMBER})
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT "dwarf-with-dsym")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CONFIGURATION_BUILD_DIR "$(inherited)")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_INSTALL_PATH "$(LOCAL_APPS_DIR)")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_SKIP_INSTALL NO)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_GENERATE_SCHEME TRUE)
    
    set(CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Release] NO CACHE STRING "CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH" FORCE)
    set(CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Debug] YES CACHE STRING "CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH" FORCE)

    MENGINE_GENERATE_COCOAPODS()
endif()

TARGET_LINK_LIBRARIES(${PROJECT_NAME} Kernel)

if(MENGINE_PLUGIN_MENGINE_STATIC)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} Mengine)
else()
    ADD_DEPENDENCIES(${PROJECT_NAME} Mengine)
endif()

if(MENGINE_TARGET_WINDOWS)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2-static${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})

    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
endif()

if(MENGINE_TARGET_UWP)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2-static${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
endif()

if(MENGINE_TARGET_APPLE)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} iconv)
endif()

if(MENGINE_TARGET_UNIX)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} pthread)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} dl)
endif()

IF(MENGINE_TARGET_IOS)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreData)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreAudio)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreVideo)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreMotion)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreBluetooth)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreHaptics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreGraphics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreTelephony)
    ADD_MENGINE_APPLE_FRAMEWORK(SystemConfiguration)
    ADD_MENGINE_APPLE_FRAMEWORK(AudioToolbox)
    ADD_MENGINE_APPLE_FRAMEWORK(AVFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(IOKit)
    ADD_MENGINE_APPLE_FRAMEWORK(UIKit)
	ADD_MENGINE_APPLE_FRAMEWORK(MessageUI)
    ADD_MENGINE_APPLE_FRAMEWORK(GameController)
    ADD_MENGINE_APPLE_FRAMEWORK(MediaPlayer)
    ADD_MENGINE_APPLE_FRAMEWORK(QuartzCore)
    ADD_MENGINE_APPLE_FRAMEWORK(Foundation)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenGLES)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenAL)
    ADD_MENGINE_APPLE_FRAMEWORK(Security)
    ADD_MENGINE_APPLE_FRAMEWORK(Metal)
    ADD_MENGINE_APPLE_FRAMEWORK(AdSupport)
ENDIF()

IF(MENGINE_TARGET_IOS_SIMULATOR)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreData)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreAudio)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreVideo)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreMotion)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreBluetooth)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreHaptics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreGraphics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreTelephony)
    ADD_MENGINE_APPLE_FRAMEWORK(SystemConfiguration)
    ADD_MENGINE_APPLE_FRAMEWORK(AudioToolbox)
    ADD_MENGINE_APPLE_FRAMEWORK(AVFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(IOKit)
    ADD_MENGINE_APPLE_FRAMEWORK(UIKit)
    ADD_MENGINE_APPLE_FRAMEWORK(GameController)
    ADD_MENGINE_APPLE_FRAMEWORK(MediaPlayer)
    ADD_MENGINE_APPLE_FRAMEWORK(QuartzCore)
    ADD_MENGINE_APPLE_FRAMEWORK(Foundation)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenGLES)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenAL)
    ADD_MENGINE_APPLE_FRAMEWORK(Security)
    ADD_MENGINE_APPLE_FRAMEWORK(Metal)
    ADD_MENGINE_APPLE_FRAMEWORK(AdSupport)
ENDIF()

IF(MENGINE_TARGET_MACOS)
    ADD_MENGINE_APPLE_FRAMEWORK(Cocoa)
    ADD_MENGINE_APPLE_FRAMEWORK(Carbon)
    ADD_MENGINE_APPLE_FRAMEWORK(AppKit)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreData)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreAudio)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreVideo)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreHaptics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreTelephony)
    ADD_MENGINE_APPLE_FRAMEWORK(AudioUnit)
    ADD_MENGINE_APPLE_FRAMEWORK(AudioToolBox)
    ADD_MENGINE_APPLE_FRAMEWORK(IOKit)
    ADD_MENGINE_APPLE_FRAMEWORK(ForceFeedback)
    ADD_MENGINE_APPLE_FRAMEWORK(Foundation)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenGL)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenAL)
    ADD_MENGINE_APPLE_FRAMEWORK(Security)
    ADD_MENGINE_APPLE_FRAMEWORK(Metal)
    ADD_MENGINE_APPLE_FRAMEWORK(SystemConfiguration)
    ADD_MENGINE_APPLE_FRAMEWORK(GameController)
ENDIF()

IF(MENGINE_TARGET_ANDROID)
    ADD_LIBRARY_IMPORTED(SDL_IMPORTED "${MENGINE_DEPENDENCIES_LIBRARY_OUTPUT_DIRECTORY}/libSDL2.so")
    
    target_link_libraries(${PROJECT_NAME}
        stdc++
        c
        m
        dl
        log
        android
        OpenSLES
        GLESv1_CM
        GLESv2
    )
ENDIF()

IF(MENGINE_TARGET_WINDOWS)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} Windows)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} Winmm.lib Version.lib Imm32.lib Setupapi.lib)
ENDIF()

IF(MENGINE_TARGET_UWP)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} WindowsApp)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} Winmm.lib Version.lib Imm32.lib Setupapi.lib)
ENDIF()

if(MENGINE_PLUGIN_MENGINE_STATIC)
    if(APPLICATION_LINK_LIBRARIES)
        TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${APPLICATION_LINK_LIBRARIES})
    endif()
    
    if(APPLICATION_DEPENDENCIES)
        ADD_DEPENDENCIES(${PROJECT_NAME} ${APPLICATION_DEPENDENCIES})
    endif()
endif()

IF(MENGINE_TOOLCHAIN_MSVC)
    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS /FORCE:MULTIPLE)
    
    set_property(DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
ENDIF()

IF(MENGINE_TARGET_APPLE)
    set_target_properties(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_OTHER_LDFLAGS "-ObjC")
ENDIF()