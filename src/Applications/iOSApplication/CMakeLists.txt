MENGINE_PROJECT_EXTRA_LANGUAGE(SDLApplication Swift)

SET(MENGINE_APPLE_APPLICATION_DELEGATE_STRING "")
    
foreach(DELEGATE ${APPLICATION_APPLE_APPLICATION_DELEGATE})
    STRING(APPEND MENGINE_APPLE_APPLICATION_DELEGATE_STRING "@\"${DELEGATE}\", ")
endforeach()
    
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/AppleApplicationDelegates.mm.in ${MENGINE_SOLUTIONS_CONFIG_DIR}/src/Configuration/AppleApplicationDelegates.mm @ONLY)

ADD_FILTER(
main
    iOSMain.mm
)

ADD_FILTER(
src
    iOSApplication.cpp
    iOSApplication.h
    iOSMessageBoxLogger.cpp
    iOSMessageBoxLogger.h
)

ADD_FILTER(
apple
    ${MENGINE_SOLUTIONS_CONFIG_DIR}/src/Configuration/iOSApplicationDelegates.mm
    iOSApplicationDelegates.h
)

ADD_FILTER(
ios
    iOSUIApplicationDelegate.mm
    iOSUIApplicationDelegate.h
		
    iOSLogger.mm
    iOSLogger.h
)

INCLUDE_DIRECTORIES(${THIRDPARTY_CONFIG_DIR}/SDL/include/include-config-$<LOWER_CASE:$<CONFIG>>)
INCLUDE_DIRECTORIES(${THIRDPARTY_CONFIG_DIR}/SDL/include)
INCLUDE_DIRECTORIES(${THIRDPARTY_DIR}/SDL/include)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

LINK_DIRECTORIES(${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})


set(MENGINE_APPLE_RESOURCES)

if(MENGINE_DEPLOY_PATH)
    if(EXISTS "${MENGINE_DEPLOY_PATH}/project_prepare.cmake")
        include("${MENGINE_DEPLOY_PATH}/project_prepare.cmake")
    endif()
endif()

MESSAGE("MENGINE_APPLICATION_DEPLOY_PLIST: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_PLIST}")

if(NOT EXISTS "${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_PLIST}")
    MESSAGE(FATAL_ERROR "Deploy plist path setup invalid path '${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_PLIST}'")
endif()

find_package(Python3 REQUIRED COMPONENTS Interpreter)

if(NOT Python3_Interpreter_FOUND)
    message(FATAL_ERROR "PythonInterp not found.")
endif()

set(MENGINE_MERGE_PLIST "${MENGINE_SOLUTIONS_CONFIG_DIR}/res/Configuration/info.plist.in")

if(APPLICATION_APPLE_SKADNETWORKITEMS_PLISTS)
    MESSAGE("APPLICATION_APPLE_SKADNETWORKITEMS_PLISTS: ${APPLICATION_APPLE_SKADNETWORKITEMS_PLISTS}")
    
    set(PYTHON_MERGE_PLISTS_SCRIPT "${CMAKE_CURRENT_SOURCE_DIR}/merge_skadnetworkitems_plists.py")

    execute_process(
        COMMAND ${Python3_EXECUTABLE} ${PYTHON_MERGE_PLISTS_SCRIPT} ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_PLIST} ${APPLICATION_APPLE_SKADNETWORKITEMS_PLISTS} ${MENGINE_MERGE_PLIST}
        RESULT_VARIABLE MENGINE_PROCESS_MERGE_PLISTS_RESULT
        OUTPUT_VARIABLE MENGINE_PROCESS_MERGE_PLISTS_OUTPUT
        ERROR_VARIABLE MENGINE_PROCESS_MERGE_PLISTS_ERROR
    )
    
    if(NOT MENGINE_PROCESS_MERGE_PLISTS_RESULT EQUAL 0)
        message(FATAL_ERROR "Python script failed with result: ${MENGINE_PROCESS_MERGE_PLISTS_RESULT} output: ${MENGINE_PROCESS_MERGE_PLISTS_OUTPUT} error: ${MENGINE_PROCESS_MERGE_PLISTS_ERROR}")
    else()
        message(STATUS "Python script executed successfully: ${MENGINE_MERGE_PLIST}")
    endif()
else()
    configure_file(${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_PLIST} ${MENGINE_MERGE_PLIST} COPYONLY)
endif()

if(NOT EXISTS ${MENGINE_MERGE_PLIST})
    message(FATAL_ERROR "File ${MENGINE_MERGE_PLIST} does not exist.")
endif()

get_filename_component(MENGINE_MERGE_PLIST_PATH ${MENGINE_MERGE_PLIST} PATH)
get_filename_component(MENGINE_MERGE_PLIST_NAME ${MENGINE_MERGE_PLIST} NAME)

message("MENGINE_MERGE_PLIST_PATH: ${MENGINE_MERGE_PLIST_PATH}")
message("MENGINE_MERGE_PLIST_NAME: ${MENGINE_MERGE_PLIST_NAME}")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${MENGINE_MERGE_PLIST_PATH})

if(APPLICATION_APPLE_RESOURCES)
    foreach(RESOURCE ${APPLICATION_APPLE_RESOURCES})
        MESSAGE("Add deploy resources: ${MENGINE_DEPLOY_PATH}/${RESOURCE}")
        set_source_files_properties(${MENGINE_DEPLOY_PATH}/${RESOURCE} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${MENGINE_DEPLOY_PATH}/${RESOURCE})
        source_group("deploy_resources" FILES ${MENGINE_DEPLOY_PATH}/${RESOURCE})
    endforeach()
endif()

if(MENGINE_APPLICATION_DEPLOY_ICONS)
    MESSAGE("Add deploy icons: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_ICONS}")
    
    if(NOT EXISTS "${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_ICONS}")
        MESSAGE(FATAL_ERROR "Deploy icons path setup invalid path '${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_ICONS}'")
    endif()
    
    set_source_files_properties(${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_ICONS} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
    set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_ICONS})
    source_group("deploy_icons" FILES ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_ICONS})
endif()

if(MENGINE_APPLICATION_DEPLOY_MEDIA)
    MESSAGE("Add deploy media: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_MEDIA}")
    
    if(NOT EXISTS "${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_MEDIA}")
        MESSAGE(FATAL_ERROR "Deploy media path setup invalid path '${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_MEDIA}'")
    endif()
    
    set_source_files_properties(${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_MEDIA} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
    set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_MEDIA})
    source_group("deploy_media" FILES ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_MEDIA})
endif()
    
if(MENGINE_APPLICATION_DEPLOY_STORYBOARD)
    MESSAGE("Add deploy storyboard: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_STORYBOARD_RESOURCE}")
    
    if(NOT EXISTS "${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_STORYBOARD_RESOURCE}")
        MESSAGE(FATAL_ERROR "Deploy storyboard path setup invalid path '${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_STORYBOARD_RESOURCE}'")
    endif()
    
    file(GLOB_RECURSE FILES ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_STORYBOARD_RESOURCE}/*)
    list(FILTER FILES EXCLUDE REGEX ".*.DS_Store$")
    foreach(FILE ${FILES})
        set_source_files_properties(${FILE} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
        source_group("deploy_storyboard" FILES ${FILE})
        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${FILE})
    endforeach()
endif()

if(MENGINE_APPLICATION_DEPLOY_DATA)
    if(NOT EXISTS "${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_DATA}")
        MESSAGE(FATAL_ERROR "Deploy data path setup invalid path '${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_DATA}'")
    endif()

    file(GLOB_RECURSE FILES ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_DATA}/*)
    list(FILTER FILES EXCLUDE REGEX ".*.DS_Store$")
    foreach(FILE ${FILES})
        file(RELATIVE_PATH RES ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_DATA} ${FILE})
        get_filename_component(RES_LOC ${RES} PATH)
        
        set_source_files_properties(${FILE} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources/Data/${RES_LOC}" HEADER_FILE_ONLY TRUE)
        string(REPLACE "/" "\\" ide_group_name "deploy_data/${RES_LOC}")
        source_group(${ide_group_name} FILES ${FILE})
    endforeach()

    MESSAGE("Add data: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_DATA}")
    set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${FILES})
endif()

MESSAGE("Bundle Version: ${MENGINE_BUILD_VERSION} [${MENGINE_BUILD_NUMBER}]")

SET(SRC_FILES ${SRC_FILES} ${MENGINE_APPLE_RESOURCES})

ADD_MENGINE_EXECUTABLE_IOS()

foreach(FRAMEWORK_NAME ${APPLICATION_APPLE_FRAMEWORK_WITH_PATH})
    set_target_properties(${PROJECT_NAME} PROPERTIES
        XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY ON
        XCODE_EMBED_FRAMEWORKS ${FRAMEWORK_NAME}
    )
endforeach()

SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CONFIGURATION_BUILD_DIR "$(inherited)")
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_SCHEME_WORKING_DIRECTORY "${CMAKE_INSTALL_PREFIX}")

SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_TARGETED_DEVICE_FAMILY "1,2")
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_COMBINE_HIDPI_IMAGES NO)

if(MENGINE_APPLICATION_DEPLOY_MEDIA)
    MESSAGE("MENGINE_APPLICATION_DEPLOY_MEDIA_APPICON_NAME: ${MENGINE_APPLICATION_DEPLOY_MEDIA_APPICON_NAME}")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME ${MENGINE_APPLICATION_DEPLOY_MEDIA_APPICON_NAME})

    if(NOT MENGINE_APPLICATION_DEPLOY_STORYBOARD)
        MESSAGE("MENGINE_APPLICATION_DEPLOY_MEDIA_LAUNCHIMAGE_NAME: ${MENGINE_APPLICATION_DEPLOY_MEDIA_LAUNCHIMAGE_NAME}")
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME ${MENGINE_APPLICATION_DEPLOY_MEDIA_LAUNCHIMAGE_NAME})
    endif()
endif()

MESSAGE("MENGINE_APPLICATION_DEPLOY_CODE_SIGN_ENTITLEMENTS: ${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_CODE_SIGN_ENTITLEMENTS}")

if(MENGINE_APPLICATION_DEPLOY_CODE_SIGN_ENTITLEMENTS)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CODE_SIGN_ENTITLEMENTS "${MENGINE_DEPLOY_PATH}/${MENGINE_APPLICATION_DEPLOY_CODE_SIGN_ENTITLEMENTS}")
endif()

if(MENGINE_DEPLOY_PATH)
    if(EXISTS "${MENGINE_DEPLOY_PATH}/project_deploy.cmake")
        include("${MENGINE_DEPLOY_PATH}/project_deploy.cmake")
    endif()
endif()

get_target_property(MACOSX_BUNDLE_GUI_IDENTIFIER ${PROJECT_NAME} XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER)

SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_GENERATE_DEBUGGING_SYMBOLS YES)

if(MENGINE_BUILD_TYPE_DEBUG)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL 0)
else()
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL 3)
endif()

if(MENGINE_APPLICATION_DEPLOY_ICONS)
    get_filename_component(MENGINE_APPLICATION_DEPLOY_ICONS_NAME ${MENGINE_APPLICATION_DEPLOY_ICONS} NAME)

    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_ICON_FILE ${MENGINE_APPLICATION_DEPLOY_ICONS_NAME})
endif()

SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${MENGINE_MERGE_PLIST_NAME})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ENABLE_BITCODE ${MENGINE_XCODE_ENABLE_BITCODE})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Release] "NO")
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Debug] "YES")
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_MARKETING_VERSION ${MENGINE_BUILD_VERSION})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CURRENT_PROJECT_VERSION ${MENGINE_BUILD_NUMBER})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT "dwarf-with-dsym")
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_INSTALL_PATH "$(LOCAL_APPS_DIR)")
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_SKIP_INSTALL NO)
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_GENERATE_SCHEME YES)
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE YES)

set(CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Release] NO CACHE STRING "CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH" FORCE)
set(CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Debug] YES CACHE STRING "CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH" FORCE)

MENGINE_GENERATE_COCOAPODS()

TARGET_LINK_LIBRARIES(${PROJECT_NAME} Kernel)

if(MENGINE_PLUGIN_MENGINE_STATIC)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} Mengine)
else()
    ADD_DEPENDENCIES(${PROJECT_NAME} Mengine)
endif()

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} iconv)

IF(MENGINE_TARGET_IOS)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreData)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreAudio)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreVideo)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreMotion)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreBluetooth)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreHaptics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreGraphics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreTelephony)
    ADD_MENGINE_APPLE_FRAMEWORK(SystemConfiguration)
    ADD_MENGINE_APPLE_FRAMEWORK(AudioToolbox)
    ADD_MENGINE_APPLE_FRAMEWORK(AVFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(IOKit)
    ADD_MENGINE_APPLE_FRAMEWORK(UIKit)
    ADD_MENGINE_APPLE_FRAMEWORK(MessageUI)
    ADD_MENGINE_APPLE_FRAMEWORK(GameController)
    ADD_MENGINE_APPLE_FRAMEWORK(MediaPlayer)
    ADD_MENGINE_APPLE_FRAMEWORK(QuartzCore)
    ADD_MENGINE_APPLE_FRAMEWORK(Foundation)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenGLES)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenAL)
    ADD_MENGINE_APPLE_FRAMEWORK(Security)
    ADD_MENGINE_APPLE_FRAMEWORK(Metal)
    ADD_MENGINE_APPLE_FRAMEWORK(AdSupport)
ENDIF()

IF(MENGINE_TARGET_IOS_SIMULATOR)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreData)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreAudio)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreVideo)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreMotion)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreBluetooth)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreHaptics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreGraphics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreTelephony)
    ADD_MENGINE_APPLE_FRAMEWORK(SystemConfiguration)
    ADD_MENGINE_APPLE_FRAMEWORK(AudioToolbox)
    ADD_MENGINE_APPLE_FRAMEWORK(AVFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(IOKit)
    ADD_MENGINE_APPLE_FRAMEWORK(UIKit)
    ADD_MENGINE_APPLE_FRAMEWORK(GameController)
    ADD_MENGINE_APPLE_FRAMEWORK(MediaPlayer)
    ADD_MENGINE_APPLE_FRAMEWORK(QuartzCore)
    ADD_MENGINE_APPLE_FRAMEWORK(Foundation)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenGLES)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenAL)
    ADD_MENGINE_APPLE_FRAMEWORK(Security)
    ADD_MENGINE_APPLE_FRAMEWORK(Metal)
    ADD_MENGINE_APPLE_FRAMEWORK(AdSupport)
ENDIF()

if(MENGINE_PLUGIN_MENGINE_STATIC)
    if(APPLICATION_LINK_LIBRARIES)
        TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${APPLICATION_LINK_LIBRARIES})
    endif()
    
    if(APPLICATION_DEPENDENCIES)
        ADD_DEPENDENCIES(${PROJECT_NAME} ${APPLICATION_DEPENDENCIES})
    endif()
endif()

set_target_properties(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_OTHER_LDFLAGS "-ObjC")