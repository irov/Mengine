#pragma once

#include "Config/Typedef.h"
#include "Config/Tuple.h"
#include "Config/Char.h"

#include "Kernel/ConstString.h"
#include "Kernel/Factory.h"
#include "Kernel/Factorable.h"
#include "Kernel/Resolution.h"

namespace Mengine
{
    typedef IntrusivePtr<class Resource> ResourcePtr;
    typedef IntrusivePtr<class Scene, class Node> ScenePtr;

    template<uint32_t ID>
    struct Notificator;

#define DECLARE_NOTIFICATOR(NAME, ...)\
	static const uint32_t NAME = __LINE__;\
	template<> struct Notificator<NAME> { typedef Tuple<__VA_ARGS__> args_type; }

    DECLARE_NOTIFICATOR( NOTIFICATOR_DEBUG_OPEN_FILE, const Char *, const Char *, bool );
    DECLARE_NOTIFICATOR( NOTIFICATOR_DEBUG_CLOSE_FILE, const Char *, const Char *, bool );
    DECLARE_NOTIFICATOR( NOTIFICATOR_DEBUG_CREATE_OBJECT, Factory *, Factorable *, const Char * );
    DECLARE_NOTIFICATOR( NOTIFICATOR_DEBUG_DESTROY_OBJECT, Factory *, Factorable * );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_WINDOW_RESOLUTION, bool, Resolution );
    DECLARE_NOTIFICATOR( NOTIFICATOR_DEVELOPMENT_RESOURCE_CREATE, ResourcePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_DEVELOPMENT_RESOURCE_COMPILE, Resource * );
    DECLARE_NOTIFICATOR( NOTIFICATOR_DEVELOPMENT_RESOURCE_RELEASE, Resource * );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_SCENE_PREPARE_DESTROY, ScenePtr, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_SCENE_DESTROY, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_SCENE_PREPARE_INITIALIZE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_SCENE_INITIALIZE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_SCENE_PREPARE_ENABLE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_SCENE_ENABLE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_SCENE_ENABLE_FINALLY, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_SCENE_PREPARE_COMPLETE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_SCENE_COMPLETE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RESTART_SCENE_PREPARE_DISABLE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RESTART_SCENE_DISABLE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RESTART_SCENE_INITIALIZE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RESTART_SCENE_PREPARE_ENABLE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RESTART_SCENE_ENABLE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RESTART_SCENE_ENABLE_FINALLY, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RESTART_SCENE_PREPARE_COMPLETE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RESTART_SCENE_COMPLETE, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_REMOVE_SCENE_PREPARE_DESTROY, ScenePtr );
    DECLARE_NOTIFICATOR( NOTIFICATOR_REMOVE_SCENE_DESTROY );
    DECLARE_NOTIFICATOR( NOTIFICATOR_REMOVE_SCENE_PREPARE_COMPLETE );
    DECLARE_NOTIFICATOR( NOTIFICATOR_REMOVE_SCENE_COMPLETE );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_LOCALE_PREPARE, ConstString, ConstString );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_LOCALE, ConstString, ConstString );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_LOCALE_POST, ConstString, ConstString );
    DECLARE_NOTIFICATOR( NOTIFICATOR_DEBUG_TEXT_MODE, bool );
    DECLARE_NOTIFICATOR( NOTIFICATOR_CHANGE_TEXT_ALIAS_ARGUMENTS, ConstString, ConstString );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RELOAD_LOCALE_PREPARE );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RELOAD_LOCALE );
    DECLARE_NOTIFICATOR( NOTIFICATOR_RELOAD_LOCALE_POST );
    DECLARE_NOTIFICATOR( NOTIFICATOR_ENGINE_FINALIZE );
    DECLARE_NOTIFICATOR( NOTIFICATOR_ENGINE_ENABLE_PACKAGES );

#undef DECLARE_NOTIFICATOR
}
