#pragma once

#include "Config/Typedef.h"
#include "Config/Char.h"
#include "Config/StatisticId.h"

#ifndef MENGINE_STATISTIC_MAX_COUNT
#define MENGINE_STATISTIC_MAX_COUNT 256
#endif

namespace Mengine
{
    //////////////////////////////////////////////////////////////////////////
    typedef uint32_t StatisticId;
    //////////////////////////////////////////////////////////////////////////
    template<StatisticId ID>
    struct Statistic
    {
        static const Char * getName()
        {
            return "UNDEFINED";
        }

        static bool isDefaultEnabled()
        {
            return false;
        }
    };
    //////////////////////////////////////////////////////////////////////////
#define MENGINE_STATISTIC_DECLARE_BEGIN()\
    static constexpr StatisticId MENGINE_STATISTIC_ENUMERATOR_BEGIN = MENGINE_CODE_LINE
        //////////////////////////////////////////////////////////////////////////
#define MENGINE_STATISTIC_DECLARE_END()\
    static constexpr StatisticId MENGINE_STATISTIC_ENUMERATOR_COUNT = MENGINE_CODE_LINE - MENGINE_STATISTIC_ENUMERATOR_BEGIN - 1;\
    static_assert(MENGINE_STATISTIC_ENUMERATOR_COUNT < MENGINE_STATISTIC_MAX_COUNT)
    //////////////////////////////////////////////////////////////////////////
#define MENGINE_STATISTIC_DECLARE(NAME, ENABLED)\
    static constexpr StatisticId NAME = MENGINE_CODE_LINE - MENGINE_STATISTIC_ENUMERATOR_BEGIN;\
    template<> struct Statistic<NAME> { static const Char * getName() { return #NAME; } static bool isDefaultEnabled() { return ENABLED; } }
    //////////////////////////////////////////////////////////////////////////
    MENGINE_STATISTIC_DECLARE_BEGIN();
    MENGINE_STATISTIC_DECLARE( STATISTIC_ALLOCATOR_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_ALLOCATOR_FREE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_ALLOCATOR_SIZE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_FILE_OPEN_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_FILE_READ_BYTES, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_FILE_WRITE_BYTES, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_HTTP_REQUEST_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_CURRENT_SCENE_NAME, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_FRAME_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_PERFRAME_DRAWINDEXPRIMITIVES, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_PERFRAME_FILLRATE, false );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_PERFRAME_OBJECTS, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_PERFRAME_TRIANGLES, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_PERFRAME_BATCHES, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_FRAMEBUFFER_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_FRAMEBUFFER_FREE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_FRAMEBUFFER_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_BUFFER_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_BUFFER_FREE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_BUFFER_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_FRAGMENT_SHADER_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_FRAGMENT_SHADER_FREE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_FRAGMENT_SHADER_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_SHADER_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_SHADER_FREE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_SHADER_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_ALLOC_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_ALLOC_FREE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_ALLOC_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_ALLOC_SIZE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_LOCK_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_LOCK_PIXEL, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_ALLOC_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_ALLOC_FREE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_ALLOC_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_ALLOC_SIZE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_LOCK_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_LOCK_SIZE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_ALLOC_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_ALLOC_FREE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_ALLOC_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_ALLOC_SIZE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_LOCK_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_LOCK_SIZE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_SOURCE_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_SOURCE_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_SOURCE_FREE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_BUFFER_COUNT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_BUFFER_NEW, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_BUFFER_FREE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_SILENT, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_FATAL, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_MESSAGE_RELEASE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_ERROR, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_WARNING, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_MESSAGE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_INFO, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_DEBUG, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_VERBOSE, true );
    MENGINE_STATISTIC_DECLARE( STATISTIC_ENGINE_LAST, false );
    MENGINE_STATISTIC_DECLARE_END();
    //////////////////////////////////////////////////////////////////////////
#undef MENGINE_STATISTIC_DECLARE_BEGIN
#undef MENGINE_STATISTIC_DECLARE_END
#undef MENGINE_STATISTIC_DECLARE
    //////////////////////////////////////////////////////////////////////////
}