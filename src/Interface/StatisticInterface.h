#pragma once

#include "Config/Typedef.h"
#include "Config/Char.h"
#include "Config/StatisticId.h"

#ifndef MENGINE_STATISTIC_MAX_COUNT
#define MENGINE_STATISTIC_MAX_COUNT 256
#endif

namespace Mengine
{
    //////////////////////////////////////////////////////////////////////////
    typedef uint32_t StatisticId;
    //////////////////////////////////////////////////////////////////////////
    template<StatisticId ID>
    struct Statistic
    {
        static const Char * getName()
        {
            return "UNDEFINED";
        }
    };
    //////////////////////////////////////////////////////////////////////////
#define MENGINE_STATISTIC_DECLARE_BEGIN()\
    static constexpr StatisticId MENGINE_STATISTIC_ENUMERATOR_BEGIN = MENGINE_CODE_LINE
        //////////////////////////////////////////////////////////////////////////
#define MENGINE_STATISTIC_DECLARE_END()\
    static constexpr StatisticId MENGINE_STATISTIC_ENUMERATOR_COUNT = MENGINE_CODE_LINE - MENGINE_STATISTIC_ENUMERATOR_BEGIN - 1;\
    static_assert(MENGINE_STATISTIC_ENUMERATOR_COUNT < MENGINE_STATISTIC_MAX_COUNT)
    //////////////////////////////////////////////////////////////////////////
#define MENGINE_STATISTIC_DECLARE(NAME)\
    static constexpr StatisticId NAME = MENGINE_CODE_LINE - MENGINE_STATISTIC_ENUMERATOR_BEGIN;\
    template<> struct Statistic<NAME> { static const Char * getName() { return #NAME; } }
    //////////////////////////////////////////////////////////////////////////
    MENGINE_STATISTIC_DECLARE_BEGIN();
    MENGINE_STATISTIC_DECLARE( STATISTIC_ALLOCATOR_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_ALLOCATOR_FREE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_ALLOCATOR_SIZE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_OPEN_FILE_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_OPEN_FILE_READ_BYTES );
    MENGINE_STATISTIC_DECLARE( STATISTIC_OPEN_FILE_WRITE_BYTES );
    MENGINE_STATISTIC_DECLARE( STATISTIC_CURRENT_SCENE_NAME );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_FRAME_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_PERFRAME_DRAWINDEXPRIMITIVES );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_PERFRAME_FILLRATE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_PERFRAME_OBJECTS );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_PERFRAME_TRIANGLES );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_PERFRAME_BATCHES );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_FRAMEBUFFER_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_FRAMEBUFFER_FREE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_FRAMEBUFFER_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_BUFFER_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_BUFFER_FREE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_OPENGL_BUFFER_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_FRAGMENT_SHADER_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_FRAGMENT_SHADER_FREE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_FRAGMENT_SHADER_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_SHADER_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_SHADER_FREE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_SHADER_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_ALLOC_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_ALLOC_FREE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_ALLOC_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_ALLOC_SIZE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_LOCK_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_TEXTURE_LOCK_PIXEL );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_ALLOC_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_ALLOC_FREE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_ALLOC_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_ALLOC_SIZE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_LOCK_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_INDEX_BUFFER_LOCK_SIZE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_ALLOC_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_ALLOC_FREE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_ALLOC_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_ALLOC_SIZE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_LOCK_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_RENDER_VERTEX_BUFFER_LOCK_SIZE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_SOURCE_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_SOURCE_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_SOURCE_FREE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_BUFFER_COUNT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_BUFFER_NEW );
    MENGINE_STATISTIC_DECLARE( STATISTIC_SOUND_BUFFER_FREE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_SILENT );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_FATAL );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_MESSAGE_RELEASE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_ERROR );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_WARNING );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_MESSAGE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_INFO );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_DEBUG );
    MENGINE_STATISTIC_DECLARE( STATISTIC_LOGGER_MESSAGE_VERBOSE );
    MENGINE_STATISTIC_DECLARE( STATISTIC_ENGINE_LAST );
    MENGINE_STATISTIC_DECLARE_END();
    //////////////////////////////////////////////////////////////////////////
#undef MENGINE_STATISTIC_DECLARE_BEGIN
#undef MENGINE_STATISTIC_DECLARE_END
#undef MENGINE_STATISTIC_DECLARE
    //////////////////////////////////////////////////////////////////////////
}