#include "Surface.h"

#include "Kernel/Logger.h"

namespace Mengine
{
    //////////////////////////////////////////////////////////////////////////
    Surface::Surface()
        : m_revision( 0 )
        , m_anchor( 0.f, 0.f )
    {
    }
    //////////////////////////////////////////////////////////////////////////
    Surface::~Surface()
    {
    }
    //////////////////////////////////////////////////////////////////////////
    void Surface::setAnchor( const mt::vec2f & _anchor )
    {
        m_anchor = _anchor;
    }
    //////////////////////////////////////////////////////////////////////////
    const mt::vec2f & Surface::getAnchor() const
    {
        return m_anchor;
    }
    //////////////////////////////////////////////////////////////////////////
    bool Surface::initialize()
    {
        bool successful = this->_initialize();

        return successful;
    }
    //////////////////////////////////////////////////////////////////////////
    void Surface::finalize()
    {
        this->_finalize();

        this->Materialable::releaseMaterial();
    }
    //////////////////////////////////////////////////////////////////////////
    bool Surface::_initialize()
    {
        //Empty;

        return true;
    }
    //////////////////////////////////////////////////////////////////////////
    void Surface::_finalize()
    {
        //Empty;
    }
    //////////////////////////////////////////////////////////////////////////
    void Surface::activate()
    {
        this->_activate();
    }
    //////////////////////////////////////////////////////////////////////////
    void Surface::deactivate()
    {
        this->_deactivate();
    }
    //////////////////////////////////////////////////////////////////////////
    void Surface::_activate()
    {
        //Empty
    }
    //////////////////////////////////////////////////////////////////////////
    void Surface::_deactivate()
    {
        //Empty
    }
    //////////////////////////////////////////////////////////////////////////
    uint32_t Surface::update( const UpdateContext * _context )
    {
        this->_update( _context );

        return m_revision;
    }
    //////////////////////////////////////////////////////////////////////////
    void Surface::_update( const UpdateContext * _context )
    {
        MENGINE_UNUSED( _context );

        //Empty
    }
    //////////////////////////////////////////////////////////////////////////
    void Surface::_invalidateMaterial() const
    {
        ++m_revision;
    }
}