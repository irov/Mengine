#	include "NodeProxy.h"

namespace Menge
{
	//////////////////////////////////////////////////////////////////////////
	NodeProxy::NodeProxy( Node * _node)
	: m_node(_node)
	{
	}
	//////////////////////////////////////////////////////////////////////////
	NodeProxy::~NodeProxy()
	{
		
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::destroy()
	{
		return m_node->destroy();
	}
	//////////////////////////////////////////////////////////////////////////
	bool NodeProxy::activate()
	{
		return m_node->activate();
	};
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::deactivate()
	{
		return m_node->deactivate();
	};
	//////////////////////////////////////////////////////////////////////////
	bool NodeProxy::isActive()
	{
		return m_node->isActive();
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::setName(const std::string &_name)
	{
		return m_node->setName(_name);
	}
	//////////////////////////////////////////////////////////////////////////
	const std::string & NodeProxy::getName()const
	{
		return m_node->getName();
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::setType( const type_info * _type)
	{
		return m_node->setType(_type);
	}
	//////////////////////////////////////////////////////////////////////////
	const type_info * NodeProxy::getType()const
	{
		return m_node->getType();
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::update(float _timing)
	{
		return m_node->update(_timing);
	};
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::loader(TiXmlElement * _xml)
	{
		return m_node->loader(_xml);
	}
	////////////////////////////////////////////////////////////////////////////
	//void NodeProxy::registerEvent( const std::string &_name, PyObject * _func  )
	//{
	//	return m_node->registerEvent(_name,_func);
	//}
	////////////////////////////////////////////////////////////////////////////
	//PyObject * NodeProxy::getEvent( const std::string &_name )
	//{
	//	return m_node->getEvent(_name);
	//}
	//////////////////////////////////////////////////////////////////////////
	//void NodeProxy::setScriptable( PyObject * _scriptable )
	//{
	//	return m_node->setScriptable( _scriptable );
	//}
	////////////////////////////////////////////////////////////////////////////
	//PyObject * NodeProxy::getScriptable()
	//{
	//	return m_node->getScriptable();
	//}
	////////////////////////////////////////////////////////////////////////////
	//bool NodeProxy::isScriptable() const
	//{
	//	return m_node->isScriptable();
	//}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::debugRender()
	{
		return m_node->debugRender();
	}
}