#	include "NodeProxy.h"

namespace Menge
{
	//////////////////////////////////////////////////////////////////////////
	NodeProxy::NodeProxy( Node * _node)
	: m_node(_node)
	{
	}
	//////////////////////////////////////////////////////////////////////////
	NodeProxy::~NodeProxy()
	{
		
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::destroy()
	{
		m_node->destroy();

		delete this;
	}
	//////////////////////////////////////////////////////////////////////////
	bool NodeProxy::activate()
	{
		return m_node->activate();
	};
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::deactivate()
	{
		return m_node->deactivate();
	};
	//////////////////////////////////////////////////////////////////////////
	bool NodeProxy::isActive()
	{
		return m_node->isActive();
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::setName(const std::string &_name)
	{
		return m_node->setName(_name);
	}
	//////////////////////////////////////////////////////////////////////////
	const std::string & NodeProxy::getName()const
	{
		return m_node->getName();
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::setType( const std::string & _type)
	{
		return m_node->setType(_type);
	}
	//////////////////////////////////////////////////////////////////////////
	const std::string & NodeProxy::getType()const
	{
		return m_node->getType();
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::update( size_t _timing, const Viewport & _viewport )
	{
		return m_node->update( _timing, _viewport );
	};
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::loader(TiXmlElement * _xml)
	{
		return m_node->loader(_xml);
	}
	void NodeProxy::setParent( Node * _node )
	{
		return m_node->setParent( _node );
	}
	//////////////////////////////////////////////////////////////////////////
	bool NodeProxy::addChildren( Node * _node )
	{
		return m_node->addChildren( _node );
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::removeChildren( Node * _node )
	{
		return m_node->removeChildren( _node );
	}
	//////////////////////////////////////////////////////////////////////////
	Node * NodeProxy::getChildren( const std::string & _name, bool _recursion )
	{
		return m_node->getChildren( _name, _recursion );
	}
	//////////////////////////////////////////////////////////////////////////
	bool NodeProxy::isChildren( Node * _node )
	{
		return m_node->isChildren( _node );
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::foreachChildren( const NodeForeach & _foreach )
	{
		return m_node->foreachChildren( _foreach );
	}
	//////////////////////////////////////////////////////////////////////////
	Scriptable * NodeProxy::getScriptable()
	{
		return m_node->getScriptable();
	}
	//////////////////////////////////////////////////////////////////////////
	void NodeProxy::debugRender()
	{
		return m_node->debugRender();
	}
}