#	include "Playlist.h"

#	include "XmlParser/XmlParser.h"

#	include "FileEngine.h"

namespace Menge
{
	//////////////////////////////////////////////////////////////////////////
	Playlist::Playlist( const std::string& _playlistName )
		: m_playListName( _playlistName )
		, m_loop( false )
	{
	}
	//////////////////////////////////////////////////////////////////////////
	Playlist::~Playlist()
	{
	}
	//////////////////////////////////////////////////////////////////////////
	void Playlist::setLooped( bool _loop )
	{
		m_loop = _loop;
	}
	//////////////////////////////////////////////////////////////////////////
	bool Playlist::getLooped() const
	{
		return m_loop;
	}
	//////////////////////////////////////////////////////////////////////////
	bool Playlist::isEnded() const
	{
		return m_currentSong == m_tracks.end();
	}
	//////////////////////////////////////////////////////////////////////////
	void Playlist::shuffle()
	{
		for(size_t i = 0; i < m_tracks.size(); ++i) 
		{
			size_t rnd = rand() % m_tracks.size();
			std::swap( m_tracks[ i ], m_tracks[ rnd ] );
		}
	}
	//////////////////////////////////////////////////////////////////////////
	void Playlist::nextSong()
	{
		if ( ++m_currentSong == m_tracks.end() && m_loop == true )
		{
			m_currentSong = m_tracks.begin();
		}
	}
	//////////////////////////////////////////////////////////////////////////
	void Playlist::prevSong()
	{
		if(m_currentSong == m_tracks.begin())
		{
			m_currentSong = m_tracks.end();
		}
		--m_currentSong;
	}
	//////////////////////////////////////////////////////////////////////////
	void Playlist::firstSong()
	{
		m_currentSong = m_tracks.begin();
	}
	//////////////////////////////////////////////////////////////////////////
	void Playlist::lastSong()
	{
		m_currentSong = m_tracks.end() - 1;
	}
	//////////////////////////////////////////////////////////////////////////
	const std::string&	Playlist::getCurrentSongName() const
	{
		return	*m_currentSong;
	}
	//////////////////////////////////////////////////////////////////////////
	const std::string&	Playlist::getName() const
	{
		return	m_playListName;
	}
	//////////////////////////////////////////////////////////////////////////
	void Playlist::addTrack( const std::string & _track )
	{
		m_tracks.push_back( _track );		
	}
	//////////////////////////////////////////////////////////////////////////
	void Playlist::clear()
	{
		m_tracks.clear();
	}
	//////////////////////////////////////////////////////////////////////////
}