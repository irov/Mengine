#	include "SoundSystemInterface.h"
#	include "XmlParser.h"
#	include "Sound.h"
#	include "SoundEngine.h"
#	include "ObjectImplement.h"

//////////////////////////////////////////////////////////////////////////
OBJECT_IMPLEMENT(Sound);
//////////////////////////////////////////////////////////////////////////
Sound::Sound()
	: m_interface(NULL)
{}
//////////////////////////////////////////////////////////////////////////
void		Sound::play()
{
	m_interface->play();
}
//////////////////////////////////////////////////////////////////////////
void		Sound::pause()
{
	m_interface->pause();
}
//////////////////////////////////////////////////////////////////////////
void		Sound::stop()
{
	m_interface->stop();
}
//////////////////////////////////////////////////////////////////////////
void		Sound::setSoundSourceInterface(SoundSourceInterface* _ssi)
{
	m_interface = _ssi;
}
//////////////////////////////////////////////////////////////////////////
void		Sound::setLooped(bool _flag)
{
	m_interface->setLooped(_flag);
}
//////////////////////////////////////////////////////////////////////////
bool		Sound::getLooped() const
{
	return	m_interface->getLooped();
}
//////////////////////////////////////////////////////////////////////////
void		Sound::setVolume(float _value)
{
	m_interface->setVolume(_value);
}
//////////////////////////////////////////////////////////////////////////
float		Sound::getVolume() const
{
	return	m_interface->getVolume();
}
//////////////////////////////////////////////////////////////////////////
void		Sound::setPosition(const float* _position)
{
	m_interface->setPosition(_position);
}
//////////////////////////////////////////////////////////////////////////
const float*	Sound::getPosition() const
{
	return m_interface->getPosition();
}
//////////////////////////////////////////////////////////////////////////
void		Sound::setDistance(float dist)
{
	m_interface->setDistance(dist);
}
//////////////////////////////////////////////////////////////////////////
float		Sound::getDistance() const
{
	return m_interface->getDistance();
}
//////////////////////////////////////////////////////////////////////////
void		Sound::setHeadMode(bool flag)
{
	m_interface->setHeadMode(flag);
}
//////////////////////////////////////////////////////////////////////////
bool		Sound::updateSoundBuffer()
{
	return m_interface->updateSoundBuffer();
}
//////////////////////////////////////////////////////////////////////////
bool		Sound::getHeadMode() const
{
	return	m_interface->getHeadMode();
}
//////////////////////////////////////////////////////////////////////////
void		Sound::_update(float _timing)
{
}
//////////////////////////////////////////////////////////////////////////
void		Sound::loader(TiXmlElement * xml)
{
	XML_FOR_EACH_TREE(xml)
	{
		XML_CHECK_VALUE_NODE("Filename","Value",m_filename);
	}
}
//////////////////////////////////////////////////////////////////////////
bool		Sound::_compile()
{
	return	Keeper<SoundEngine>::hostage()->addSound(this,m_filename);
}
//////////////////////////////////////////////////////////////////////////
void		Sound::_release()
{
	Keeper<SoundEngine>::hostage()->deleteSound(m_filename);
}