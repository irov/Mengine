#include "cURLHttpResponse.h"

namespace Mengine
{
    //////////////////////////////////////////////////////////////////////////
    cURLHttpResponse::cURLHttpResponse()
        : m_requestId( 0 )
        , m_code( HTTP_OK )
        , m_successful( false )
    {
    }
    //////////////////////////////////////////////////////////////////////////
    cURLHttpResponse::~cURLHttpResponse()
    {
    }
    //////////////////////////////////////////////////////////////////////////
    void cURLHttpResponse::setRequestId( HttpRequestId _requestId )
    {
        m_requestId = _requestId;
    }
    //////////////////////////////////////////////////////////////////////////
    HttpRequestId cURLHttpResponse::getRequestId() const
    {
        return m_requestId;
    }
    //////////////////////////////////////////////////////////////////////////
    void cURLHttpResponse::appendHeaders( const Char * _ptr, size_t _size )
    {
        m_headers.emplace_back( _ptr, _size );
    }
    //////////////////////////////////////////////////////////////////////////
    const HttpRequestHeaders & cURLHttpResponse::getHeaders() const
    {
        return m_headers;
    }
    //////////////////////////////////////////////////////////////////////////
    void cURLHttpResponse::appendData( const Char * _ptr, size_t _size )
    {
        m_data.append( _ptr, _size );
    }
    //////////////////////////////////////////////////////////////////////////
    const String & cURLHttpResponse::getData() const
    {
        return m_data;
    }
    //////////////////////////////////////////////////////////////////////////
    void cURLHttpResponse::setCode( EHttpCode _code )
    {
        m_code = _code;
    }
    //////////////////////////////////////////////////////////////////////////
    EHttpCode cURLHttpResponse::getCode() const
    {
        return m_code;
    }
    //////////////////////////////////////////////////////////////////////////
    void cURLHttpResponse::setError( const String & _error )
    {
        m_error = _error;
    }
    //////////////////////////////////////////////////////////////////////////
    const String & cURLHttpResponse::getError() const
    {
        return m_error;
    }
    //////////////////////////////////////////////////////////////////////////
    void cURLHttpResponse::setSuccessful( bool _successful )
    {
        m_successful = _successful;
    }
    //////////////////////////////////////////////////////////////////////////
    bool cURLHttpResponse::isSuccessful() const
    {
        return m_successful;
    }
    //////////////////////////////////////////////////////////////////////////
}