if(MENGINE_TARGET_IOS)
    MENGINE_PROJECT_EXTRA_LANGUAGE(SDLApplication Swift)
elseif(MENGINE_TARGET_IOS_SIMULATOR)
    MENGINE_PROJECT_EXTRA_LANGUAGE(SDLApplication Swift)
else()
    MENGINE_PROJECT(SDLApplication)
endif()

SET(MENGINE_XCODE_DEPLOY_PATH "Desktop" CACHE STRING "Mengine Xcode deploy path")

MESSAGE("MENGINE_XCODE_DEPLOY_PATH: ${MENGINE_XCODE_DEPLOY_PATH}")

if(MENGINE_TARGET_IOS)
    SET(MENGINE_APPLE_APPLICATION_DELEGATE_STRING "")
    
    foreach(DELEGATE ${APPLICATION_APPLE_APPLICATION_DELEGATE})
        STRING(APPEND MENGINE_APPLE_APPLICATION_DELEGATE_STRING "@\"${DELEGATE}\", ")
    endforeach()
    
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/MengineUIKitAppDelegate.mm.in ${CMAKE_CURRENT_SOURCE_DIR}/MengineUIKitAppDelegate.mm @ONLY)
endif()

ADD_FILTER(
main
    main.cpp
)

ADD_FILTER(
src
    SDLApplication.cpp
    SDLApplication.h
    SDLMessageBoxLogger.cpp
    SDLMessageBoxLogger.h
    SDLStdioLogger.cpp
    SDLStdioLogger.h
)

if(MENGINE_TOOLCHAIN_MSVC)
    ADD_FILTER(
    OutputDebugLogger
        SDLOutputDebugLogger.cpp
        SDLOutputDebugLogger.h
    )
endif()

if(MENGINE_WINDOWS_UNIVERSAL)
    ADD_FILTER(
    EntryPoint
        SDLUWPEntryPoint.cpp
        SDLUWPResources.rc
        SDLUWPResource_BlankCursor.cur
    )

    SET_SOURCE_FILES_PROPERTIES(SDLUWPEntryPoint.cpp PROPERTIES COMPILE_FLAGS /ZW)
endif()

if(MENGINE_WINDOWS_UNIVERSAL)
    ADD_FILTER(
    AppXManifest
        Package.appxmanifest
    )
endif()

if(MENGINE_TARGET_IOS)
    ADD_FILTER(
    ios
        MengineUIKitAppDelegate.mm
        MengineUIKitAppDelegate.h
    )
endif()

if(MENGINE_TARGET_ANDROID)
    ADD_FILTER(
    android
        AndroidLogger.cpp
        AndroidLogger.h
    )
endif()

include_directories(${THIRDPARTY_CONFIG_DIR}/SDL)
INCLUDE_DIRECTORIES(${THIRDPARTY_DIR}/SDL2/include)

LINK_DIRECTORIES(${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})

if(MENGINE_TARGET_WINDOWS)
    set(CMAKE_CXX_STACK_SIZE 4194304)
    
    ADD_EXECUTABLE(${PROJECT_NAME} WIN32 ${SRC_FILES})
endif()

if(MENGINE_TARGET_UNIX)
    ADD_EXECUTABLE(${PROJECT_NAME} ${SRC_FILES})
endif()

if(MENGINE_TARGET_ANDROID)
    ADD_LIBRARY(${PROJECT_NAME} SHARED ${SRC_FILES})
endif()

if((MENGINE_TARGET_IOS OR MENGINE_TARGET_IOS_SIMULATOR) AND NOT MENGINE_BUILD_ONLY_EXECUTABLE_MODULE)
    include("${MENGINE_XCODE_DEPLOY_PATH}/project_ios_prepare.cmake")
    
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${MENGINE_XCODE_DEPLOY_PATH}/deploy-ios-plist")
    
    set(MENGINE_IOS_RESOURCES)

    if(MENGINE_IOS_RESOURCE_MEDIA)
        set_source_files_properties(${MENGINE_IOS_RESOURCE_MEDIA} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
		MESSAGE("MENGINE_IOS_RESOURCE_MEDIA: ${MENGINE_IOS_RESOURCE_MEDIA}")
        set(MENGINE_IOS_RESOURCES ${MENGINE_IOS_RESOURCES} ${MENGINE_IOS_RESOURCE_MEDIA})
    endif()
        
    if(MENGINE_IOS_RESOURCE_STORYBOARD)
        set_source_files_properties(${MENGINE_IOS_RESOURCE_STORYBOARD} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
		MESSAGE("MENGINE_IOS_RESOURCE_STORYBOARD: ${MENGINE_IOS_RESOURCE_STORYBOARD}")
        set(MENGINE_IOS_RESOURCES ${MENGINE_IOS_RESOURCES} ${MENGINE_IOS_RESOURCE_STORYBOARD})
    endif()

    if(MENGINE_IOS_RESOURCE_DATA)
        set(DEPLOY_DATA "${MENGINE_XCODE_DEPLOY_PATH}/deploy-ios-data")
        file(GLOB_RECURSE MENGINE_IOS_RESOURCE_DATA_CORRECT "${MENGINE_IOS_RESOURCE_DATA}/*")
        list(FILTER MENGINE_IOS_RESOURCE_DATA_CORRECT EXCLUDE REGEX ".*.DS_Store$")
        foreach(DATA ${MENGINE_IOS_RESOURCE_DATA_CORRECT})
            file(RELATIVE_PATH RES ${MENGINE_IOS_RESOURCE_DATA} ${DATA})
            get_filename_component(RES_LOC ${RES} PATH)
            
            set_source_files_properties(${DATA} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources/${RES_LOC}" HEADER_FILE_ONLY 1)
            string(REPLACE "/" "\\" ide_group_name "Data/${RES_LOC}")
            source_group(${ide_group_name} FILES ${DATA})
        endforeach()

     	MESSAGE("MENGINE_IOS_RESOURCE_DATA_CORRECT: ${MENGINE_IOS_RESOURCE_DATA_CORRECT}")
        
        set(MENGINE_IOS_RESOURCES ${MENGINE_IOS_RESOURCES} ${MENGINE_IOS_RESOURCE_DATA_CORRECT})
    endif()

    string(TIMESTAMP MACOSX_FRAMEWORK_BUNDLE_VERSION "%Y.%m.%d.%H%M%S")
    string(TIMESTAMP MACOSX_FRAMEWORK_SHORT_VERSION_STRING "%Y.%m.%d")
	
	MESSAGE("MENGINE_IOS_RESOURCES: ${MENGINE_IOS_RESOURCES}")

    ADD_EXECUTABLE(${PROJECT_NAME} MACOSX_BUNDLE ${MENGINE_IOS_RESOURCES} ${SRC_FILES})

    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_INSTALL_PATH "$(LOCAL_APPS_DIR)")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_SKIP_INSTALL NO)
    
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CONFIGURATION_BUILD_DIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_SCHEME_WORKING_DIRECTORY "${CMAKE_INSTALL_PREFIX}")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_GENERATE_SCHEME TRUE)
    
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_OTHER_CODE_SIGN_FLAGS "--deep")

    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_TARGETED_DEVICE_FAMILY "1,2")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_COMBINE_HIDPI_IMAGES NO)

    if(MENGINE_IOS_RESOURCE_MEDIA)
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME ${MENGINE_IOS_RESOURCE_MEDIA_APPICON_NAME})
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME ${MENGINE_IOS_RESOURCE_MEDIA_LAUNCHIMAGE_NAME})
    endif()
    
    include("${MENGINE_XCODE_DEPLOY_PATH}/project_ios_deploy.cmake")
    
    get_target_property(MACOSX_BUNDLE_GUI_IDENTIFIER ${PROJECT_NAME} XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER)

    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST info.plist.in)    
endif()

if((MENGINE_TARGET_IOS OR MENGINE_TARGET_IOS_SIMULATOR) AND MENGINE_BUILD_ONLY_EXECUTABLE_MODULE)
    ADD_EXECUTABLE(${PROJECT_NAME} MACOSX_BUNDLE ${SRC_FILES})
endif()

if(MENGINE_TARGET_MACOS)
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${MENGINE_XCODE_DEPLOY_PATH}/deploy-mac-plist")

    set(myApp_ICONS "${MENGINE_XCODE_DEPLOY_PATH}/deploy-mac-icons.icns")
    set_source_files_properties(${myApp_ICONS} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")

    if(MENGINE_PLUGIN_ASTRALAX)
        set(myApp_ASTRALAX "${THIRDPARTY_DIR}/astralax_mac/magic3d.dylib")
        set_source_files_properties(${myApp_ASTRALAX} PROPERTIES MACOSX_PACKAGE_LOCATION "MacOS")
        set_source_files_properties(${myApp_ASTRALAX} PROPERTIES XCODE_FILE_ATTRIBUTES "CodeSignOnCopy")
    else()
        set(myApp_ASTRALAX)
    endif()

    if(MENGINE_PLUGIN_STEAM)
        set(myApp_STEAM "${THIRDPARTY_DIR}/steam/redistributable_bin/osx/libsteam_api.dylib")
        set_source_files_properties(${myApp_STEAM} PROPERTIES MACOSX_PACKAGE_LOCATION "MacOS")
    else()
        set(myApp_STEAM)
    endif()
    
    set(DEPLOY_DATA "${MENGINE_XCODE_DEPLOY_PATH}/deploy-mac-data")
    file(GLOB_RECURSE myApp_DATAS "${DEPLOY_DATA}/*")
    list(FILTER myApp_DATAS EXCLUDE REGEX ".*.DS_Store$")
    foreach(myApp_DATA ${myApp_DATAS})
        file(RELATIVE_PATH RES ${DEPLOY_DATA} ${myApp_DATA})
        get_filename_component(RES_LOC ${RES} PATH)

        set_source_files_properties(${myApp_DATA} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources/${RES_LOC}" HEADER_FILE_ONLY 1)
        string(REPLACE "/" "\\" ide_group_name "Resources/${RES_LOC}")
        source_group(${ide_group_name} FILES ${myApp_DATA})
    endforeach()
    
    string(TIMESTAMP MACOSX_FRAMEWORK_BUNDLE_VERSION "%Y.%m.%d.%H%M%S")
    string(TIMESTAMP MACOSX_FRAMEWORK_SHORT_VERSION_STRING "%Y.%m.%d")

    set(CMAKE_C_FLAGS "$(inherited) ${CMAKE_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "$(inherited) ${CMAKE_CXX_FLAGS}")

    ADD_EXECUTABLE(${PROJECT_NAME} MACOSX_BUNDLE ${myApp_DATAS} ${myApp_ICONS} ${myApp_ASTRALAX} ${myApp_STEAM} ${SRC_FILES})

    target_link_libraries(${PROJECT_NAME} $(inherited))

    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_INSTALL_PATH "$(LOCAL_APPS_DIR)")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_SKIP_INSTALL NO)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_GENERATE_SCHEME TRUE)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_OTHER_CODE_SIGN_FLAGS "--deep")

    include("${MENGINE_XCODE_DEPLOY_PATH}/project_mac_deploy.cmake")

    get_target_property(MACOSX_BUNDLE_GUI_IDENTIFIER ${PROJECT_NAME} XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST info.plist.in)
endif()

if(MENGINE_TARGET_APPLE)
    SET(PODFILE_BUFFER "")
    
    STRING(APPEND PODFILE_BUFFER "project '${MENGINE_PROJECT_NAME}.xcodeproj'\n")
    
    if(MENGINE_TARGET_MACOS)
        STRING(APPEND PODFILE_BUFFER "platform :macos, '${CMAKE_OSX_DEPLOYMENT_TARGET}'\n")
    endif()
    
    if(MENGINE_TARGET_IOS OR MENGINE_TARGET_IOS_SIMULATOR)
        STRING(APPEND PODFILE_BUFFER "platform :ios, '${CMAKE_OSX_DEPLOYMENT_TARGET}'\n")
    endif()
    
    STRING(APPEND PODFILE_BUFFER "inhibit_all_warnings!\n")
    STRING(APPEND PODFILE_BUFFER "\n")

    SET(LENGTH_APPLICATION_APPLE_COCOAPODS)
    list(LENGTH APPLICATION_APPLE_COCOAPODS LENGTH_APPLICATION_APPLE_COCOAPODS)
    
    math(EXPR LENGTH_APPLICATION_APPLE_COCOAPODS "${LENGTH_APPLICATION_APPLE_COCOAPODS}-1")
    
    SET(APPLICATION_APPLE_COCOAPODS_PROJECTS)
    
    foreach(COCOAPODS_INDEX RANGE 0 ${LENGTH_APPLICATION_APPLE_COCOAPODS} 4)
        SET(COCOAPOD_PROJECT_NAME)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_PROJECT_NAME)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
    
        SET(COCOAPOD_NAME)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_NAME)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
        
        SET(COCOAPOD_GIT)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_GIT)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
        
        SET(COCOAPOD_TAG)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_TAG)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
        
        SET(APPLICATION_APPLE_COCOAPODS_PROJECT_${COCOAPOD_PROJECT_NAME})
        LIST(APPEND APPLICATION_APPLE_COCOAPODS_PROJECTS "APPLICATION_APPLE_COCOAPODS_PROJECT_${COCOAPOD_PROJECT_NAME}")
    endforeach()
    
    list(REMOVE_DUPLICATES APPLICATION_APPLE_COCOAPODS_PROJECTS)
    
    foreach(COCOAPODS_INDEX RANGE 0 ${LENGTH_APPLICATION_APPLE_COCOAPODS} 4)
        SET(COCOAPOD_PROJECT_NAME)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_PROJECT_NAME)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
    
        SET(COCOAPOD_NAME)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_NAME)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
        
        SET(COCOAPOD_GIT)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_GIT)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
        
        SET(COCOAPOD_TAG)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_TAG)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
        
        LIST(APPEND APPLICATION_APPLE_COCOAPODS_PROJECT_${COCOAPOD_PROJECT_NAME} ${COCOAPOD_PROJECT_NAME} ${COCOAPOD_NAME} ${COCOAPOD_GIT} ${COCOAPOD_TAG})
    endforeach()	
    
    foreach(APPLICATION_APPLE_COCOAPODS_PROJECT ${APPLICATION_APPLE_COCOAPODS_PROJECTS})
        SET(LENGTH_APPLICATION_APPLE_COCOAPODS_PROJECT)
        list(LENGTH ${APPLICATION_APPLE_COCOAPODS_PROJECT} LENGTH_APPLICATION_APPLE_COCOAPODS_PROJECT)
    
        math(EXPR LENGTH_APPLICATION_APPLE_COCOAPODS_PROJECT "${LENGTH_APPLICATION_APPLE_COCOAPODS_PROJECT}-1")
        
        SET(COCOAPOD_PROJECT_NAME_0)
        list(GET ${APPLICATION_APPLE_COCOAPODS_PROJECT} 0 COCOAPOD_PROJECT_NAME_0)
        
        STRING(APPEND PODFILE_BUFFER "target '" ${COCOAPOD_PROJECT_NAME_0} "' do\n")
        
        foreach(COCOAPODS_INDEX RANGE 0 ${${APPLICATION_APPLE_COCOAPODS_PROJECT}} 4)
            SET(COCOAPOD_PROJECT_NAME)
            list(GET ${APPLICATION_APPLE_COCOAPODS_PROJECT} ${COCOAPODS_INDEX} COCOAPOD_PROJECT_NAME)
            math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
        
            SET(COCOAPOD_NAME)
            list(GET ${APPLICATION_APPLE_COCOAPODS_PROJECT} ${COCOAPODS_INDEX} COCOAPOD_NAME)
            math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
            
            SET(COCOAPOD_GIT)
            list(GET ${APPLICATION_APPLE_COCOAPODS_PROJECT} ${COCOAPODS_INDEX} COCOAPOD_GIT)
            math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
            
            SET(COCOAPOD_TAG)
            list(GET ${APPLICATION_APPLE_COCOAPODS_PROJECT} ${COCOAPODS_INDEX} COCOAPOD_TAG)
            math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")

            string(COMPARE EQUAL ${COCOAPOD_GIT} "NO-GIT" COCOAPODS_NO_GIT)
            
            if(COCOAPODS_NO_GIT)
                STRING(APPEND PODFILE_BUFFER "  pod '" ${COCOAPOD_NAME} "', '" ${COCOAPOD_TAG} "'\n")
                
                MESSAGE("COCOAPOD: ${COCOAPOD_PROJECT_NAME} ${COCOAPOD_NAME} [${COCOAPOD_TAG}]")
            else()
                STRING(APPEND PODFILE_BUFFER "  pod '" ${COCOAPOD_NAME} "', :git => '" ${COCOAPOD_GIT} "', :tag => '" ${COCOAPOD_TAG} "'\n")

                MESSAGE("COCOAPOD: ${COCOAPOD_PROJECT_NAME} ${COCOAPOD_NAME} '${COCOAPOD_GIT}' [${COCOAPOD_TAG}]")
            endif()
        endforeach()
            
        STRING(APPEND PODFILE_BUFFER "  use_frameworks!\n")
        STRING(APPEND PODFILE_BUFFER "end\n")
        STRING(APPEND PODFILE_BUFFER "\n")
    endforeach()
            
    STRING(APPEND PODFILE_BUFFER "target '" ${PROJECT_NAME} "' do\n")

    foreach(COCOAPODS_INDEX RANGE 0 ${LENGTH_APPLICATION_APPLE_COCOAPODS} 4)
        SET(COCOAPOD_PROJECT_NAME)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_PROJECT_NAME)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
    
        SET(COCOAPOD_NAME)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_NAME)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
        
        SET(COCOAPOD_GIT)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_GIT)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")
        
        SET(COCOAPOD_TAG)
        list(GET APPLICATION_APPLE_COCOAPODS ${COCOAPODS_INDEX} COCOAPOD_TAG)
        math(EXPR COCOAPODS_INDEX "${COCOAPODS_INDEX}+1")

        string(COMPARE EQUAL ${COCOAPOD_GIT} "NO-GIT" COCOAPODS_NO_GIT)
    
        if(COCOAPODS_NO_GIT)
            STRING(APPEND PODFILE_BUFFER "  pod '" ${COCOAPOD_NAME} "', '" ${COCOAPOD_TAG} "'\n")
        else()
            STRING(APPEND PODFILE_BUFFER "  pod '" ${COCOAPOD_NAME} "', :git => '" ${COCOAPOD_GIT} "', :tag => '" ${COCOAPOD_TAG} "'\n")
        endif()
    endforeach()
    
    STRING(APPEND PODFILE_BUFFER "  use_frameworks!\n")
    STRING(APPEND PODFILE_BUFFER "end\n")
    STRING(APPEND PODFILE_BUFFER "\n")
    
    STRING(APPEND PODFILE_BUFFER "#patch\n")
    STRING(APPEND PODFILE_BUFFER "\n")

    SET(PODS_END_PATCH)
    file(STRINGS "Pods.patch" PODS_END_PATCH NEWLINE_CONSUME)
    
    STRING(APPEND PODFILE_BUFFER ${PODS_END_PATCH})
    
    FILE(WRITE ${CMAKE_BINARY_DIR}/Podfile ${PODFILE_BUFFER})
endif()

TARGET_LINK_LIBRARIES(${PROJECT_NAME} Kernel)

if(MENGINE_PLUGIN_MENGINE_STATIC)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} Mengine)
else()
    ADD_DEPENDENCIES(${PROJECT_NAME} Mengine)
endif()

if(MENGINE_TARGET_WINDOWS)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})

    if(NOT MENGINE_WINDOWS_UNIVERSAL)
        TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    endif()
endif()

if(MENGINE_TARGET_MACOS)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})    
endif()

if(MENGINE_TARGET_IOS)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} iconv)
endif()

if(MENGINE_TARGET_IOS_SIMULATOR)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} iconv)
endif()


if(MENGINE_TARGET_UNIX)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} pthread)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} dl)
endif()

IF(MENGINE_TARGET_IOS)
    ADD_APPLE_FRAMEWORK(CoreData)
    ADD_APPLE_FRAMEWORK(CoreAudio)
    ADD_APPLE_FRAMEWORK(CoreVideo)
    ADD_APPLE_FRAMEWORK(CoreFoundation)
    ADD_APPLE_FRAMEWORK(CoreMotion)
    ADD_APPLE_FRAMEWORK(CoreBluetooth)
    ADD_APPLE_FRAMEWORK(CoreHaptics)
    ADD_APPLE_FRAMEWORK(AudioToolbox)
    ADD_APPLE_FRAMEWORK(AVFoundation)
    ADD_APPLE_FRAMEWORK(IOKit)
    ADD_APPLE_FRAMEWORK(UIKit)
    ADD_APPLE_FRAMEWORK(GameController)
    ADD_APPLE_FRAMEWORK(MediaPlayer)
    ADD_APPLE_FRAMEWORK(QuartzCore)
    ADD_APPLE_FRAMEWORK(Foundation)
    ADD_APPLE_FRAMEWORK(OpenGLES)
    ADD_APPLE_FRAMEWORK(CoreGraphics)
    ADD_APPLE_FRAMEWORK(OpenAL)
    ADD_APPLE_FRAMEWORK(Security)
    ADD_APPLE_FRAMEWORK(Metal)
ENDIF()

IF(MENGINE_TARGET_IOS_SIMULATOR)
    ADD_APPLE_FRAMEWORK(CoreData)
    ADD_APPLE_FRAMEWORK(CoreAudio)
    ADD_APPLE_FRAMEWORK(CoreVideo)
    ADD_APPLE_FRAMEWORK(CoreFoundation)
    ADD_APPLE_FRAMEWORK(CoreMotion)
    ADD_APPLE_FRAMEWORK(CoreBluetooth)
    ADD_APPLE_FRAMEWORK(CoreHaptics)
    ADD_APPLE_FRAMEWORK(AudioToolbox)
    ADD_APPLE_FRAMEWORK(AVFoundation)
    ADD_APPLE_FRAMEWORK(IOKit)
    ADD_APPLE_FRAMEWORK(UIKit)
    ADD_APPLE_FRAMEWORK(GameController)
    ADD_APPLE_FRAMEWORK(MediaPlayer)
    ADD_APPLE_FRAMEWORK(QuartzCore)
    ADD_APPLE_FRAMEWORK(Foundation)
    ADD_APPLE_FRAMEWORK(OpenGLES)
    ADD_APPLE_FRAMEWORK(CoreGraphics)
    ADD_APPLE_FRAMEWORK(OpenAL)
    ADD_APPLE_FRAMEWORK(Security)
    ADD_APPLE_FRAMEWORK(Metal)
ENDIF()

IF(MENGINE_TARGET_MACOS)
    ADD_APPLE_FRAMEWORK(Cocoa)
    ADD_APPLE_FRAMEWORK(Carbon)
    ADD_APPLE_FRAMEWORK(AppKit)
    ADD_APPLE_FRAMEWORK(CoreData)
    ADD_APPLE_FRAMEWORK(CoreAudio)
    ADD_APPLE_FRAMEWORK(CoreVideo)
    ADD_APPLE_FRAMEWORK(CoreFoundation)
    ADD_APPLE_FRAMEWORK(AudioUnit)
    ADD_APPLE_FRAMEWORK(AudioToolBox)
    ADD_APPLE_FRAMEWORK(IOKit)
    ADD_APPLE_FRAMEWORK(ForceFeedback)
    ADD_APPLE_FRAMEWORK(Foundation)
    ADD_APPLE_FRAMEWORK(OpenGL)
    ADD_APPLE_FRAMEWORK(OpenAL)
    ADD_APPLE_FRAMEWORK(Security)
    ADD_APPLE_FRAMEWORK(Metal)
    ADD_APPLE_FRAMEWORK(SystemConfiguration)
    ADD_APPLE_FRAMEWORK(GameController)
    ADD_APPLE_FRAMEWORK(CoreHaptics)
    
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} iconv)
ENDIF()

foreach(NAME ${APPLICATION_APPLE_FRAMEWORKS})

endforeach()

IF(MENGINE_TARGET_ANDROID)
    IF(UNIX)
        string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_CORRECT)
    ELSE()
        SET(CMAKE_BUILD_TYPE_CORRECT ${CMAKE_BUILD_TYPE})
    ENDIF()

    add_library(SDL2_IMPORTED SHARED IMPORTED)
    SET(SDL2_IMPORTED_LOCATION_PATH ${MENGINE_REPOSITORY}/gradle/libraries/SDL2/build/intermediates/cmake/${CMAKE_BUILD_TYPE_CORRECT}/obj/${ANDROID_ABI}/libSDL2.so)
    set_target_properties(SDL2_IMPORTED PROPERTIES IMPORTED_LOCATION ${SDL2_IMPORTED_LOCATION_PATH})
    MESSAGE("SDL2_IMPORTED_LOCATION_PATH: ${SDL2_IMPORTED_LOCATION_PATH}")
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} SDL2_IMPORTED)
    
    target_link_libraries(${PROJECT_NAME}
        stdc++
        c
        m
        dl
        log
        android
        OpenSLES
        GLESv1_CM
        GLESv2
    )
ENDIF()

IF(MENGINE_TARGET_WINDOWS)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} Winmm.lib Version.lib Imm32.lib Setupapi.lib)
ENDIF()

IF(MENGINE_TOOLCHAIN_MSVC)
    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS /FORCE:MULTIPLE)
ENDIF()

IF(MENGINE_TARGET_IOS AND MENGINE_BUILD_ONLY_EXECUTABLE_MODULE)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED "NO")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED "NO")
ENDIF()

if(MENGINE_TARGET_IOS AND (MENGINE_PLUGIN_APPLE_MARSDK OR MENGINE_PLUGIN_APPLE_ADJUST OR MENGINE_PLUGIN_APPLE_FACEBOOK))
    set_target_properties(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_OTHER_LDFLAGS "-ObjC")
endif()
