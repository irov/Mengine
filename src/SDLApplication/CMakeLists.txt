if(MENGINE_TARGET_IOS)
    MENGINE_PROJECT_EXTRA_LANGUAGE(SDLApplication Swift)
elseif(MENGINE_TARGET_IOS_SIMULATOR)
    MENGINE_PROJECT_EXTRA_LANGUAGE(SDLApplication Swift)
else()
    MENGINE_PROJECT(SDLApplication)
endif()

if(MENGINE_TARGET_IOS)
    SET(MENGINE_APPLE_APPLICATION_DELEGATE_STRING "")
    
    foreach(DELEGATE ${APPLICATION_APPLE_APPLICATION_DELEGATE})
        STRING(APPEND MENGINE_APPLE_APPLICATION_DELEGATE_STRING "@\"${DELEGATE}\", ")
    endforeach()
    
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/MengineAppleApplicationDelegates.mm.in ${CMAKE_CURRENT_SOURCE_DIR}/MengineAppleApplicationDelegates.mm @ONLY)
endif()

ADD_FILTER(
main
    main.cpp
)

ADD_FILTER(
src
    SDLApplication.cpp
    SDLApplication.h
    SDLMessageBoxLogger.cpp
    SDLMessageBoxLogger.h
    SDLStdioLogger.cpp
    SDLStdioLogger.h
)

if(MENGINE_TOOLCHAIN_MSVC)
    ADD_FILTER(
    OutputDebugLogger
        SDLOutputDebugLogger.cpp
        SDLOutputDebugLogger.h
    )
endif()

if(MENGINE_WINDOWS_UNIVERSAL)
    ADD_FILTER(
    EntryPoint
        SDLUWPEntryPoint.cpp
        SDLUWPResources.rc
        SDLUWPResource_BlankCursor.cur
    )

    SET_SOURCE_FILES_PROPERTIES(SDLUWPEntryPoint.cpp PROPERTIES COMPILE_FLAGS /ZW)
endif()

if(MENGINE_WINDOWS_UNIVERSAL)
    ADD_FILTER(
    AppXManifest
        Package.appxmanifest
    )
endif()

if(MENGINE_TARGET_IOS)
    ADD_FILTER(
    ios
        MengineAppleApplicationDelegates.mm
        MengineAppleApplicationDelegates.h
        MengineUIKitDelegate.mm
        MengineUIKitDelegate.h
    )
endif()

if(MENGINE_TARGET_ANDROID)
    ADD_FILTER(
    android
        stack_chk_fail_local.c
        
        AndroidLogger.cpp
        AndroidLogger.h
    )
endif()

INCLUDE_DIRECTORIES(${THIRDPARTY_CONFIG_DIR}/SDL)
INCLUDE_DIRECTORIES(${THIRDPARTY_DIR}/SDL2/include)

LINK_DIRECTORIES(${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})

if(MENGINE_TARGET_WINDOWS)
    set(CMAKE_CXX_STACK_SIZE 4194304)
    
    ADD_MENGINE_EXECUTABLE_WIN32()
endif()

if(MENGINE_TARGET_UNIX)
    ADD_MENGINE_EXECUTABLE_UNIX()
endif()

if(MENGINE_TARGET_ANDROID)
    ADD_MENGINE_EXECUTABLE_ANDROID()
endif()

if(MENGINE_TARGET_APPLE)
    if(MENGINE_XCODE_DEPLOY_PATH)
        if(EXISTS "${MENGINE_XCODE_DEPLOY_PATH}/project_prepare.cmake")
            include("${MENGINE_XCODE_DEPLOY_PATH}/project_prepare.cmake")
        endif()
    endif()
    
    MESSAGE("MENGINE_APPLICATION_DEPLOY_PLIST: ${MENGINE_APPLICATION_DEPLOY_PLIST}")
    
    get_filename_component(MENGINE_APPLICATION_DEPLOY_PLIST_PATH ${MENGINE_APPLICATION_DEPLOY_PLIST} PATH)
    get_filename_component(MENGINE_APPLICATION_DEPLOY_PLIST_NAME ${MENGINE_APPLICATION_DEPLOY_PLIST} NAME)
    
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${MENGINE_APPLICATION_DEPLOY_PLIST_PATH})
    
    set(MENGINE_APPLE_RESOURCES)
    
    if(MENGINE_APPLICATION_DEPLOY_ICONS)
        get_filename_component(MACOSX_BUNDLE_ICON_FILE ${MENGINE_APPLICATION_DEPLOY_ICONS} NAME)
        
        set_source_files_properties(${MENGINE_APPLICATION_DEPLOY_ICONS} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${MENGINE_APPLICATION_DEPLOY_ICONS})
    endif()
    
    if(MENGINE_APPLICATION_DEPLOY_MEDIA)
        set_source_files_properties(${MENGINE_APPLICATION_DEPLOY_MEDIA} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${MENGINE_APPLICATION_DEPLOY_MEDIA})
    endif()
        
    if(MENGINE_APPLICATION_DEPLOY_STORYBOARD)
        set_source_files_properties(${MENGINE_APPLICATION_DEPLOY_STORYBOARD} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${MENGINE_APPLICATION_DEPLOY_STORYBOARD})
    endif()
    
    if(MENGINE_APPLICATION_DEPLOY_DATA)
        file(GLOB_RECURSE MENGINE_RESOURCE_DATA_CORRECT "${MENGINE_APPLICATION_DEPLOY_DATA}/*")
        list(FILTER MENGINE_RESOURCE_DATA_CORRECT EXCLUDE REGEX ".*.DS_Store$")
        foreach(DATA ${MENGINE_RESOURCE_DATA_CORRECT})
            file(RELATIVE_PATH RES ${MENGINE_APPLICATION_DEPLOY_DATA} ${DATA})
            get_filename_component(RES_LOC ${RES} PATH)
            
            set_source_files_properties(${DATA} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources/${RES_LOC}" HEADER_FILE_ONLY TRUE)
            string(REPLACE "/" "\\" ide_group_name "Resources/${RES_LOC}")
            source_group(${ide_group_name} FILES ${DATA})
        endforeach()

        set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${MENGINE_RESOURCE_DATA_CORRECT})
    endif()
    
    if(MENGINE_TARGET_MACOS)
        foreach(DYLIB ${APPLICATION_MACOS_DYLIB})
            MESSAGE("Add macos dylib: ${DYLIB}")
            
            set_source_files_properties(${DYLIB} PROPERTIES MACOSX_PACKAGE_LOCATION "MacOS")
            
            set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${DYLIB})
        endforeach()
        
        foreach(DYLIB ${APPLICATION_MACOS_DYLIB_WITH_SIGN})
            MESSAGE("Add macos dylib with sign: ${DYLIB}")
            
            set_source_files_properties(${DYLIB} PROPERTIES MACOSX_PACKAGE_LOCATION "MacOS")
            set_source_files_properties(${DYLIB} PROPERTIES XCODE_FILE_ATTRIBUTES "CodeSignOnCopy")
            
            set(MENGINE_APPLE_RESOURCES ${MENGINE_APPLE_RESOURCES} ${DYLIB})
        endforeach()
    endif()
    
    string(TIMESTAMP MACOSX_FRAMEWORK_BUNDLE_VERSION "%Y.%m.%d.%H%M%S")
    string(TIMESTAMP MACOSX_FRAMEWORK_SHORT_VERSION_STRING "%Y.%m.%d")
    
    MESSAGE("Bundle Version: ${MACOSX_FRAMEWORK_BUNDLE_VERSION} [${MACOSX_FRAMEWORK_SHORT_VERSION_STRING}]")
    
    SET(SRC_FILES ${SRC_FILES} ${MENGINE_APPLE_RESOURCES})

    if(MENGINE_TARGET_IOS OR MENGINE_TARGET_IOS_SIMULATOR)
        ADD_MENGINE_EXECUTABLE_MACOSX()
    
        foreach(FRAMEWORK_NAME ${APPLICATION_APPLE_FRAMEWORK_WITH_PATH})
            set_target_properties(${PROJECT_NAME} PROPERTIES
                XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY ON
                XCODE_EMBED_FRAMEWORKS ${FRAMEWORK_NAME}
            )
        endforeach()
    
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CONFIGURATION_BUILD_DIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_SCHEME_WORKING_DIRECTORY "${CMAKE_INSTALL_PREFIX}")
    
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_TARGETED_DEVICE_FAMILY "1,2")
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_COMBINE_HIDPI_IMAGES NO)

        if(MENGINE_APPLICATION_DEPLOY_MEDIA)
            SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME ${MENGINE_APPLICATION_DEPLOY_MEDIA_APPICON_NAME})
            SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME ${MENGINE_APPLICATION_DEPLOY_MEDIA_LAUNCHIMAGE_NAME})
        endif()
    elseif(MENGINE_TARGET_MACOS)
        ADD_MENGINE_EXECUTABLE_MACOSX()
    endif()
    
    if(MENGINE_XCODE_DEPLOY_PATH)
        if(EXISTS "${MENGINE_XCODE_DEPLOY_PATH}/project_deploy.cmake")
            include("${MENGINE_XCODE_DEPLOY_PATH}/project_deploy.cmake")
        endif()
    endif()
    
    get_target_property(MACOSX_BUNDLE_GUI_IDENTIFIER ${PROJECT_NAME} XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER)
	
	
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_GENERATE_DEBUGGING_SYMBOLS YES)
    if(MENGINE_BUILD_TYPE_DEBUG)
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL 0)
    else()
        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL 3)
    endif()
	
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${MENGINE_APPLICATION_DEPLOY_PLIST_NAME})
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ENABLE_BITCODE ${MENGINE_XCODE_ENABLE_BITCODE})
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Release] "NO")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Debug] "YES")	
	SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_CURRENT_PROJECT_VERSION ${MACOSX_FRAMEWORK_BUNDLE_VERSION})
	SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_MARKETING_VERSION ${MACOSX_FRAMEWORK_SHORT_VERSION_STRING})
	SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT "dwarf-with-dsym")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_INSTALL_PATH "$(LOCAL_APPS_DIR)")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_SKIP_INSTALL NO)
	SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES XCODE_GENERATE_SCHEME TRUE)
	
    set(CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Release] NO CACHE STRING "CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH" FORCE)
    set(CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH[variant=Debug] YES CACHE STRING "CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH" FORCE)

    MENGINE_GENERATE_COCOAPODS()
endif()

TARGET_LINK_LIBRARIES(${PROJECT_NAME} Kernel)

if(MENGINE_PLUGIN_MENGINE_STATIC)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} Mengine)
else()
    ADD_DEPENDENCIES(${PROJECT_NAME} Mengine)
endif()

if(MENGINE_TARGET_WINDOWS)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2-static${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})

    if(NOT MENGINE_WINDOWS_UNIVERSAL)
        TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    endif()
endif()

if(MENGINE_TARGET_APPLE)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} iconv)
endif()

if(MENGINE_TARGET_UNIX)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}SDL2main${MENGINE_DEPENDENCIES_DEBUG_SUFFIX}${MENGINE_LIB_SUFFIX})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} pthread)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} dl)
endif()

IF(MENGINE_TARGET_IOS)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreData)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreAudio)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreVideo)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreMotion)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreBluetooth)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreHaptics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreGraphics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreTelephony)
    ADD_MENGINE_APPLE_FRAMEWORK(SystemConfiguration)
    ADD_MENGINE_APPLE_FRAMEWORK(AudioToolbox)
    ADD_MENGINE_APPLE_FRAMEWORK(AVFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(IOKit)
    ADD_MENGINE_APPLE_FRAMEWORK(UIKit)
    ADD_MENGINE_APPLE_FRAMEWORK(GameController)
    ADD_MENGINE_APPLE_FRAMEWORK(MediaPlayer)
    ADD_MENGINE_APPLE_FRAMEWORK(QuartzCore)
    ADD_MENGINE_APPLE_FRAMEWORK(Foundation)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenGLES)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenAL)
    ADD_MENGINE_APPLE_FRAMEWORK(Security)
    ADD_MENGINE_APPLE_FRAMEWORK(Metal)
    ADD_MENGINE_APPLE_FRAMEWORK(AdSupport)
ENDIF()

IF(MENGINE_TARGET_IOS_SIMULATOR)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreData)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreAudio)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreVideo)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreMotion)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreBluetooth)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreHaptics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreGraphics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreTelephony)
    ADD_MENGINE_APPLE_FRAMEWORK(SystemConfiguration)
    ADD_MENGINE_APPLE_FRAMEWORK(AudioToolbox)
    ADD_MENGINE_APPLE_FRAMEWORK(AVFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(IOKit)
    ADD_MENGINE_APPLE_FRAMEWORK(UIKit)
    ADD_MENGINE_APPLE_FRAMEWORK(GameController)
    ADD_MENGINE_APPLE_FRAMEWORK(MediaPlayer)
    ADD_MENGINE_APPLE_FRAMEWORK(QuartzCore)
    ADD_MENGINE_APPLE_FRAMEWORK(Foundation)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenGLES)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenAL)
    ADD_MENGINE_APPLE_FRAMEWORK(Security)
    ADD_MENGINE_APPLE_FRAMEWORK(Metal)
    ADD_MENGINE_APPLE_FRAMEWORK(AdSupport)
ENDIF()

IF(MENGINE_TARGET_MACOS)
    ADD_MENGINE_APPLE_FRAMEWORK(Cocoa)
    ADD_MENGINE_APPLE_FRAMEWORK(Carbon)
    ADD_MENGINE_APPLE_FRAMEWORK(AppKit)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreData)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreAudio)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreVideo)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreFoundation)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreHaptics)
    ADD_MENGINE_APPLE_FRAMEWORK(CoreTelephony)
    ADD_MENGINE_APPLE_FRAMEWORK(AudioUnit)
    ADD_MENGINE_APPLE_FRAMEWORK(AudioToolBox)
    ADD_MENGINE_APPLE_FRAMEWORK(IOKit)
    ADD_MENGINE_APPLE_FRAMEWORK(ForceFeedback)
    ADD_MENGINE_APPLE_FRAMEWORK(Foundation)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenGL)
    ADD_MENGINE_APPLE_FRAMEWORK(OpenAL)
    ADD_MENGINE_APPLE_FRAMEWORK(Security)
    ADD_MENGINE_APPLE_FRAMEWORK(Metal)
    ADD_MENGINE_APPLE_FRAMEWORK(SystemConfiguration)
    ADD_MENGINE_APPLE_FRAMEWORK(GameController)
ENDIF()

IF(MENGINE_TARGET_ANDROID)
    IF(UNIX)
        string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_CORRECT)
    ELSE()
        SET(CMAKE_BUILD_TYPE_CORRECT ${CMAKE_BUILD_TYPE})
    ENDIF()

    ADD_LIBRARY_IMPORTED(SDL2_IMPORTED "${MENGINE_REPOSITORY}/gradle/libraries/SDL2/build/intermediates/cmake/${CMAKE_BUILD_TYPE_CORRECT}/obj/${ANDROID_ABI}/libSDL2.so")
    
    target_link_libraries(${PROJECT_NAME}
        stdc++
        c
        m
        dl
        log
        android
        OpenSLES
        GLESv1_CM
        GLESv2
    )
ENDIF()

IF(MENGINE_TARGET_WINDOWS)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} Winmm.lib Version.lib Imm32.lib Setupapi.lib)
ENDIF()

IF(MENGINE_TOOLCHAIN_MSVC)
    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS /FORCE:MULTIPLE)
ENDIF()


if(MENGINE_TARGET_IOS AND (MENGINE_PLUGIN_APPLE_MARSDK OR MENGINE_PLUGIN_APPLE_ADJUST OR MENGINE_PLUGIN_APPLE_FACEBOOK))
    set_target_properties(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_OTHER_LDFLAGS "-ObjC")
endif()
