#include "AndroidHttpResponse.h"

namespace Mengine
{
    //////////////////////////////////////////////////////////////////////////
    AndroidHttpResponse::AndroidHttpResponse()
        : m_requestId( 0 )
        , m_code( HTTP_OK )
        , m_successful( false )
    {
    }
    //////////////////////////////////////////////////////////////////////////
    AndroidHttpResponse::~AndroidHttpResponse()
    {
    }
    //////////////////////////////////////////////////////////////////////////
    void AndroidHttpResponse::setRequestId( HttpRequestId _requestId )
    {
        m_requestId = _requestId;
    }
    //////////////////////////////////////////////////////////////////////////
    HttpRequestId AndroidHttpResponse::getRequestId() const
    {
        return m_requestId;
    }
    //////////////////////////////////////////////////////////////////////////
    void AndroidHttpResponse::appendHeaders( const Char * _ptr, size_t _size )
    {
        m_headers.emplace_back( _ptr, _size );
    }
    //////////////////////////////////////////////////////////////////////////
    const HttpRequestHeaders & AndroidHttpResponse::getHeaders() const
    {
        return m_headers;
    }
    //////////////////////////////////////////////////////////////////////////
    void AndroidHttpResponse::appendData( const Char * _ptr, size_t _size )
    {
        m_data.append( _ptr, _size );
    }
    //////////////////////////////////////////////////////////////////////////
    const String & AndroidHttpResponse::getData() const
    {
        return m_data;
    }
    //////////////////////////////////////////////////////////////////////////
    void AndroidHttpResponse::setCode( EHttpCode _code )
    {
        m_code = _code;
    }
    //////////////////////////////////////////////////////////////////////////
    EHttpCode AndroidHttpResponse::getCode() const
    {
        return m_code;
    }
    //////////////////////////////////////////////////////////////////////////
    void AndroidHttpResponse::setError( const String & _error )
    {
        m_error = _error;
    }
    //////////////////////////////////////////////////////////////////////////
    const String & AndroidHttpResponse::getError() const
    {
        return m_error;
    }
    //////////////////////////////////////////////////////////////////////////
    void AndroidHttpResponse::setSuccessful( bool _successful )
    {
        m_successful = _successful;
    }
    //////////////////////////////////////////////////////////////////////////
    bool AndroidHttpResponse::isSuccessful() const
    {
        return m_successful;
    }
    //////////////////////////////////////////////////////////////////////////
}