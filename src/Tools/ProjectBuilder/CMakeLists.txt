set( MY_LIB_NAME ProjectBuilder )

ADD_FILTER(
src
    ProjectBuilder.cpp
    
	AlphaSpreading.cpp
    AlphaSpreading.h
    Image.cpp
    Image.h
    XmlToBinDecoder.cpp
    XmlToBinDecoder.h
    XmlToAekConverter.cpp
    XmlToAekConverter.h
)

add_definitions(-DUNICODE)

add_definitions(-DMS_NO_COREDLL)
add_definitions(-DPy_NO_ENABLE_SHARED)
add_definitions(-DPYBIND_PYTHON_VERSION=342)

INCLUDE_DIRECTORIES( 
    ${THIRDPARTY_DIR}/pugixml/src
    ${THIRDPARTY_DIR}/metabuf                     
    ${THIRDPARTY_DIR}/pybind/include
    ${THIRDPARTY_DIR}/libmovie/include
    ${THIRDPARTY_DIR}/tinyini/include
    ${THIRDPARTY_DIR}/libmath/include
)
 
LINK_DIRECTORIES( ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} )
ADD_EXECUTABLE( ${MY_LIB_NAME} WIN32 ${SRC_FILES} )

TARGET_LINK_LIBRARIES(${MY_LIB_NAME} Kernel)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} Metacode)

TARGET_LINK_LIBRARIES(${MY_LIB_NAME} CodecService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} ConverterService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} OptionsService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} FileService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} LoggerService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} PluginService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} ProviderService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} StringizeService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} ThreadService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} ArchiveService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} PluginService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} TextService)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} PrototypeService)

TARGET_LINK_LIBRARIES(${MY_LIB_NAME} Win32UnicodeSystem)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} Win32ThreadSystem)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} Win32PluginSystem)

TARGET_LINK_LIBRARIES(${MY_LIB_NAME} XmlCodecPlugin)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} ImageCodecPlugin)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} ZipPlugin)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} LZ4Plugin)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} Win32FileGroupPlugin)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} DevelopmentConverterPlugin)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} Movie1Plugin)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} MoviePlugin)
TARGET_LINK_LIBRARIES(${MY_LIB_NAME} MetabufLoaderPlugin)

TARGET_LINK_LIBRARIES( ${MY_LIB_NAME}    
    ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}python3${MENGINE_LIB_SUFFIX}
    ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}python3_decimal${MENGINE_LIB_SUFFIX}
    ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}zlib${MENGINE_LIB_SUFFIX}
    ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}stdex${MENGINE_LIB_SUFFIX}
    ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}pybind3${MENGINE_LIB_SUFFIX}    
    ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}tinyini${MENGINE_LIB_SUFFIX}
    ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}movie${MENGINE_LIB_SUFFIX}
    ${THIRDPARTY_LIB_DIR}/${MENGINE_LIB_PREFIX}math${MENGINE_LIB_SUFFIX}
    Ws2_32.lib
    Crypt32.lib
    )
    

if(MSVC)
    TARGET_LINK_LIBRARIES( ${MY_LIB_NAME}
            ${THIRDPARTY_DIR}/openssl/lib/libcryptoMT${MENGINE_DEPENDENCIES_LIB_SUFFIX}.lib
            ${THIRDPARTY_DIR}/openssl/lib/libsslMT${MENGINE_DEPENDENCIES_LIB_SUFFIX}.lib
        )
endif()    
    
foreach(dependency ${APPLICATION_DEPENDENCIES})
	#MESSAGE( ${LIB_PREFIX}${dependency}${MENGINE_LIB_SUFFIX} )
	TARGET_LINK_LIBRARIES( ${MY_LIB_NAME} debug ${dependency} )
	TARGET_LINK_LIBRARIES( ${MY_LIB_NAME} optimized ${dependency} )
endforeach(dependency ${APPLICATION_DEPENDENCIES})    

TARGET_LINK_LIBRARIES( ${MY_LIB_NAME} ${APPLICATION_LIBS} comctl32 Version Shlwapi)