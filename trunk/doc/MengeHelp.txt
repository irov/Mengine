
// Menge

class vec2f
{
	vec2f( float _x, float _y );
};

class Color
{
	Color( float _r, float _g, float _b, float _a );
	float getA(); - получить значени Alpha канала
	float getR(); - получить значени Red канала
	float getG(); - получить значени Greed канала
	float getB(); - получить значени Blue канала
};

class Node
{
	void setName( string _name ); - задать имя ноды
	string getName(); - получить имя ноды
	
	vec2f getLocalPosition(); - получить позицию
	void setLocalPosition( vec2f _position ); 

	vec2f getLocalDirection(); - получить направление
	void setLocalDirection( vec2f _direction ); 

	vec2f getOrigin(); - получить центр откуда считаются координаты 
	void setOrigin( vec2f _origin );

	vec2f getScale(); - получить скейл
	void setScale( vec2f _scale );

	float getAngle(); - получить угол поворота в радианах
	void setRotate( float _angle );

	vec2f getWorldDirection(); - получить направление с учетом иерархии
	vec2f getWorldPosition(); - получить позицию с учетом иерархии
	
	void translate( vec2f _offset ); - переместить обьект
	vec2f getScreenPosition(); - получить координаты относительно экрана.
	
	bool compile(); - скомпилировать ресурсы
	void release(); - удалить ресурсы
	bool isCompile(); - проверить скомпилировано или нет

	void hide( bool _hide ); - спрятатть обьект
	bool isHide(); - проверить спрятан или нет

	bool activate(); - активировать обьект
	void deactivate(); - деактивировать обьект
	bool isActivate(); - проверить активирован или нет

	void enable(); - 
	void disable();
	bool isEnable();

	void setUpdatable( bool _updatable );
	bool isUpdatable();

	void addChildren( Node _node ); - добавить дочернию ноду 
	void addChildrenFront( Node _node ); - добавить дочернию ноду вперед
	void removeChildren( Node _node ); - удалить дочернию ноду
	Node getChildren( string _name, bool _recursion ); - получить дочернию ноду
	bool isChildren( Node _node, bool _recursion ); - есть ли такая нода

	bool updatable();
	void update( float _timing ); - деприкатед (удалится)
	Node getParent(); 
	
	void setListener( PyObject _listener ); 
	PyObject getListener();
	
	void setLocalColor( Color _color ); - задать цвет
	Color getLocalColor(); - получить цвет

	void setLocalAlpha( float _alpha ); - задать альфу
	Color getWorldColor(); - получить цвет с учетом иерархии

	//перевести обьект в другой цвет _newColor за период времени _time
	void localColorToCb( float _time, Color _newColor, void _callback( Node _node, bool _isEnd ) );
	 
	//перевести обьект в другую альфу _newAlpha за период времени _time
	void localAlphaToCb( float _time, float _newAlpha, void _callback( Node _node, bool _isEnd ) );

	//первать перевод обьекта в другой цвет(альфу) и вызвать калбек с последним параметром _isEnd = True
	void localColorToStop();

	//двигать обьект в новое положение _newLocalPosition за период времени _time	
	void moveToCb( float _time, vec2f _newLocalPosition, void _callback( Node _node, bool _isEnd ) );
	//первать движение и вызвать калбек с последним параметром _isEnd = True
	void moveToStop();

	//поворачивать обьект в новое положение _newAngle за период времени _time	
	void angleToCb( float _time, float _newAngle, void _callback( Node _node, bool _isEnd ) );
	//первать поворот и вызвать калбек с последним параметром _isEnd = True
	void angleToStop();
	
	//скейлить обьект в новый размер _newScale за период времени _time
	void scaleToCb( float _time, vec2f _newScale, void _callback( Node _node, bool _isEnd ) );
	//первать скейл и вызвать калбек с последним параметром _isEnd = True
	void scaleToStop();

	//ускорять обьект в новое положение _newLocalPosition за период времени _time
	void accMoveToCb( float _time, vec2f _newLocalPosition, void _callback( Node _node, bool _isEnd ) );
	//ускорять вращение в новое направление _newAngle за период времени _time
	void accAngleToCb( float _time, float _newAngle, void _callback( Node _node, bool _isEnd ) );
};

class Emitter
		: Node
{
	void play(); - проиграть эмитер
	void playFromPosition( float _position ); - проиграть эмитер с определеной позиции
	void stop(); - остановить эмитер
	void pause(); - запаузить эмитер
	void restart(); - рестартавать эмитер
	void setLooped( bool _looped ); - задать цыкличность проигрывания эмитера
	bool getLooped(); - узнать цыкличность проигрывания эмитера
	void setResource( string _resourceName ); - задать ресур эмитера
	
	void setEmitter( string _emitterName ); - задать имя эмитера
	void setEmitterRelative( bool _relative ); - привязаны партиклы к трансформации эмиттера или нет
};

class SoundEmitter
		: Node
{
	void play(); - проиграть звук
	void pause(); - запаузить звук
	void stop(); - остановить звук
	bool isPlaying(); - проверить играет или нет
	void setVolume( float _volume ); - задать громкость
	float getVolume(); - получить громкость
	void setLooped( bool _looped ); - задать цыклическое проигрывание звука
	bool getLooping();
	void setSoundResource( string _resourceName ); - задать ресурс звука
};

class TextField
		: Node
{
	void setText( string _text ); - задать текст
	void setHeight( float _height ); - задать высоту
	string getText(); - получить текст
	float getHeight(); - получить вусоту
	void setOutlineColor( Color _color ); - задать цвет оконтвки(?)
	Color getOutlineColor(); - получить цвет оконтовки(?)
	vec2f getLength(); - получить длину текста в пикселях
	void setMaxLen( float _len ); - задать максимальную длину
	float getLineOffset(); 
	void setLineOffset( float _offset );
	void setResource( string _resourceName );
	void setOutlineResource( string _outlineResourceName );
	bool getCenterAlign();
	void setCenterAlign( bool _align );
	bool getRightAlign();
	void setRightAlign( bool _align );
	bool getLeftAlign();
	void setLeftAlign( bool _align );
	float getCharOffset();
	void setCharOffset( float _offset );
	void setTextByKey( string _key );
};

class Arrow
		: Node
{
	void setOffsetClick( vec2f _offset );
	vec2f getOffsetClick();
	void addHotSpot( HotSpot _hotspot );
	HotSpot getCurrentHotSpot();
};

class HotSpot
		: Node
{
	void enableGlobalMouseEvent( bool _enable );
	void enableGlobalKeyEvent( bool _enable );
	void addPoint( vec2f _point );
	void clearPoints();
	bool pick( HotSpot _hotspot );
};

class HotSpotImage
		: HotSpot
{
	void setResourceName( string _resourceName );
	void setFrame( int _frame );
	void setAlphaTest( float _alphaTest );
	float getAlphaTest();
};

class Point
		: Node
{
	bool testHotSpot( HotSpot _hotspot );
};

class Sprite
		: Node
{
	void setImageIndex( int _index );
	int getImageIndex();
	int getImageCount();
	void setImageResource( string _resourceName );
	string getImageResource();
	vec2f getImageSize();
	void setPercentVisibility( vec2f _left, vec2f _right );
	void setPercentVisibilityToCb( float _time, vec2f _newLeft, vec2f _newRight, void _callback( Node _node, bool _isEnd ) );
	void setPercentVisibilityToStop();
	void flip( bool _x );
	bool getCenterAlign();
	void setCenterAlign( bool _align );
	void setImageAlpha( string _imageAlphaName );
	void disableTextureColor( bool _disable );
};

class Animation
		: Sprite
{
	void play();
	void stop();
	void pause();
	void setLooped( bool _looped );
	void getLooped();
	void setAnimationResource( string _resourceName );
	void setAnimationFactor( float _factor );
	float getAnimationFactor();
	int getCurrentFrame();
	int getFrameCount();
	void setCurrentFrame( int _frame );
};

class Video
		: Node
{
	void play();
	void stop();
	void pause();
};

class Window
		: Node
{
	void setClientSize( vec2f _size );
	void setClientSizeClip( vec2f _size );
	void setClientSizeInTiles( vec2f _size );
	vec2f getClientSize();
	vec2f getWindowSize();
	vec2f getTileSize();
};

class Mesh_40_30
		: Node
{
	void setAmplitude( float _amplitude );
	void setFrequency( float _frequency );
};

class Scene
		: Node
{
	void layerAppend( string _layerName, Node _node );
	void layerRemove( Node _node );
	void layerHide( string _layerName, bool _hide );
	Node getNode( string _name );
	vec2f getLayerSize( string _layerName );
	void setRenderTarget( string _cameraName, vec2f _size );
	void renderSelf();
	void blockInput( bool _block );
	bool getBlockInput();
	void setCameraPosition( float _x, float _y );
};

class Entity
		: Node
{
	void moveTo( float _time, vec2f _point, bool _changeDirection );
	void moveStop();
	void rotateTo( float _time, vec2f _point );
	void accelerateTo( float _speed, vec2f _point, bool _changeDirection );
	void directTo( float _time, vec2f _dir );
	void angleTo( float _time, float _angle );
	void rotateStop()
	void flip( bool _x, bool _y );
	void scaleTo( float _time, vec2f _scale );
	void scaleStop();
	void setVelocity( vec2f _velocity );
	vec2f getVelocity();
	float getVelocitySpeed();
};

Entity createEntity( string _type, vec2f _position, vec2f _direction );
Entity createEntityFromXml( string _type, string _xml, vec2f _position, vec2f _direction );

void setCurrentScene( string _sceneName, bool _destroyPrevious );
void setCurrentSceneCb( string _sceneName, void _callback( Scene _scene ) );
string getCurrentScene();

Node createNodeFromXml( string _xml );
void destroyNode( Node _node );

int schedule( float _timing, void _callback() );
void scheduleRemove( int _schedule );
void scheduleRemoveAll();
void scheduleStopAll();
void scheduleResumeAll();
void scheduleFreeze( int _schedule, bool _freeze );

float getMouseX();
float getMouseY();
void setCursorPosition( float _x, float _y );

Arrow getArrow();

void directResourceCompile( string _resourceName );
void directResourceRelease( string _resourceName );
void directResourceUnload( string _resourceName );
void directResourceFileCompile( string _filename );
void deferredResourceFileCompile( string _filename[, ...] );
void directResourceFileRelease( string _filename );
void directResourceFileUnload( string _filename );

void quitApplication();
Sprite createShot( string _resourceName, vec2f _min, vec2f _max );
void setFullscreenMode( bool _fullscreen );
bool getFullscreenMode();
void addResourceListener( PyObject _listener );
void removeResourceListener( PyObject _listener );
void renderOneFrame();
void writeImageToFile( string _resourceName, int _frame, string _filename );
void createResourceFromXml( string _xml );
void createImageResource( string _resourceName, string _filename );
bool createFolder( string _path );
bool deleteFolder( string _path );
vec2f screenToLocal( string _layerName, vec2f _point );
void minimizeWindow();
void setMouseBounded( bool _bounded );

bool setBlow( bool _active );
float getBlow();
void setEnoughBlow( float _enoughBlow );

bool isKeyDown( int _key );
bool isInViewport( vec2f _point );
int getResourceCount( string _filename );

int randint( int _min, int _max );
float sqrtf( float _x );
float absf( float _x );
float cosf( float _x );
float sinf( float _x );
float tanf( float _x );
float acosf( float _x );
float atanf( float _x );

float getVec2fX( vec2f _v );
float getVec2fY( vec2f _v );

string getTimeString();

void addSetting( string _setting, string _defaultValue, void _applyFunction( string _setting, string _value ) );
void changeSetting( string _setting, string _value );
string getSetting( string _setting );
void createAccount( string _accountName );
void selectAccount( string _accountName );
void saveAccounts();
void saveAccountsInfo();
void deleteAccount( string _accountName );
string getCurrentAccountName();
string getDataPath();

void setParticlesEnabled( bool _enable );

string getTextByKey( string _key );
void loadPak( string _pakName, string _resourceXml, void _doneCallback() );
int getImageCount( string _resourceName );


void soundSetVolume( float _volume );
float soundGetVolume();
void soundMute( bool _mute );

void commonSetVolume( float _volume );
float commonGetVolume();

void musicPlayList( string _playlist );
void musicPlayTrack( string _playlist, int _track, bool _looped );
int musicGetNumTracks();
void musicSetVolume( float _volume );
float musicGetVolume();
void musicStop();
void musicShuffle( string _playlist );
string musicGetPlaying();
void musicVolumeTo( float _time, float _volume );
void musicVolumeToCb( float _time, float _volume, void _callback() );
float musicGetPosMs();
void musicSetPosMs( float _pos );
void setCursorMode( bool _mode );
bool getCursorMode();