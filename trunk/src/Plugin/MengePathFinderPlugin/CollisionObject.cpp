#	include "CollisionObject.h"

namespace Menge
{
	//////////////////////////////////////////////////////////////////////////
	CollisionObject::CollisionObject()
		: m_node(nullptr)
		, m_radius(0.f)
		, m_mass(0.f)
		, m_motor(nullptr)
	{
	}
	//////////////////////////////////////////////////////////////////////////
	CollisionObject::~CollisionObject()
	{
	}
	//////////////////////////////////////////////////////////////////////////
	void CollisionObject::setNode( Node * _node )
	{
		m_node = _node;
	}
	//////////////////////////////////////////////////////////////////////////
	Node * CollisionObject::getNode() const
	{
		return m_node;
	}
	//////////////////////////////////////////////////////////////////////////
	void CollisionObject::setRadius( float _radius )
	{
		m_radius = _radius;
	}
	//////////////////////////////////////////////////////////////////////////
	float CollisionObject::getRadius() const
	{
		return m_radius;
	}
	//////////////////////////////////////////////////////////////////////////
	void CollisionObject::setMass( float _mass )
	{
		m_mass = _mass;
	}
	//////////////////////////////////////////////////////////////////////////
	float CollisionObject::getMass() const
	{
		return m_mass;
	}
	//////////////////////////////////////////////////////////////////////////
	void CollisionObject::setMotor( CollisionMotor * _motor )
	{
		m_motor = _motor;
	}
	//////////////////////////////////////////////////////////////////////////
	CollisionMotor * CollisionObject::getMotor() const
	{
		return m_motor;
	}
	//////////////////////////////////////////////////////////////////////////
	void CollisionObject::update( float _timing )
	{
		if( m_motor == nullptr )
		{
			return;
		}

		m_motor->update( _timing, this );
	}
}